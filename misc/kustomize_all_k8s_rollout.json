{
    "definitions": {
        "io.argoproj.argocd.v1alpha1.AWSAuthConfig": {
            "description": "AWSAuthConfig is an AWS IAM authentication configuration",
            "type": "object",
            "properties": {
                "clusterName": {
                    "description": "ClusterName contains AWS cluster name",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN contains optional role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AWSAuthConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.AppProject": {
            "description": "AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.AppProjectSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.AppProjectStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppProject",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.AppProjectList": {
            "description": "AppProjectList is list of AppProject resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.AppProject"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppProjectList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.AppProjectSpec": {
            "description": "AppProjectSpec is the specification of an AppProject",
            "type": "object",
            "properties": {
                "clusterResourceBlacklist": {
                    "description": "ClusterResourceBlacklist contains list of blacklisted cluster level resources",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupKind"
                    }
                },
                "clusterResourceWhitelist": {
                    "description": "ClusterResourceWhitelist contains list of whitelisted cluster level resources",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupKind"
                    }
                },
                "description": {
                    "description": "Description contains optional project description",
                    "type": "string"
                },
                "destinations": {
                    "description": "Destinations contains list of destinations available for deployment",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationDestination"
                    }
                },
                "namespaceResourceBlacklist": {
                    "description": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupKind"
                    }
                },
                "namespaceResourceWhitelist": {
                    "description": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupKind"
                    }
                },
                "orphanedResources": {
                    "description": "OrphanedResources specifies if controller should monitor orphaned resources of apps in this project",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OrphanedResourcesMonitorSettings"
                },
                "permitOnlyProjectScopedClusters": {
                    "description": "PermitOnlyProjectScopedClusters determines whether destinations can only reference clusters which are project-scoped",
                    "type": "boolean"
                },
                "roles": {
                    "description": "Roles are user defined RBAC roles associated with this project",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ProjectRole"
                    }
                },
                "signatureKeys": {
                    "description": "SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SignatureKey"
                    }
                },
                "sourceNamespaces": {
                    "description": "SourceNamespaces defines the namespaces application resources are allowed to be created in",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sourceRepos": {
                    "description": "SourceRepos contains list of repository URLs which can be used for deployment",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "syncWindows": {
                    "description": "SyncWindows controls when syncs can be run for apps in this project",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncWindow"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppProjectSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.AppProjectStatus": {
            "description": "AppProjectStatus contains status information for AppProject CRs",
            "type": "object",
            "properties": {
                "jwtTokensByRole": {
                    "description": "JWTTokensByRole contains a list of JWT tokens issued for a given role",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.JWTTokens"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppProjectStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Application": {
            "description": "Application is a definition of Application resource.",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "operation": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Operation"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Application",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationCondition": {
            "description": "ApplicationCondition contains details about an application condition, which is usually an error or warning",
            "type": "object",
            "required": [
                "type",
                "message"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the time the condition was last observed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains human-readable message indicating details about condition",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type is an application condition type",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationDestination": {
            "description": "ApplicationDestination holds information about the application's destination",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace",
                    "type": "string"
                },
                "server": {
                    "description": "Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationDestination",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationList": {
            "description": "ApplicationList is list of Application resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Application"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationMatchExpression": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationMatchExpression",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationPreservedFields": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationPreservedFields",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSet": {
            "description": "ApplicationSet is a set of Application resources",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetApplicationStatus": {
            "description": "ApplicationSetApplicationStatus contains details about each Application managed by the ApplicationSet",
            "type": "object",
            "required": [
                "application",
                "message",
                "status",
                "step"
            ],
            "properties": {
                "application": {
                    "description": "Application contains the name of the Application resource",
                    "type": "string",
                    "default": ""
                },
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the time the status was last updated",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains human-readable message indicating details about the status",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "Status contains the AppSet's perceived status of the managed Application resource: (Waiting, Pending, Progressing, Healthy)",
                    "type": "string",
                    "default": ""
                },
                "step": {
                    "description": "Step tracks which step this Application should be updated in",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetApplicationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetCondition": {
            "description": "ApplicationSetCondition contains details about an applicationset condition, which is usally an error or warning",
            "type": "object",
            "required": [
                "type",
                "message",
                "status",
                "reason"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the time the condition was last observed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains human-readable message indicating details about condition",
                    "type": "string",
                    "default": ""
                },
                "reason": {
                    "description": "Single word camelcase representing the reason for the status eg ErrorOccurred",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "True/False/Unknown",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type is an applicationset condition type",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetGenerator": {
            "description": "ApplicationSetGenerator represents a generator at the top level of an ApplicationSet.",
            "type": "object",
            "properties": {
                "clusterDecisionResource": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.DuckTypeGenerator"
                },
                "clusters": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterGenerator"
                },
                "git": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GitGenerator"
                },
                "list": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ListGenerator"
                },
                "matrix": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.MatrixGenerator"
                },
                "merge": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.MergeGenerator"
                },
                "plugin": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PluginGenerator"
                },
                "pullRequest": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGenerator"
                },
                "scmProvider": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGenerator"
                },
                "selector": {
                    "description": "Selector allows to post-filter all generator.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetList": {
            "description": "ApplicationSetList contains a list of ApplicationSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetNestedGenerator": {
            "description": "ApplicationSetNestedGenerator represents a generator nested within a combination-type generator (MatrixGenerator or MergeGenerator).",
            "type": "object",
            "properties": {
                "clusterDecisionResource": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.DuckTypeGenerator"
                },
                "clusters": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterGenerator"
                },
                "git": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GitGenerator"
                },
                "list": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ListGenerator"
                },
                "matrix": {
                    "description": "Matrix should have the form of NestedMatrixGenerator",
                    "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                },
                "merge": {
                    "description": "Merge should have the form of NestedMergeGenerator",
                    "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                },
                "plugin": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PluginGenerator"
                },
                "pullRequest": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGenerator"
                },
                "scmProvider": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGenerator"
                },
                "selector": {
                    "description": "Selector allows to post-filter all generator.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetNestedGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetResourceIgnoreDifferences": {
            "description": "ApplicationSetResourceIgnoreDifferences configures how the ApplicationSet controller will ignore differences in live applications when applying changes from generated applications.",
            "type": "object",
            "properties": {
                "jqPathExpressions": {
                    "description": "JQPathExpressions is a list of JQ path expressions to fields to ignore differences for.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "jsonPointers": {
                    "description": "JSONPointers is a list of JSON pointers to fields to ignore differences for.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "name": {
                    "description": "Name is the name of the application to ignore differences for. If not specified, the rule applies to all applications.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetResourceIgnoreDifferences",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetRolloutStep": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationMatchExpression"
                    }
                },
                "maxUpdate": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetRolloutStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetRolloutStrategy": {
            "type": "object",
            "properties": {
                "steps": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetRolloutStep"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetRolloutStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetSpec": {
            "description": "ApplicationSetSpec represents a class of application set state.",
            "type": "object",
            "required": [
                "generators",
                "template"
            ],
            "properties": {
                "applyNestedSelectors": {
                    "description": "ApplyNestedSelectors enables selectors defined within the generators of two level-nested matrix or merge generators",
                    "type": "boolean"
                },
                "generators": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetGenerator"
                    }
                },
                "goTemplate": {
                    "type": "boolean"
                },
                "goTemplateOptions": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "ignoreApplicationDifferences": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetResourceIgnoreDifferences"
                    }
                },
                "preservedFields": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationPreservedFields"
                },
                "strategy": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetStrategy"
                },
                "syncPolicy": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetSyncPolicy"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetStatus": {
            "description": "ApplicationSetStatus defines the observed state of ApplicationSet",
            "type": "object",
            "properties": {
                "applicationStatus": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetApplicationStatus"
                    }
                },
                "conditions": {
                    "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetCondition"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetStrategy": {
            "description": "ApplicationSetStrategy configures how generated Applications are updated in sequence.",
            "type": "object",
            "properties": {
                "rollingSync": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetRolloutStrategy"
                },
                "type": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetSyncPolicy": {
            "description": "ApplicationSetSyncPolicy configures how generated Applications will relate to their ApplicationSet.",
            "type": "object",
            "properties": {
                "applicationsSync": {
                    "description": "ApplicationsSync represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, sync",
                    "type": "string"
                },
                "preserveResourcesOnDeletion": {
                    "description": "PreserveResourcesOnDeletion will preserve resources on deletion. If PreserveResourcesOnDeletion is set to true, these Applications will not be deleted.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetSyncPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetTemplate": {
            "description": "ApplicationSetTemplate represents argocd ApplicationSpec",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplateMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetTemplateMeta": {
            "description": "ApplicationSetTemplateMeta represents the Argo CD application fields that may be used for Applications generated from the ApplicationSet (based on metav1.ObjectMeta)",
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetTemplateMeta",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSetTerminalGenerator": {
            "description": "ApplicationSetTerminalGenerator represents a generator nested within a nested generator (for example, a list within a merge within a matrix). A generator at this level may not be a combination-type generator (MatrixGenerator or MergeGenerator). ApplicationSet enforces this nesting depth limit because CRDs do not support recursive types. https://github.com/kubernetes-sigs/controller-tools/issues/477",
            "type": "object",
            "properties": {
                "clusterDecisionResource": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.DuckTypeGenerator"
                },
                "clusters": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterGenerator"
                },
                "git": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GitGenerator"
                },
                "list": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ListGenerator"
                },
                "plugin": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PluginGenerator"
                },
                "pullRequest": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGenerator"
                },
                "scmProvider": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGenerator"
                },
                "selector": {
                    "description": "Selector allows to post-filter all generator.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSetTerminalGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSource": {
            "description": "ApplicationSource contains all required information about the source of an application",
            "type": "object",
            "required": [
                "repoURL"
            ],
            "properties": {
                "chart": {
                    "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
                    "type": "string"
                },
                "directory": {
                    "description": "Directory holds path/directory specific options",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourceDirectory"
                },
                "helm": {
                    "description": "Helm holds helm specific options",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourceHelm"
                },
                "kustomize": {
                    "description": "Kustomize holds kustomize specific options",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourceKustomize"
                },
                "path": {
                    "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
                    "type": "string"
                },
                "plugin": {
                    "description": "Plugin holds config management plugin specific options",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourcePlugin"
                },
                "ref": {
                    "description": "Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.",
                    "type": "string"
                },
                "repoURL": {
                    "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests",
                    "type": "string",
                    "default": ""
                },
                "targetRevision": {
                    "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourceDirectory": {
            "description": "ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet",
            "type": "object",
            "properties": {
                "exclude": {
                    "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation",
                    "type": "string"
                },
                "include": {
                    "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation",
                    "type": "string"
                },
                "jsonnet": {
                    "description": "Jsonnet holds options specific to Jsonnet",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourceJsonnet"
                },
                "recurse": {
                    "description": "Recurse specifies whether to scan a directory recursively for manifests",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourceDirectory",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourceHelm": {
            "description": "ApplicationSourceHelm holds helm specific options",
            "type": "object",
            "properties": {
                "fileParameters": {
                    "description": "FileParameters are file parameters to the helm template",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HelmFileParameter"
                    }
                },
                "ignoreMissingValueFiles": {
                    "description": "IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values",
                    "type": "boolean"
                },
                "parameters": {
                    "description": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HelmParameter"
                    }
                },
                "passCredentials": {
                    "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)",
                    "type": "boolean"
                },
                "releaseName": {
                    "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name",
                    "type": "string"
                },
                "skipCrds": {
                    "description": "SkipCrds skips custom resource definition installation step (Helm's --skip-crds)",
                    "type": "boolean"
                },
                "valueFiles": {
                    "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "values": {
                    "description": "Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.",
                    "type": "string",
                    "x-kubernetes-patch-strategy": "replace"
                },
                "valuesObject": {
                    "description": "ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "version": {
                    "description": "Version is the Helm version to use for templating (\"3\")",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourceHelm",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourceJsonnet": {
            "description": "ApplicationSourceJsonnet holds options specific to applications of type Jsonnet",
            "type": "object",
            "properties": {
                "extVars": {
                    "description": "ExtVars is a list of Jsonnet External Variables",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.JsonnetVar"
                    }
                },
                "libs": {
                    "description": "Additional library search dirs",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tlas": {
                    "description": "TLAS is a list of Jsonnet Top-level Arguments",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.JsonnetVar"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourceJsonnet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourceKustomize": {
            "description": "ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize",
            "type": "object",
            "properties": {
                "commonAnnotations": {
                    "description": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "commonAnnotationsEnvsubst": {
                    "description": "CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values",
                    "type": "boolean"
                },
                "commonLabels": {
                    "description": "CommonLabels is a list of additional labels to add to rendered manifests",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "forceCommonAnnotations": {
                    "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps",
                    "type": "boolean"
                },
                "forceCommonLabels": {
                    "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps",
                    "type": "boolean"
                },
                "images": {
                    "description": "Images is a list of Kustomize image override specifications",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "namePrefix": {
                    "description": "NamePrefix is a prefix appended to resources for Kustomize apps",
                    "type": "string"
                },
                "nameSuffix": {
                    "description": "NameSuffix is a suffix appended to resources for Kustomize apps",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace sets the namespace that Kustomize adds to all resources",
                    "type": "string"
                },
                "patches": {
                    "description": "Patches is a list of Kustomize patches",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.KustomizePatch"
                    }
                },
                "replicas": {
                    "description": "Replicas is a list of Kustomize Replicas override specifications",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.KustomizeReplica"
                    }
                },
                "version": {
                    "description": "Version controls which version of Kustomize to use for rendering manifests",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourceKustomize",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourcePlugin": {
            "description": "ApplicationSourcePlugin holds options specific to config management plugins",
            "type": "object",
            "properties": {
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.EnvEntry"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSourcePluginParameter"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourcePlugin",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSourcePluginParameter": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name identifying a parameter.",
                    "type": "string"
                },
                "string": {
                    "description": "String_ is the value of a string type parameter.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSourcePluginParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSpec": {
            "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.",
            "type": "object",
            "required": [
                "destination",
                "project"
            ],
            "properties": {
                "destination": {
                    "description": "Destination is a reference to the target Kubernetes server and namespace",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationDestination"
                },
                "ignoreDifferences": {
                    "description": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceIgnoreDifferences"
                    }
                },
                "info": {
                    "description": "Info contains a list of information (URLs, email addresses, and plain text) that relates to the application",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Info"
                    }
                },
                "project": {
                    "description": "Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.",
                    "type": "string",
                    "default": ""
                },
                "revisionHistoryLimit": {
                    "description": "RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.",
                    "type": "integer",
                    "format": "int64"
                },
                "source": {
                    "description": "Source is a reference to the location of the application's manifests or chart",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                },
                "sources": {
                    "description": "Sources is a reference to the location of the application's manifests or chart",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                    }
                },
                "syncPolicy": {
                    "description": "SyncPolicy controls when and how a sync will be performed",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncPolicy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationStatus": {
            "description": "ApplicationStatus contains status information for the application",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions is a list of currently observed application conditions",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationCondition"
                    }
                },
                "controllerNamespace": {
                    "description": "ControllerNamespace indicates the namespace in which the application controller is located",
                    "type": "string"
                },
                "health": {
                    "description": "Health contains information about the application's current health status",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HealthStatus"
                },
                "history": {
                    "description": "History contains information about the application's sync history",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.RevisionHistory"
                    }
                },
                "observedAt": {
                    "description": "ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "operationState": {
                    "description": "OperationState contains information about any ongoing operations, such as a sync",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OperationState"
                },
                "reconciledAt": {
                    "description": "ReconciledAt indicates when the application state was reconciled using the latest git version",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "resourceHealthSource": {
                    "description": "ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree",
                    "type": "string"
                },
                "resources": {
                    "description": "Resources is a list of Kubernetes resources managed by this application",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceStatus"
                    }
                },
                "sourceType": {
                    "description": "SourceType specifies the type of this application",
                    "type": "string"
                },
                "sourceTypes": {
                    "description": "SourceTypes specifies the type of the sources included in the application",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "summary": {
                    "description": "Summary contains a list of URLs and container images used by this application",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSummary"
                },
                "sync": {
                    "description": "Sync contains information about the application's current sync status",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationSummary": {
            "description": "ApplicationSummary contains information about URLs and container images used by an application",
            "type": "object",
            "properties": {
                "externalURLs": {
                    "description": "ExternalURLs holds all external URLs of application child resources.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "images": {
                    "description": "Images holds all images of application child resources.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationSummary",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationTree": {
            "description": "ApplicationTree holds nodes which belongs to the application",
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "Hosts holds list of Kubernetes nodes that run application related pods",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HostInfo"
                    }
                },
                "nodes": {
                    "description": "Nodes contains list of nodes which either directly managed by the application and children of directly managed nodes.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceNode"
                    }
                },
                "orphanedNodes": {
                    "description": "OrphanedNodes contains if or orphaned nodes: nodes which are not managed by the app but in the same namespace. List is populated only if orphaned resources enabled in app project.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceNode"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationTree",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ApplicationWatchEvent": {
            "description": "ApplicationWatchEvent contains information about application change.",
            "type": "object",
            "required": [
                "type",
                "application"
            ],
            "properties": {
                "application": {
                    "description": "Application is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Application"
                },
                "type": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApplicationWatchEvent",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Backoff": {
            "description": "Backoff is the backoff strategy to use on subsequent retries for failing syncs",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                    "type": "string"
                },
                "factor": {
                    "description": "Factor is a factor to multiply the base duration after each failed retry",
                    "type": "integer",
                    "format": "int64"
                },
                "maxDuration": {
                    "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Backoff",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.BasicAuthBitbucketServer": {
            "description": "BasicAuthBitbucketServer defines the username/(password or personal access token) for Basic auth.",
            "type": "object",
            "required": [
                "username",
                "passwordRef"
            ],
            "properties": {
                "passwordRef": {
                    "description": "Password (or personal access token) reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                },
                "username": {
                    "description": "Username for Basic auth",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BasicAuthBitbucketServer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.BearerTokenBitbucketCloud": {
            "description": "BearerTokenBitbucketCloud defines the Bearer token for BitBucket AppToken auth.",
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "properties": {
                "tokenRef": {
                    "description": "Password (or personal access token) reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BearerTokenBitbucketCloud",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ChartDetails": {
            "description": "ChartDetails contains helm chart metadata for a specific version",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "home": {
                    "description": "The URL of this projects home page, e.g. \"http://example.com\"",
                    "type": "string"
                },
                "maintainers": {
                    "description": "List of maintainer details, name and email, e.g. [\"John Doe \u003cjohn_doe@my-company.com\u003e\"]",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ChartDetails",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Cluster": {
            "description": "Cluster is the definition of a cluster resource",
            "type": "object",
            "required": [
                "server",
                "name",
                "config"
            ],
            "properties": {
                "annotations": {
                    "description": "Annotations for cluster secret metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clusterResources": {
                    "description": "Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.",
                    "type": "boolean"
                },
                "config": {
                    "description": "Config holds cluster information for connecting to a cluster",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterConfig"
                },
                "connectionState": {
                    "description": "DEPRECATED: use Info.ConnectionState field instead. ConnectionState contains information about cluster connection state",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ConnectionState"
                },
                "info": {
                    "description": "Info holds information about cluster cache and state",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterInfo"
                },
                "labels": {
                    "description": "Labels for cluster secret metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "name": {
                    "description": "Name of the cluster. If omitted, will use the server address",
                    "type": "string",
                    "default": ""
                },
                "namespaces": {
                    "description": "Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "project": {
                    "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity",
                    "type": "string"
                },
                "refreshRequestedAt": {
                    "description": "RefreshRequestedAt holds time when cluster cache refresh has been requested",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "server": {
                    "description": "Server is the API server URL of the Kubernetes cluster",
                    "type": "string",
                    "default": ""
                },
                "serverVersion": {
                    "description": "DEPRECATED: use Info.ServerVersion field instead. The server version",
                    "type": "string"
                },
                "shard": {
                    "description": "Shard contains optional shard number. Calculated on the fly by the application controller if not specified.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Cluster",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ClusterCacheInfo": {
            "description": "ClusterCacheInfo contains information about the cluster cache",
            "type": "object",
            "properties": {
                "apisCount": {
                    "description": "APIsCount holds number of observed Kubernetes API count",
                    "type": "integer",
                    "format": "int64"
                },
                "lastCacheSyncTime": {
                    "description": "LastCacheSyncTime holds time of most recent cache synchronization",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "resourcesCount": {
                    "description": "ResourcesCount holds number of observed Kubernetes resources",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterCacheInfo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ClusterConfig": {
            "description": "ClusterConfig is the configuration attributes. This structure is subset of the go-client rest.Config with annotations added for marshalling.",
            "type": "object",
            "required": [
                "tlsClientConfig"
            ],
            "properties": {
                "awsAuthConfig": {
                    "description": "AWSAuthConfig contains IAM authentication configuration",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.AWSAuthConfig"
                },
                "bearerToken": {
                    "description": "Server requires Bearer authentication. This client will not attempt to use refresh tokens for an OAuth2 flow.",
                    "type": "string"
                },
                "execProviderConfig": {
                    "description": "ExecProviderConfig contains configuration for an exec provider",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ExecProviderConfig"
                },
                "password": {
                    "type": "string"
                },
                "tlsClientConfig": {
                    "description": "TLSClientConfig contains settings to enable transport layer security",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.TLSClientConfig"
                },
                "username": {
                    "description": "Server requires Basic authentication",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ClusterGenerator": {
            "description": "ClusterGenerator defines a generator to match against clusters registered with ArgoCD.",
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector defines a label selector to match against all clusters registered with ArgoCD. Clusters today are stored as Kubernetes Secrets, thus the Secret labels will be used for matching the selector.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                },
                "values": {
                    "description": "Values contains key/value pairs which are passed directly as parameters to the template",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ClusterInfo": {
            "description": "ClusterInfo contains information about the cluster",
            "type": "object",
            "required": [
                "applicationsCount"
            ],
            "properties": {
                "apiVersions": {
                    "description": "APIVersions contains list of API versions supported by the cluster",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "applicationsCount": {
                    "description": "ApplicationsCount is the number of applications managed by Argo CD on the cluster",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "cacheInfo": {
                    "description": "CacheInfo contains information about the cluster cache",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ClusterCacheInfo"
                },
                "connectionState": {
                    "description": "ConnectionState contains information about the connection to the cluster",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ConnectionState"
                },
                "serverVersion": {
                    "description": "ServerVersion contains information about the Kubernetes version of the cluster",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterInfo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ClusterList": {
            "description": "ClusterList is a collection of Clusters.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Cluster"
                    }
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Command": {
            "description": "Command holds binary path and arguments list",
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Command",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ComparedTo": {
            "description": "ComparedTo contains application source and target which was used for resources comparison",
            "type": "object",
            "required": [
                "destination"
            ],
            "properties": {
                "destination": {
                    "description": "Destination is a reference to the application's destination used for comparison",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationDestination"
                },
                "ignoreDifferences": {
                    "description": "IgnoreDifferences is a reference to the application's ignored differences used for comparison",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceIgnoreDifferences"
                    }
                },
                "source": {
                    "description": "Source is a reference to the application's source used for comparison",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                },
                "sources": {
                    "description": "Sources is a reference to the application's multiple sources used for comparison",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ComparedTo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ComponentParameter": {
            "description": "ComponentParameter contains information about component parameter value",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "component": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ComponentParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ConfigManagementPlugin": {
            "description": "ConfigManagementPlugin contains config management plugin configuration",
            "type": "object",
            "required": [
                "name",
                "generate"
            ],
            "properties": {
                "generate": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Command"
                },
                "init": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Command"
                },
                "lockRepo": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConfigManagementPlugin",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ConnectionState": {
            "description": "ConnectionState contains information about remote resource connection state, currently used for clusters and repositories",
            "type": "object",
            "required": [
                "status",
                "message",
                "attemptedAt"
            ],
            "properties": {
                "attemptedAt": {
                    "description": "ModifiedAt contains the timestamp when this connection status has been determined",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains human readable information about the connection status",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "Status contains the current status indicator for the connection",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConnectionState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.DuckTypeGenerator": {
            "description": "DuckType defines a generator to match against clusters registered with ArgoCD.",
            "type": "object",
            "required": [
                "configMapRef"
            ],
            "properties": {
                "configMapRef": {
                    "description": "ConfigMapRef is a ConfigMap with the duck type definitions needed to retrieve the data\n             this includes apiVersion(group/version), kind, matchKey and validation settings\nName is the resource name of the kind, group and version, defined in the ConfigMapRef RequeueAfterSeconds is how long before the duckType will be rechecked for a change",
                    "type": "string",
                    "default": ""
                },
                "labelSelector": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "name": {
                    "type": "string"
                },
                "requeueAfterSeconds": {
                    "type": "integer",
                    "format": "int64"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                },
                "values": {
                    "description": "Values contains key/value pairs which are passed directly as parameters to the template",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DuckTypeGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.EnvEntry": {
            "description": "EnvEntry represents an entry in the application's environment",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the variable, usually expressed in uppercase",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the value of the variable",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EnvEntry",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ExecProviderConfig": {
            "description": "ExecProviderConfig is config used to call an external command to perform cluster authentication See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Preferred input version of the ExecInfo",
                    "type": "string"
                },
                "args": {
                    "description": "Arguments to pass to the command when executing it",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Command to execute",
                    "type": "string"
                },
                "env": {
                    "description": "Env defines additional environment variables to expose to the process",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "installHint": {
                    "description": "This text is shown to the user when the executable doesn't seem to be present",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExecProviderConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.GitDirectoryGeneratorItem": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "exclude": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitDirectoryGeneratorItem",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.GitFileGeneratorItem": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitFileGeneratorItem",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.GitGenerator": {
            "type": "object",
            "required": [
                "repoURL",
                "revision"
            ],
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GitDirectoryGeneratorItem"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GitFileGeneratorItem"
                    }
                },
                "pathParamPrefix": {
                    "type": "string"
                },
                "repoURL": {
                    "type": "string",
                    "default": ""
                },
                "requeueAfterSeconds": {
                    "type": "integer",
                    "format": "int64"
                },
                "revision": {
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                },
                "values": {
                    "description": "Values contains key/value pairs which are passed directly as parameters to the template",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.GnuPGPublicKey": {
            "description": "GnuPGPublicKey is a representation of a GnuPG public key",
            "type": "object",
            "required": [
                "keyID"
            ],
            "properties": {
                "fingerprint": {
                    "description": "Fingerprint is the fingerprint of the key",
                    "type": "string"
                },
                "keyData": {
                    "description": "KeyData holds the raw key data, in base64 encoded format",
                    "type": "string"
                },
                "keyID": {
                    "description": "KeyID specifies the key ID, in hexadecimal string format",
                    "type": "string",
                    "default": ""
                },
                "owner": {
                    "description": "Owner holds the owner identification, e.g. a name and e-mail address",
                    "type": "string"
                },
                "subType": {
                    "description": "SubType holds the key's sub type (e.g. rsa4096)",
                    "type": "string"
                },
                "trust": {
                    "description": "Trust holds the level of trust assigned to this key",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GnuPGPublicKey",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.GnuPGPublicKeyList": {
            "description": "GnuPGPublicKeyList is a collection of GnuPGPublicKey objects",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.GnuPGPublicKey"
                    }
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GnuPGPublicKeyList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HealthStatus": {
            "description": "HealthStatus contains information about the currently observed health state of an application or resource",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is a human-readable informational message describing the health status",
                    "type": "string"
                },
                "status": {
                    "description": "Status holds the status code of the application or resource",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HealthStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HelmFileParameter": {
            "description": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the Helm parameter",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the path to the file containing the values for the Helm parameter",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HelmFileParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HelmOptions": {
            "description": "HelmOptions holds helm options",
            "type": "object",
            "required": [
                "ValuesFileSchemes"
            ],
            "properties": {
                "ValuesFileSchemes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HelmOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HelmParameter": {
            "description": "HelmParameter is a parameter that's passed to helm template during manifest generation",
            "type": "object",
            "properties": {
                "forceString": {
                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the name of the Helm parameter",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value for the Helm parameter",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HelmParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HostInfo": {
            "description": "HostInfo holds host name and resources metrics",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "resourcesInfo": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HostResourceInfo"
                    }
                },
                "systemInfo": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HostInfo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.HostResourceInfo": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer",
                    "format": "int64"
                },
                "requestedByApp": {
                    "type": "integer",
                    "format": "int64"
                },
                "requestedByNeighbors": {
                    "type": "integer",
                    "format": "int64"
                },
                "resourceName": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HostResourceInfo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Info": {
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Info",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.InfoItem": {
            "description": "InfoItem contains arbitrary, human readable information about an application",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is a human readable title for this piece of information.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is human readable content.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "InfoItem",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.JWTToken": {
            "description": "JWTToken holds the issuedAt and expiresAt values of a token",
            "type": "object",
            "required": [
                "iat"
            ],
            "properties": {
                "exp": {
                    "type": "integer",
                    "format": "int64"
                },
                "iat": {
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "id": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JWTToken",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.JWTTokens": {
            "description": "JWTTokens represents a list of JWT tokens",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.JWTToken"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JWTTokens",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.JsonnetVar": {
            "description": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "code": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JsonnetVar",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KnownTypeField": {
            "description": "KnownTypeField contains mapping between CRD field and known Kubernetes type. This is mainly used for unit conversion in unknown resources (e.g. 0.1 == 100mi)",
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KnownTypeField",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizeGvk": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizeGvk",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizeOptions": {
            "description": "KustomizeOptions are options for kustomize to use when building manifests",
            "type": "object",
            "required": [
                "BuildOptions",
                "BinaryPath"
            ],
            "properties": {
                "BinaryPath": {
                    "description": "BinaryPath holds optional path to kustomize binary",
                    "type": "string",
                    "default": ""
                },
                "BuildOptions": {
                    "description": "BuildOptions is a string of build parameters to use when calling `kustomize build`",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizeOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizePatch": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "patch": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.KustomizeSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizePatch",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizeReplica": {
            "type": "object",
            "required": [
                "name",
                "count"
            ],
            "properties": {
                "count": {
                    "description": "Number of replicas",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "name": {
                    "description": "Name of Deployment or StatefulSet",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizeReplica",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizeResId": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizeResId",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.KustomizeSelector": {
            "type": "object",
            "properties": {
                "annotationSelector": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "labelSelector": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KustomizeSelector",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ListGenerator": {
            "description": "ListGenerator include items info",
            "type": "object",
            "required": [
                "elements"
            ],
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                    }
                },
                "elementsYaml": {
                    "type": "string"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ListGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ManagedNamespaceMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ManagedNamespaceMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.MatrixGenerator": {
            "description": "MatrixGenerator generates the cartesian product of two sets of parameters. The parameters are defined by two nested generators.",
            "type": "object",
            "required": [
                "generators"
            ],
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetNestedGenerator"
                    }
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MatrixGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.MergeGenerator": {
            "description": "MergeGenerator merges the output of two or more generators. Where the values for all specified merge keys are equal between two sets of generated parameters, the parameter sets will be merged with the parameters from the latter generator taking precedence. Parameter sets with merge keys not present in the base generator's params will be ignored. For example, if the first generator produced [{a: '1', b: '2'}, {c: '1', d: '1'}] and the second generator produced [{'a': 'override'}], the united parameters for merge keys = ['a'] would be [{a: 'override', b: '1'}, {c: '1', d: '1'}].\n\nMergeGenerator supports template overriding. If a MergeGenerator is one of multiple top-level generators, its template will be merged with the top-level generator before the parameters are applied.",
            "type": "object",
            "required": [
                "generators",
                "mergeKeys"
            ],
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetNestedGenerator"
                    }
                },
                "mergeKeys": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MergeGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.NestedMatrixGenerator": {
            "description": "NestedMatrixGenerator is a MatrixGenerator nested under another combination-type generator (MatrixGenerator or MergeGenerator). NestedMatrixGenerator does not have an override template, because template overriding has no meaning within the constituent generators of combination-type generators.\n\nNOTE: Nested matrix generator is not included directly in the CRD struct, instead it is included as a generic 'apiextensionsv1.JSON' object, and then marshalled into a NestedMatrixGenerator when processed.",
            "type": "object",
            "required": [
                "generators"
            ],
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTerminalGenerator"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NestedMatrixGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.NestedMergeGenerator": {
            "description": "NestedMergeGenerator is a MergeGenerator nested under another combination-type generator (MatrixGenerator or MergeGenerator). NestedMergeGenerator does not have an override template, because template overriding has no meaning within the constituent generators of combination-type generators.\n\nNOTE: Nested merge generator is not included directly in the CRD struct, instead it is included as a generic 'apiextensionsv1.JSON' object, and then marshalled into a NestedMergeGenerator when processed.",
            "type": "object",
            "required": [
                "generators",
                "mergeKeys"
            ],
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTerminalGenerator"
                    }
                },
                "mergeKeys": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NestedMergeGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Operation": {
            "description": "Operation contains information about a requested or running operation",
            "type": "object",
            "properties": {
                "info": {
                    "description": "Info is a list of informational items for this operation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Info"
                    }
                },
                "initiatedBy": {
                    "description": "InitiatedBy contains information about who initiated the operations",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OperationInitiator"
                },
                "retry": {
                    "description": "Retry controls the strategy to apply if a sync fails",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.RetryStrategy"
                },
                "sync": {
                    "description": "Sync contains parameters for the operation",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncOperation"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Operation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OperationInitiator": {
            "description": "OperationInitiator contains information about the initiator of an operation",
            "type": "object",
            "properties": {
                "automated": {
                    "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                    "type": "boolean"
                },
                "username": {
                    "description": "Username contains the name of a user who started operation",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OperationInitiator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OperationState": {
            "description": "OperationState contains information about state of a running operation",
            "type": "object",
            "required": [
                "operation",
                "phase",
                "startedAt"
            ],
            "properties": {
                "finishedAt": {
                    "description": "FinishedAt contains time of operation completion",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message holds any pertinent messages when attempting to perform operation (typically errors).",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the original requested operation",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Operation"
                },
                "phase": {
                    "description": "Phase is the current phase of the operation",
                    "type": "string",
                    "default": ""
                },
                "retryCount": {
                    "description": "RetryCount contains time of operation retries",
                    "type": "integer",
                    "format": "int64"
                },
                "startedAt": {
                    "description": "StartedAt contains time of operation start",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "syncResult": {
                    "description": "SyncResult is the result of a Sync operation",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncOperationResult"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OperationState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OptionalArray": {
            "type": "object",
            "properties": {
                "array": {
                    "description": "Array is the value of an array type parameter.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OptionalArray",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OptionalMap": {
            "type": "object",
            "properties": {
                "map": {
                    "description": "Map is the value of a map type parameter.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OptionalMap",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OrphanedResourceKey": {
            "description": "OrphanedResourceKey is a reference to a resource to be ignored from",
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OrphanedResourceKey",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OrphanedResourcesMonitorSettings": {
            "description": "OrphanedResourcesMonitorSettings holds settings of orphaned resources monitoring",
            "type": "object",
            "properties": {
                "ignore": {
                    "description": "Ignore contains a list of resources that are to be excluded from orphaned resources monitoring",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OrphanedResourceKey"
                    }
                },
                "warn": {
                    "description": "Warn indicates if warning condition should be created for apps which have orphaned resources",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OrphanedResourcesMonitorSettings",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.OverrideIgnoreDiff": {
            "description": "OverrideIgnoreDiff contains configurations about how fields should be ignored during diffs between the desired state and live state",
            "type": "object",
            "required": [
                "jsonPointers",
                "jqPathExpressions",
                "managedFieldsManagers"
            ],
            "properties": {
                "jqPathExpressions": {
                    "description": "JQPathExpressions is a JQ path list that will be evaludated during the diff process",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "jsonPointers": {
                    "description": "JSONPointers is a JSON path list following the format defined in RFC4627 (https://datatracker.ietf.org/doc/html/rfc6902#section-3)",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "managedFieldsManagers": {
                    "description": "ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OverrideIgnoreDiff",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PluginConfigMapRef": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name of the ConfigMap",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PluginConfigMapRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PluginGenerator": {
            "description": "PluginGenerator defines connection info specific to Plugin.",
            "type": "object",
            "required": [
                "configMapRef"
            ],
            "properties": {
                "configMapRef": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PluginConfigMapRef"
                },
                "input": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PluginInput"
                },
                "requeueAfterSeconds": {
                    "description": "RequeueAfterSeconds determines how long the ApplicationSet controller will wait before reconciling the ApplicationSet again.",
                    "type": "integer",
                    "format": "int64"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                },
                "values": {
                    "description": "Values contains key/value pairs which are passed directly as parameters to the template. These values will not be sent as parameters to the plugin.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PluginGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PluginInput": {
            "type": "object",
            "properties": {
                "parameters": {
                    "description": "Parameters contains the information to pass to the plugin. It is a map. The keys must be strings, and the values can be any type.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PluginInput",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ProjectRole": {
            "description": "ProjectRole represents a role that has access to a project",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description is a description of the role",
                    "type": "string"
                },
                "groups": {
                    "description": "Groups are a list of OIDC group claims bound to this role",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "jwtTokens": {
                    "description": "JWTTokens are a list of generated JWT tokens bound to this role",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.JWTToken"
                    }
                },
                "name": {
                    "description": "Name is a name for this role",
                    "type": "string",
                    "default": ""
                },
                "policies": {
                    "description": "Policies Stores a list of casbin formatted strings that define access policies for the role in the project",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ProjectRole",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGenerator": {
            "description": "PullRequestGenerator defines a generator that scrapes a PullRequest API to find candidate pull requests.",
            "type": "object",
            "properties": {
                "azuredevops": {
                    "description": "Additional provider to use and config for it.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorAzureDevOps"
                },
                "bitbucket": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorBitbucket"
                },
                "bitbucketServer": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorBitbucketServer"
                },
                "filters": {
                    "description": "Filters for which pull requests should be considered.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorFilter"
                    }
                },
                "gitea": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorGitea"
                },
                "github": {
                    "description": "Which provider to use and config for it.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorGithub"
                },
                "gitlab": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.PullRequestGeneratorGitLab"
                },
                "requeueAfterSeconds": {
                    "description": "Standard parameters.",
                    "type": "integer",
                    "format": "int64"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorAzureDevOps": {
            "description": "PullRequestGeneratorAzureDevOps defines connection info specific to AzureDevOps.",
            "type": "object",
            "required": [
                "organization",
                "project",
                "repo"
            ],
            "properties": {
                "api": {
                    "description": "The Azure DevOps API URL to talk to. If blank, use https://dev.azure.com/.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels is used to filter the PRs that you want to target",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "organization": {
                    "description": "Azure DevOps org to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "project": {
                    "description": "Azure DevOps project name to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "repo": {
                    "description": "Azure DevOps repo name to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorAzureDevOps",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorBitbucket": {
            "description": "PullRequestGeneratorBitbucket defines connection info specific to Bitbucket.",
            "type": "object",
            "required": [
                "owner",
                "repo"
            ],
            "properties": {
                "api": {
                    "description": "The Bitbucket REST API URL to talk to. If blank, uses https://api.bitbucket.org/2.0.",
                    "type": "string"
                },
                "basicAuth": {
                    "description": "Credentials for Basic auth",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.BasicAuthBitbucketServer"
                },
                "bearerToken": {
                    "description": "Credentials for AppToken (Bearer auth)",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.BearerTokenBitbucketCloud"
                },
                "owner": {
                    "description": "Workspace to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "repo": {
                    "description": "Repo name to scan. Required.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorBitbucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorBitbucketServer": {
            "description": "PullRequestGeneratorBitbucketServer defines connection info specific to BitbucketServer.",
            "type": "object",
            "required": [
                "project",
                "repo",
                "api"
            ],
            "properties": {
                "api": {
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest Required.",
                    "type": "string",
                    "default": ""
                },
                "basicAuth": {
                    "description": "Credentials for Basic auth",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.BasicAuthBitbucketServer"
                },
                "project": {
                    "description": "Project to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "repo": {
                    "description": "Repo name to scan. Required.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorBitbucketServer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorFilter": {
            "description": "PullRequestGeneratorFilter is a single pull request filter. If multiple filter types are set on a single struct, they will be AND'd together. All filters must pass for a pull request to be included.",
            "type": "object",
            "properties": {
                "branchMatch": {
                    "type": "string"
                },
                "targetBranchMatch": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorGitLab": {
            "description": "PullRequestGeneratorGitLab defines connection info specific to GitLab.",
            "type": "object",
            "required": [
                "project"
            ],
            "properties": {
                "api": {
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.",
                    "type": "string"
                },
                "insecure": {
                    "description": "Skips validating the SCM provider's TLS certificate - useful for self-signed certificates.; default: false",
                    "type": "boolean"
                },
                "labels": {
                    "description": "Labels is used to filter the MRs that you want to target",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "project": {
                    "description": "GitLab project to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "pullRequestState": {
                    "description": "PullRequestState is an additional MRs filter to get only those with a certain state. Default: \"\" (all states)",
                    "type": "string"
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorGitLab",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorGitea": {
            "description": "PullRequestGeneratorGitea defines connection info specific to Gitea.",
            "type": "object",
            "required": [
                "owner",
                "repo",
                "api"
            ],
            "properties": {
                "api": {
                    "description": "The Gitea API URL to talk to. Required",
                    "type": "string",
                    "default": ""
                },
                "insecure": {
                    "description": "Allow insecure tls, for self-signed certificates; default: false.",
                    "type": "boolean"
                },
                "owner": {
                    "description": "Gitea org or user to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "repo": {
                    "description": "Gitea repo name to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorGitea",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.PullRequestGeneratorGithub": {
            "description": "PullRequestGenerator defines connection info specific to GitHub.",
            "type": "object",
            "required": [
                "owner",
                "repo"
            ],
            "properties": {
                "api": {
                    "description": "The GitHub API URL to talk to. If blank, use https://api.github.com/.",
                    "type": "string"
                },
                "appSecretName": {
                    "description": "AppSecretName is a reference to a GitHub App repo-creds secret with permission to access pull requests.",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels is used to filter the PRs that you want to target",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "GitHub org or user to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "repo": {
                    "description": "GitHub repo name to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PullRequestGeneratorGithub",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RefTarget": {
            "type": "object",
            "required": [
                "Repo",
                "TargetRevision",
                "Chart"
            ],
            "properties": {
                "Chart": {
                    "type": "string",
                    "default": ""
                },
                "Repo": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Repository"
                },
                "TargetRevision": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RefTarget",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RepoCreds": {
            "description": "RepoCreds holds the definition for repository credentials",
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "enableOCI": {
                    "description": "EnableOCI specifies whether helm-oci support should be enabled for this repo",
                    "type": "boolean"
                },
                "forceHttpBasicAuth": {
                    "description": "ForceHttpBasicAuth specifies whether Argo CD should attempt to force basic auth for HTTP connections",
                    "type": "boolean"
                },
                "gcpServiceAccountKey": {
                    "description": "GCPServiceAccountKey specifies the service account key in JSON format to be used for getting credentials to Google Cloud Source repos",
                    "type": "string"
                },
                "githubAppEnterpriseBaseUrl": {
                    "description": "GithubAppEnterpriseBaseURL specifies the GitHub API URL for GitHub app authentication. If empty will default to https://api.github.com",
                    "type": "string"
                },
                "githubAppID": {
                    "description": "GithubAppId specifies the Github App ID of the app used to access the repo for GitHub app authentication",
                    "type": "integer",
                    "format": "int64"
                },
                "githubAppInstallationID": {
                    "description": "GithubAppInstallationId specifies the ID of the installed GitHub App for GitHub app authentication",
                    "type": "integer",
                    "format": "int64"
                },
                "githubAppPrivateKey": {
                    "description": "GithubAppPrivateKey specifies the private key PEM data for authentication via GitHub app",
                    "type": "string"
                },
                "password": {
                    "description": "Password for authenticating at the repo server",
                    "type": "string"
                },
                "proxy": {
                    "description": "Proxy specifies the HTTP/HTTPS proxy used to access repos at the repo server",
                    "type": "string"
                },
                "sshPrivateKey": {
                    "description": "SSHPrivateKey contains the private key data for authenticating at the repo server using SSH (only Git repos)",
                    "type": "string"
                },
                "tlsClientCertData": {
                    "description": "TLSClientCertData specifies the TLS client cert data for authenticating at the repo server",
                    "type": "string"
                },
                "tlsClientCertKey": {
                    "description": "TLSClientCertKey specifies the TLS client cert key for authenticating at the repo server",
                    "type": "string"
                },
                "type": {
                    "description": "Type specifies the type of the repoCreds. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.",
                    "type": "string"
                },
                "url": {
                    "description": "URL is the URL that this credentials matches to",
                    "type": "string",
                    "default": ""
                },
                "username": {
                    "description": "Username for authenticating at the repo server",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RepoCreds",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RepoCredsList": {
            "description": "RepositoryList is a collection of Repositories.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.RepoCreds"
                    }
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RepoCredsList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.Repository": {
            "description": "Repository is a repository holding application configurations",
            "type": "object",
            "required": [
                "repo"
            ],
            "properties": {
                "connectionState": {
                    "description": "ConnectionState contains information about the current state of connection to the repository server",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ConnectionState"
                },
                "enableLfs": {
                    "description": "EnableLFS specifies whether git-lfs support should be enabled for this repo. Only valid for Git repositories.",
                    "type": "boolean"
                },
                "enableOCI": {
                    "description": "EnableOCI specifies whether helm-oci support should be enabled for this repo",
                    "type": "boolean"
                },
                "forceHttpBasicAuth": {
                    "description": "ForceHttpBasicAuth specifies whether Argo CD should attempt to force basic auth for HTTP connections",
                    "type": "boolean"
                },
                "gcpServiceAccountKey": {
                    "description": "GCPServiceAccountKey specifies the service account key in JSON format to be used for getting credentials to Google Cloud Source repos",
                    "type": "string"
                },
                "githubAppEnterpriseBaseUrl": {
                    "description": "GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise installation. If empty will default to https://api.github.com",
                    "type": "string"
                },
                "githubAppID": {
                    "description": "GithubAppId specifies the ID of the GitHub app used to access the repo",
                    "type": "integer",
                    "format": "int64"
                },
                "githubAppInstallationID": {
                    "description": "GithubAppInstallationId specifies the installation ID of the GitHub App used to access the repo",
                    "type": "integer",
                    "format": "int64"
                },
                "githubAppPrivateKey": {
                    "description": "Github App Private Key PEM data",
                    "type": "string"
                },
                "inheritedCreds": {
                    "description": "Whether credentials were inherited from a credential set",
                    "type": "boolean"
                },
                "insecure": {
                    "description": "Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys",
                    "type": "boolean"
                },
                "insecureIgnoreHostKey": {
                    "description": "InsecureIgnoreHostKey should not be used anymore, Insecure is favoured Used only for Git repos",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name specifies a name to be used for this repo. Only used with Helm repos",
                    "type": "string"
                },
                "password": {
                    "description": "Password contains the password or PAT used for authenticating at the remote repository",
                    "type": "string"
                },
                "project": {
                    "description": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity",
                    "type": "string"
                },
                "proxy": {
                    "description": "Proxy specifies the HTTP/HTTPS proxy used to access the repo",
                    "type": "string"
                },
                "repo": {
                    "description": "Repo contains the URL to the remote repository",
                    "type": "string",
                    "default": ""
                },
                "sshPrivateKey": {
                    "description": "SSHPrivateKey contains the PEM data for authenticating at the repo server. Only used with Git repos.",
                    "type": "string"
                },
                "tlsClientCertData": {
                    "description": "TLSClientCertData contains a certificate in PEM format for authenticating at the repo server",
                    "type": "string"
                },
                "tlsClientCertKey": {
                    "description": "TLSClientCertKey contains a private key in PEM format for authenticating at the repo server",
                    "type": "string"
                },
                "type": {
                    "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.",
                    "type": "string"
                },
                "username": {
                    "description": "Username contains the user name used for authenticating at the remote repository",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Repository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RepositoryCertificate": {
            "description": "A RepositoryCertificate is either SSH known hosts entry or TLS certificate",
            "type": "object",
            "required": [
                "serverName",
                "certType",
                "certSubType",
                "certData",
                "certInfo"
            ],
            "properties": {
                "certData": {
                    "description": "CertData contains the actual certificate data, dependent on the certificate type",
                    "type": "string",
                    "format": "byte"
                },
                "certInfo": {
                    "description": "CertInfo will hold additional certificate info, depdendent on the certificate type (e.g. SSH fingerprint, X509 CommonName)",
                    "type": "string",
                    "default": ""
                },
                "certSubType": {
                    "description": "CertSubType specifies the sub type of the cert, i.e. \"ssh-rsa\"",
                    "type": "string",
                    "default": ""
                },
                "certType": {
                    "description": "CertType specifies the type of the certificate - currently one of \"https\" or \"ssh\"",
                    "type": "string",
                    "default": ""
                },
                "serverName": {
                    "description": "ServerName specifies the DNS name of the server this certificate is intended for",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RepositoryCertificate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RepositoryCertificateList": {
            "description": "RepositoryCertificateList is a collection of RepositoryCertificates",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "description": "List of certificates to be processed",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.RepositoryCertificate"
                    }
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RepositoryCertificateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RepositoryList": {
            "description": "RepositoryList is a collection of Repositories.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Repository"
                    }
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RepositoryList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceAction": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string"
                },
                "iconClass": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceActionParam"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceAction",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceActionDefinition": {
            "type": "object",
            "required": [
                "name",
                "action.lua"
            ],
            "properties": {
                "action.lua": {
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceActionDefinition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceActionParam": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceActionParam",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceActions": {
            "type": "object",
            "properties": {
                "definitions": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceActionDefinition"
                    }
                },
                "discovery.lua": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceActions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceDiff": {
            "description": "ResourceDiff holds the diff of a live and target resource object",
            "type": "object",
            "properties": {
                "diff": {
                    "description": "Diff contains the JSON patch between target and live resource Deprecated: use NormalizedLiveState and PredictedLiveState to render the difference",
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "hook": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "liveState": {
                    "description": "TargetState contains the JSON live resource manifest",
                    "type": "string"
                },
                "modified": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "normalizedLiveState": {
                    "description": "NormalizedLiveState contains JSON serialized live resource state with applied normalizations",
                    "type": "string"
                },
                "predictedLiveState": {
                    "description": "PredictedLiveState contains JSON serialized resource state that is calculated based on normalized and target resource state",
                    "type": "string"
                },
                "resourceVersion": {
                    "type": "string"
                },
                "targetState": {
                    "description": "TargetState contains the JSON serialized resource manifest defined in the Git/Helm",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceDiff",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceIgnoreDifferences": {
            "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.",
            "type": "object",
            "required": [
                "kind"
            ],
            "properties": {
                "group": {
                    "type": "string"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "kind": {
                    "type": "string",
                    "default": ""
                },
                "managedFieldsManagers": {
                    "description": "ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceIgnoreDifferences",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceNetworkingInfo": {
            "description": "ResourceNetworkingInfo holds networking resource related information",
            "type": "object",
            "properties": {
                "externalURLs": {
                    "description": "ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "ingress": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "targetLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "targetRefs": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceRef"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceNetworkingInfo",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceNode": {
            "description": "ResourceNode contains information about live resource and its children",
            "type": "object",
            "properties": {
                "createdAt": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "group": {
                    "type": "string"
                },
                "health": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HealthStatus"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "info": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.InfoItem"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "networkingInfo": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceNetworkingInfo"
                },
                "parentRefs": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceRef"
                    }
                },
                "resourceVersion": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceNode",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceOverride": {
            "description": "ResourceOverride holds configuration to customize resource diffing and health assessment",
            "type": "object",
            "required": [
                "HealthLua",
                "UseOpenLibs",
                "Actions",
                "IgnoreDifferences",
                "IgnoreResourceUpdates",
                "KnownTypeFields"
            ],
            "properties": {
                "Actions": {
                    "type": "string",
                    "default": ""
                },
                "HealthLua": {
                    "type": "string",
                    "default": ""
                },
                "IgnoreDifferences": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OverrideIgnoreDiff"
                },
                "IgnoreResourceUpdates": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.OverrideIgnoreDiff"
                },
                "KnownTypeFields": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.KnownTypeField"
                    }
                },
                "UseOpenLibs": {
                    "type": "boolean",
                    "default": false
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceOverride",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceRef": {
            "description": "ResourceRef includes fields which uniquely identify a resource",
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceResult": {
            "description": "ResourceResult holds the operation result details of a specific resource",
            "type": "object",
            "required": [
                "group",
                "version",
                "kind",
                "namespace",
                "name"
            ],
            "properties": {
                "group": {
                    "description": "Group specifies the API group of the resource",
                    "type": "string",
                    "default": ""
                },
                "hookPhase": {
                    "description": "HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.",
                    "type": "string"
                },
                "hookType": {
                    "description": "HookType specifies the type of the hook. Empty for non-hook resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind specifies the API kind of the resource",
                    "type": "string",
                    "default": ""
                },
                "message": {
                    "description": "Message contains an informational or error message for the last sync OR operation",
                    "type": "string"
                },
                "name": {
                    "description": "Name specifies the name of the resource",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace specifies the target namespace of the resource",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks",
                    "type": "string"
                },
                "syncPhase": {
                    "description": "SyncPhase indicates the particular phase of the sync that this result was acquired in",
                    "type": "string"
                },
                "version": {
                    "description": "Version specifies the API version of the resource",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.ResourceStatus": {
            "description": "ResourceStatus holds the current sync and health status of a resource",
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "health": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.HealthStatus"
                },
                "hook": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "requiresPruning": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "syncWave": {
                    "type": "integer",
                    "format": "int64"
                },
                "version": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RetryStrategy": {
            "description": "RetryStrategy contains information about the strategy to apply when a sync failed",
            "type": "object",
            "properties": {
                "backoff": {
                    "description": "Backoff controls how to backoff on subsequent retries of failed syncs",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.Backoff"
                },
                "limit": {
                    "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RevisionHistory": {
            "description": "RevisionHistory contains history information about a previous sync",
            "type": "object",
            "required": [
                "deployedAt",
                "id"
            ],
            "properties": {
                "deployStartedAt": {
                    "description": "DeployStartedAt holds the time the sync operation started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "deployedAt": {
                    "description": "DeployedAt holds the time the sync operation completed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "id": {
                    "description": "ID is an auto incrementing identifier of the RevisionHistory",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "revision": {
                    "description": "Revision holds the revision the sync was performed against",
                    "type": "string"
                },
                "revisions": {
                    "description": "Revisions holds the revision of each source in sources field the sync was performed against",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "source": {
                    "description": "Source is a reference to the application source used for the sync operation",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                },
                "sources": {
                    "description": "Sources is a reference to the application sources used for the sync operation",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RevisionHistory",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.RevisionMetadata": {
            "description": "RevisionMetadata contains metadata for a specific revision in a Git repository",
            "type": "object",
            "required": [
                "date"
            ],
            "properties": {
                "author": {
                    "description": "who authored this revision, typically their name and email, e.g. \"John Doe \u003cjohn_doe@my-company.com\u003e\", but might not match this example",
                    "type": "string"
                },
                "date": {
                    "description": "Date specifies when the revision was authored",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains the message associated with the revision, most likely the commit message.",
                    "type": "string"
                },
                "signatureInfo": {
                    "description": "SignatureInfo contains a hint on the signer if the revision was signed with GPG, and signature verification is enabled.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags specifies any tags currently attached to the revision Floating tags can move from one revision to another",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RevisionMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGenerator": {
            "description": "SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.",
            "type": "object",
            "properties": {
                "awsCodeCommit": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorAWSCodeCommit"
                },
                "azureDevOps": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorAzureDevOps"
                },
                "bitbucket": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorBitbucket"
                },
                "bitbucketServer": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorBitbucketServer"
                },
                "cloneProtocol": {
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.",
                    "type": "string"
                },
                "filters": {
                    "description": "Filters for which repos should be considered.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorFilter"
                    }
                },
                "gitea": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGitea"
                },
                "github": {
                    "description": "Which provider to use and config for it.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGithub"
                },
                "gitlab": {
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGitlab"
                },
                "requeueAfterSeconds": {
                    "description": "Standard parameters.",
                    "type": "integer",
                    "format": "int64"
                },
                "template": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSetTemplate"
                },
                "values": {
                    "description": "Values contains key/value pairs which are passed directly as parameters to the template",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGenerator",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorAWSCodeCommit": {
            "description": "SCMProviderGeneratorAWSCodeCommit defines connection info specific to AWS CodeCommit.",
            "type": "object",
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "region": {
                    "description": "Region provides the AWS region to discover repos. if not provided, AppSet controller will infer the current region from environment.",
                    "type": "string"
                },
                "role": {
                    "description": "Role provides the AWS IAM role to assume, for cross-account repo discovery if not provided, AppSet controller will use its pod/node identity to discover.",
                    "type": "string"
                },
                "tagFilters": {
                    "description": "TagFilters provides the tag filter(s) for repo discovery",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.TagFilter"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorAWSCodeCommit",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorAzureDevOps": {
            "description": "SCMProviderGeneratorAzureDevOps defines connection info specific to Azure DevOps.",
            "type": "object",
            "required": [
                "organization",
                "teamProject",
                "accessTokenRef"
            ],
            "properties": {
                "accessTokenRef": {
                    "description": "The Personal Access Token (PAT) to use when connecting. Required.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                },
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "api": {
                    "description": "The URL to Azure DevOps. If blank, use https://dev.azure.com.",
                    "type": "string"
                },
                "organization": {
                    "description": "Azure Devops organization. Required. E.g. \"my-organization\".",
                    "type": "string",
                    "default": ""
                },
                "teamProject": {
                    "description": "Azure Devops team project. Required. E.g. \"my-team\".",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorAzureDevOps",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorBitbucket": {
            "description": "SCMProviderGeneratorBitbucket defines connection info specific to Bitbucket Cloud (API version 2).",
            "type": "object",
            "required": [
                "owner",
                "user",
                "appPasswordRef"
            ],
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the main branch.",
                    "type": "boolean"
                },
                "appPasswordRef": {
                    "description": "The app password to use for the user.  Required. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                },
                "owner": {
                    "description": "Bitbucket workspace to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "user": {
                    "description": "Bitbucket user to use when authenticating.  Should have a \"member\" role to be able to read all repositories and branches.  Required",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorBitbucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorBitbucketServer": {
            "description": "SCMProviderGeneratorBitbucketServer defines connection info specific to Bitbucket Server.",
            "type": "object",
            "required": [
                "project",
                "api"
            ],
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "api": {
                    "description": "The Bitbucket Server REST API URL to talk to. Required.",
                    "type": "string",
                    "default": ""
                },
                "basicAuth": {
                    "description": "Credentials for Basic auth",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.BasicAuthBitbucketServer"
                },
                "project": {
                    "description": "Project to scan. Required.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorBitbucketServer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorFilter": {
            "description": "SCMProviderGeneratorFilter is a single repository filter. If multiple filter types are set on a single struct, they will be AND'd together. All filters must pass for a repo to be included.",
            "type": "object",
            "properties": {
                "branchMatch": {
                    "description": "A regex which must match the branch name.",
                    "type": "string"
                },
                "labelMatch": {
                    "description": "A regex which must match at least one label.",
                    "type": "string"
                },
                "pathsDoNotExist": {
                    "description": "An array of paths, all of which must not exist.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "pathsExist": {
                    "description": "An array of paths, all of which must exist.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "repositoryMatch": {
                    "description": "A regex for repo names.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGitea": {
            "description": "SCMProviderGeneratorGitea defines a connection info specific to Gitea.",
            "type": "object",
            "required": [
                "owner",
                "api"
            ],
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "api": {
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.",
                    "type": "string",
                    "default": ""
                },
                "insecure": {
                    "description": "Allow self-signed TLS / Certificates; default: false",
                    "type": "boolean"
                },
                "owner": {
                    "description": "Gitea organization or user to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorGitea",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGithub": {
            "description": "SCMProviderGeneratorGithub defines connection info specific to GitHub.",
            "type": "object",
            "required": [
                "organization"
            ],
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "api": {
                    "description": "The GitHub API URL to talk to. If blank, use https://api.github.com/.",
                    "type": "string"
                },
                "appSecretName": {
                    "description": "AppSecretName is a reference to a GitHub App repo-creds secret.",
                    "type": "string"
                },
                "organization": {
                    "description": "GitHub org to scan. Required.",
                    "type": "string",
                    "default": ""
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorGithub",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SCMProviderGeneratorGitlab": {
            "description": "SCMProviderGeneratorGitlab defines connection info specific to Gitlab.",
            "type": "object",
            "required": [
                "group"
            ],
            "properties": {
                "allBranches": {
                    "description": "Scan all branches instead of just the default branch.",
                    "type": "boolean"
                },
                "api": {
                    "description": "The Gitlab API URL to talk to.",
                    "type": "string"
                },
                "group": {
                    "description": "Gitlab group to scan. Required.  You can use either the project id (recommended) or the full namespaced path.",
                    "type": "string",
                    "default": ""
                },
                "includeSharedProjects": {
                    "description": "When recursing through subgroups, also include shared Projects (true) or scan only the subgroups under same path (false).  Defaults to \"true\"",
                    "type": "boolean"
                },
                "includeSubgroups": {
                    "description": "Recurse through subgroups (true) or scan only the base group (false).  Defaults to \"false\"",
                    "type": "boolean"
                },
                "insecure": {
                    "description": "Skips validating the SCM provider's TLS certificate - useful for self-signed certificates.; default: false",
                    "type": "boolean"
                },
                "tokenRef": {
                    "description": "Authentication token reference.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SecretRef"
                },
                "topic": {
                    "description": "Filter repos list based on Gitlab Topic.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SCMProviderGeneratorGitlab",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SecretRef": {
            "description": "Utility struct for a reference to a secret key.",
            "type": "object",
            "required": [
                "secretName",
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SecretRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SignatureKey": {
            "description": "SignatureKey is the specification of a key required to verify commit signatures with",
            "type": "object",
            "required": [
                "keyID"
            ],
            "properties": {
                "keyID": {
                    "description": "The ID of the key in hexadecimal notation",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SignatureKey",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncOperation": {
            "description": "SyncOperation contains details about a sync operation.",
            "type": "object",
            "properties": {
                "dryRun": {
                    "description": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync",
                    "type": "boolean"
                },
                "manifests": {
                    "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "prune": {
                    "description": "Prune specifies to delete resources from the cluster that are no longer tracked in git",
                    "type": "boolean"
                },
                "resources": {
                    "description": "Resources describes which resources shall be part of the sync",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncOperationResource"
                    }
                },
                "revision": {
                    "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.",
                    "type": "string"
                },
                "revisions": {
                    "description": "Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to If omitted, will use the revision specified in app spec.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "source": {
                    "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                },
                "sources": {
                    "description": "Sources overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                    }
                },
                "syncOptions": {
                    "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "syncStrategy": {
                    "description": "SyncStrategy describes how to perform the sync",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncOperation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncOperationResource": {
            "description": "SyncOperationResource contains resources to sync.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncOperationResource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncOperationResult": {
            "description": "SyncOperationResult represent result of sync operation",
            "type": "object",
            "required": [
                "revision"
            ],
            "properties": {
                "managedNamespaceMetadata": {
                    "description": "ManagedNamespaceMetadata contains the current sync state of managed namespace metadata",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ManagedNamespaceMetadata"
                },
                "resources": {
                    "description": "Resources contains a list of sync result items for each individual resource in a sync operation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ResourceResult"
                    }
                },
                "revision": {
                    "description": "Revision holds the revision this sync operation was performed to",
                    "type": "string",
                    "default": ""
                },
                "revisions": {
                    "description": "Revisions holds the revision this sync operation was performed for respective indexed source in sources field",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "source": {
                    "description": "Source records the application source information of the sync, used for comparing auto-sync",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                },
                "sources": {
                    "description": "Source records the application source information of the sync, used for comparing auto-sync",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ApplicationSource"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncOperationResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncPolicy": {
            "description": "SyncPolicy controls when a sync will be performed in response to updates in git",
            "type": "object",
            "properties": {
                "automated": {
                    "description": "Automated will keep an application synced to the target revision",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncPolicyAutomated"
                },
                "managedNamespaceMetadata": {
                    "description": "ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ManagedNamespaceMetadata"
                },
                "retry": {
                    "description": "Retry controls failed sync retry behavior",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.RetryStrategy"
                },
                "syncOptions": {
                    "description": "Options allow you to specify whole app sync-options",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncPolicyAutomated": {
            "description": "SyncPolicyAutomated controls the behavior of an automated sync",
            "type": "object",
            "properties": {
                "allowEmpty": {
                    "description": "AllowEmpty allows apps have zero live resources (default: false)",
                    "type": "boolean"
                },
                "prune": {
                    "description": "Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)",
                    "type": "boolean"
                },
                "selfHeal": {
                    "description": "SelfHeal specifies whether to revert resources back to their desired state upon modification in the cluster (default: false)",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncPolicyAutomated",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncStatus": {
            "description": "SyncStatus contains information about the currently observed live and desired states of an application",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "comparedTo": {
                    "description": "ComparedTo contains information about what has been compared",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.ComparedTo"
                },
                "revision": {
                    "description": "Revision contains information about the revision the comparison has been performed to",
                    "type": "string"
                },
                "revisions": {
                    "description": "Revisions contains information about the revisions of multiple sources the comparison has been performed to",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "status": {
                    "description": "Status is the sync state of the comparison",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncStrategy": {
            "description": "SyncStrategy controls the manner in which a sync is performed",
            "type": "object",
            "properties": {
                "apply": {
                    "description": "Apply will perform a `kubectl apply` to perform the sync.",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncStrategyApply"
                },
                "hook": {
                    "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                    "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.SyncStrategyHook"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncStrategyApply": {
            "description": "SyncStrategyApply uses `kubectl apply` to perform the apply",
            "type": "object",
            "properties": {
                "force": {
                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncStrategyApply",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncStrategyHook": {
            "description": "SyncStrategyHook will perform a sync using hooks annotations. If no hook annotation is specified falls back to `kubectl apply`.",
            "type": "object",
            "properties": {
                "force": {
                    "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncStrategyHook",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.SyncWindow": {
            "description": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps",
            "type": "object",
            "properties": {
                "applications": {
                    "description": "Applications contains a list of applications that the window will apply to",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clusters": {
                    "description": "Clusters contains a list of clusters that the window will apply to",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "duration": {
                    "description": "Duration is the amount of time the sync window will be open",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind defines if the window allows or blocks syncs",
                    "type": "string"
                },
                "manualSync": {
                    "description": "ManualSync enables manual syncs when they would otherwise be blocked",
                    "type": "boolean"
                },
                "namespaces": {
                    "description": "Namespaces contains a list of namespaces that the window will apply to",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "schedule": {
                    "description": "Schedule is the time the window will begin, specified in cron format",
                    "type": "string"
                },
                "timeZone": {
                    "description": "TimeZone of the sync that will be applied to the schedule",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SyncWindow",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.TLSClientConfig": {
            "description": "TLSClientConfig contains settings to enable transport layer security",
            "type": "object",
            "required": [
                "insecure"
            ],
            "properties": {
                "caData": {
                    "description": "CAData holds PEM-encoded bytes (typically read from a root certificates bundle). CAData takes precedence over CAFile",
                    "type": "string",
                    "format": "byte"
                },
                "certData": {
                    "description": "CertData holds PEM-encoded bytes (typically read from a client certificate file). CertData takes precedence over CertFile",
                    "type": "string",
                    "format": "byte"
                },
                "insecure": {
                    "description": "Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only.",
                    "type": "boolean",
                    "default": false
                },
                "keyData": {
                    "description": "KeyData holds PEM-encoded bytes (typically read from a client certificate key file). KeyData takes precedence over KeyFile",
                    "type": "string",
                    "format": "byte"
                },
                "serverName": {
                    "description": "ServerName is passed to the server for SNI and is used in the client to check server certificates against. If ServerName is empty, the hostname used to contact the server is used.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TLSClientConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.TagFilter": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TagFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.objectMeta": {
            "description": "objectMeta and corresponding GetMetadata() methods is a hack to allow us to use grpc-gateway side-by-side with k8s protobuf codegen. The grpc-gateway generated .gw.pb.go files expect a GetMetadata() method to be generated because it assumes the .proto files were generated from protoc --go_out=plugins=grpc. Instead, kubernetes uses go-to-protobuf to generate .proto files from go types, and this method is not auto-generated (presumably since ObjectMeta is embedded but is nested in the 'metadata' field in JSON form).",
            "type": "object",
            "required": [
                "Name"
            ],
            "properties": {
                "Name": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "objectMeta",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.argocd.v1alpha1.rawResourceOverride": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "string"
                },
                "health.lua": {
                    "type": "string"
                },
                "health.lua.useOpenLibs": {
                    "type": "boolean"
                },
                "ignoreDifferences": {
                    "type": "string"
                },
                "ignoreResourceUpdates": {
                    "type": "string"
                },
                "knownTypeFields": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.argocd.v1alpha1.KnownTypeField"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "rawResourceOverride",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.BusConfig": {
            "description": "BusConfig has the finalized configuration for EventBus",
            "type": "object",
            "properties": {
                "jetstream": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.JetStreamConfig"
                },
                "kafka": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.KafkaBus"
                },
                "nats": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BusConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.ContainerTemplate": {
            "description": "ContainerTemplate defines customized spec for a container",
            "type": "object",
            "properties": {
                "imagePullPolicy": {
                    "description": "Possible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "resources": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "securityContext": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBus": {
            "description": "EventBus is the definition of a eventbus resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBusSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBusStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusList": {
            "description": "EventBusList is the list of eventbus resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBus"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusSpec": {
            "description": "EventBusSpec refers to specification of eventbus resource",
            "type": "object",
            "properties": {
                "jetstream": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.JetStreamBus"
                },
                "jetstreamExotic": {
                    "description": "Exotic JetStream",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.JetStreamConfig"
                },
                "kafka": {
                    "description": "Kafka eventbus",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.KafkaBus"
                },
                "nats": {
                    "description": "NATS eventbus",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSBus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusStatus": {
            "description": "EventBusStatus holds the status of the eventbus resource",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "config": {
                    "description": "Config holds the fininalized configuration of EventBus",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.BusConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.JetStreamBus": {
            "description": "JetStreamBus holds the JetStream EventBus information",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "containerTemplate": {
                    "description": "ContainerTemplate contains customized spec for Nats JetStream container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "maxPayload": {
                    "description": "Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "metricsContainerTemplate": {
                    "description": "MetricsContainerTemplate contains customized spec for metrics container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the Redis pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the Redis pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "reloaderContainerTemplate": {
                    "description": "ReloaderContainerTemplate contains customized spec for config reloader container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "replicas": {
                    "description": "JetStream StatefulSet size",
                    "type": "integer",
                    "format": "int32"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to the StatefulSet",
                    "type": "string"
                },
                "settings": {
                    "description": "JetStream configuration, if not specified, global settings in controller-config will be used. See https://docs.nats.io/running-a-nats-service/configuration#jetstream. Only configure \"max_memory_store\" or \"max_file_store\", do not set \"store_dir\" as it has been hardcoded.",
                    "type": "string"
                },
                "startArgs": {
                    "description": "Optional arguments to start nats-server. For example, \"-D\" to enable debugging output, \"-DV\" to enable debugging and tracing. Check https://docs.nats.io/ for all the available arguments.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "streamConfig": {
                    "description": "Optional configuration for the streams to be created in this JetStream service, if specified, it will be merged with the default configuration in controller-config. It accepts a YAML format configuration, available fields include, \"maxBytes\", \"maxMsgs\", \"maxAge\" (e.g. 72h), \"replicas\" (1, 3, 5), \"duplicates\" (e.g. 5m).",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "version": {
                    "description": "JetStream version, such as \"2.7.3\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JetStreamBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.JetStreamConfig": {
            "type": "object",
            "properties": {
                "accessSecret": {
                    "description": "Secret for auth",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "streamConfig": {
                    "type": "string"
                },
                "url": {
                    "description": "JetStream (Nats) URL",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JetStreamConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.KafkaBus": {
            "description": "KafkaBus holds the KafkaBus EventBus information",
            "type": "object",
            "properties": {
                "consumerGroup": {
                    "description": "Consumer group for kafka client",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup"
                },
                "sasl": {
                    "description": "SASL configuration for the kafka client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SASLConfig"
                },
                "tls": {
                    "description": "TLS configuration for the kafka client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic name, defaults to {namespace_name}-{eventbus_name}",
                    "type": "string"
                },
                "url": {
                    "description": "URL to kafka cluster, multiple URLs separated by comma",
                    "type": "string"
                },
                "version": {
                    "description": "Kafka version, sarama defaults to the oldest supported stable version",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup": {
            "type": "object",
            "properties": {
                "groupName": {
                    "description": "Consumer group name, defaults to {namespace_name}-{sensor_name}",
                    "type": "string"
                },
                "rebalanceStrategy": {
                    "description": "Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.",
                    "type": "string"
                },
                "startOldest": {
                    "description": "When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaConsumerGroup",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NATSBus": {
            "description": "NATSBus holds the NATS eventbus information",
            "type": "object",
            "properties": {
                "exotic": {
                    "description": "Exotic holds an exotic NATS config",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSConfig"
                },
                "native": {
                    "description": "Native means to bring up a native NATS service",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NativeStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NATSConfig": {
            "description": "NATSConfig holds the config of NATS",
            "type": "object",
            "properties": {
                "accessSecret": {
                    "description": "Secret for auth",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "auth": {
                    "description": "Auth strategy, default to AuthStrategyNone",
                    "type": "string"
                },
                "clusterID": {
                    "description": "Cluster ID for nats streaming",
                    "type": "string"
                },
                "url": {
                    "description": "NATS streaming url",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NativeStrategy": {
            "description": "NativeStrategy indicates to install a native NATS service",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "auth": {
                    "type": "string"
                },
                "containerTemplate": {
                    "description": "ContainerTemplate contains customized spec for NATS container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "maxAge": {
                    "description": "Max Age of existing messages, i.e. \"72h\", “4h35m”",
                    "type": "string"
                },
                "maxBytes": {
                    "description": "Total size of messages per channel, 0 means unlimited. Defaults to 1GB",
                    "type": "string"
                },
                "maxMsgs": {
                    "description": "Maximum number of messages per channel, 0 means unlimited. Defaults to 1000000",
                    "type": "integer",
                    "format": "int64"
                },
                "maxPayload": {
                    "description": "Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB",
                    "type": "string"
                },
                "maxSubs": {
                    "description": "Maximum number of subscriptions per channel, 0 means unlimited. Defaults to 1000",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "metricsContainerTemplate": {
                    "description": "MetricsContainerTemplate contains customized spec for metrics container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "raftCommitTimeout": {
                    "description": "Specifies the time without an Apply() operation before sending an heartbeat to ensure timely commit, i.e. \"72h\", “4h35m”. Defaults to 100ms",
                    "type": "string"
                },
                "raftElectionTimeout": {
                    "description": "Specifies the time in candidate state without a leader before attempting an election, i.e. \"72h\", “4h35m”. Defaults to 2s",
                    "type": "string"
                },
                "raftHeartbeatTimeout": {
                    "description": "Specifies the time in follower state without a leader before attempting an election, i.e. \"72h\", “4h35m”. Defaults to 2s",
                    "type": "string"
                },
                "raftLeaseTimeout": {
                    "description": "Specifies how long a leader waits without being able to contact a quorum of nodes before stepping down as leader, i.e. \"72h\", “4h35m”. Defaults to 1s",
                    "type": "string"
                },
                "replicas": {
                    "description": "Size is the NATS StatefulSet size",
                    "type": "integer",
                    "format": "int32"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to NATS StatefulSet",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NativeStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.PersistenceStrategy": {
            "description": "PersistenceStrategy defines the strategy of persistence",
            "type": "object",
            "properties": {
                "accessMode": {
                    "description": "Available access modes such as ReadWriteOnce, ReadWriteMany https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes\n\nPossible enum values:\n - `\"ReadOnlyMany\"` can be mounted in read-only mode to many hosts\n - `\"ReadWriteMany\"` can be mounted in read/write mode to many hosts\n - `\"ReadWriteOnce\"` can be mounted in read/write mode to exactly 1 host\n - `\"ReadWriteOncePod\"` can be mounted in read/write mode to exactly 1 pod cannot be used in combination with other access modes",
                    "type": "string",
                    "enum": [
                        "ReadOnlyMany",
                        "ReadWriteMany",
                        "ReadWriteOnce",
                        "ReadWriteOncePod"
                    ]
                },
                "storageClassName": {
                    "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                    "type": "string"
                },
                "volumeSize": {
                    "description": "Volume size, e.g. 10Gi",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PersistenceStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig": {
            "description": "AMQPConsumeConfig holds the configuration to immediately starts delivering queued messages",
            "type": "object",
            "properties": {
                "autoAck": {
                    "description": "AutoAck when true, the server will acknowledge deliveries to this consumer prior to writing the delivery to the network",
                    "type": "boolean"
                },
                "consumerTag": {
                    "description": "ConsumerTag is the identity of the consumer included in every delivery",
                    "type": "string"
                },
                "exclusive": {
                    "description": "Exclusive when true, the server will ensure that this is the sole consumer from this queue",
                    "type": "boolean"
                },
                "noLocal": {
                    "description": "NoLocal flag is not supported by RabbitMQ",
                    "type": "boolean"
                },
                "noWait": {
                    "description": "NowWait when true, do not wait for the server to confirm the request and immediately begin deliveries",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPConsumeConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPEventSource": {
            "description": "AMQPEventSource refers to an event-source for AMQP stream events",
            "type": "object",
            "required": [
                "exchangeName",
                "exchangeType",
                "routingKey"
            ],
            "properties": {
                "auth": {
                    "description": "Auth hosts secret selectors for username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "consume": {
                    "description": "Consume holds the configuration to immediately starts delivering queued messages For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.Consume",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig"
                },
                "exchangeDeclare": {
                    "description": "ExchangeDeclare holds the configuration for the exchange on the server For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.ExchangeDeclare",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig"
                },
                "exchangeName": {
                    "description": "ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html",
                    "type": "string",
                    "default": ""
                },
                "exchangeType": {
                    "description": "ExchangeType is rabbitmq exchange type",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queueBind": {
                    "description": "QueueBind holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueBind",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig"
                },
                "queueDeclare": {
                    "description": "QueueDeclare holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueDeclare",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig"
                },
                "routingKey": {
                    "description": "Routing key for bindings",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the amqp client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL for rabbitmq service",
                    "type": "string"
                },
                "urlSecret": {
                    "description": "URLSecret is secret reference for rabbitmq service URL",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig": {
            "description": "AMQPExchangeDeclareConfig holds the configuration for the exchange on the server",
            "type": "object",
            "properties": {
                "autoDelete": {
                    "description": "AutoDelete removes the exchange when no bindings are active",
                    "type": "boolean"
                },
                "durable": {
                    "description": "Durable keeps the exchange also after the server restarts",
                    "type": "boolean"
                },
                "internal": {
                    "description": "Internal when true does not accept publishings",
                    "type": "boolean"
                },
                "noWait": {
                    "description": "NowWait when true does not wait for a confirmation from the server",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPExchangeDeclareConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig": {
            "description": "AMQPQueueBindConfig holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key",
            "type": "object",
            "properties": {
                "noWait": {
                    "description": "NowWait false and the queue could not be bound, the channel will be closed with an error",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPQueueBindConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig": {
            "description": "AMQPQueueDeclareConfig holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters",
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments of a queue (also known as \"x-arguments\") used for optional features and plugins",
                    "type": "string"
                },
                "autoDelete": {
                    "description": "AutoDelete removes the queue when no consumers are active",
                    "type": "boolean"
                },
                "durable": {
                    "description": "Durable keeps the queue also after the server restarts",
                    "type": "boolean"
                },
                "exclusive": {
                    "description": "Exclusive sets the queues to be accessible only by the connection that declares them and will be deleted wgen the connection closes",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the queue. If empty the server auto-generates a unique name for this queue",
                    "type": "string"
                },
                "noWait": {
                    "description": "NowWait when true, the queue assumes to be declared on the server",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPQueueDeclareConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource": {
            "description": "AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/",
            "type": "object",
            "required": [
                "fqdn",
                "hubName"
            ],
            "properties": {
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "fqdn": {
                    "description": "FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string",
                    "type": "string",
                    "default": ""
                },
                "hubName": {
                    "description": "Event Hub path/name",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sharedAccessKey": {
                    "description": "SharedAccessKey is the generated value of the key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sharedAccessKeyName": {
                    "description": "SharedAccessKeyName is the name you chose for your application's SAS keys",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureEventsHubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource": {
            "description": "AzureQueueStorageEventSource describes the event source for azure queue storage more info at https://learn.microsoft.com/en-us/azure/storage/queues/",
            "type": "object",
            "required": [
                "queueName"
            ],
            "properties": {
                "connectionString": {
                    "description": "ConnectionString is the connection string to access Azure Queue Storage. If this fields is not provided it will try to access via Azure AD with StorageAccountName.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "decodeMessage": {
                    "description": "DecodeMessage specifies if all the messages should be base64 decoded. If set to true the decoding is done before the evaluation of JSONBody",
                    "type": "boolean"
                },
                "dlq": {
                    "description": "DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully. If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue. The default value is false.",
                    "type": "boolean"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queueName": {
                    "description": "QueueName is the name of the queue",
                    "type": "string",
                    "default": ""
                },
                "storageAccountName": {
                    "description": "StorageAccountName is the name of the storage account where the queue is. This field is necessary to access via Azure AD (managed identity) and it is ignored if ConnectionString is set.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureQueueStorageEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource": {
            "description": "AzureServiceBusEventSource describes the event source for azure service bus More info at https://docs.microsoft.com/en-us/azure/service-bus-messaging/",
            "type": "object",
            "required": [
                "queueName",
                "topicName",
                "subscriptionName"
            ],
            "properties": {
                "connectionString": {
                    "description": "ConnectionString is the connection string for the Azure Service Bus. If this fields is not provided it will try to access via Azure AD with DefaultAzureCredential and FullyQualifiedNamespace.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "fullyQualifiedNamespace": {
                    "description": "FullyQualifiedNamespace is the Service Bus namespace name (ex: myservicebus.servicebus.windows.net). This field is necessary to access via Azure AD (managed identity) and it is ignored if ConnectionString is set.",
                    "type": "string"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queueName": {
                    "description": "QueueName is the name of the Azure Service Bus Queue",
                    "type": "string",
                    "default": ""
                },
                "subscriptionName": {
                    "description": "SubscriptionName is the name of the Azure Service Bus Topic Subscription",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the service bus client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topicName": {
                    "description": "TopicName is the name of the Azure Service Bus Topic",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureServiceBusEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketAuth": {
            "description": "BitbucketAuth holds the different auth strategies for connecting to Bitbucket",
            "type": "object",
            "properties": {
                "basic": {
                    "description": "Basic is BasicAuth auth strategy.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth"
                },
                "oauthToken": {
                    "description": "OAuthToken refers to the K8s secret that holds the OAuth Bearer token.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth": {
            "description": "BasicAuth holds the information required to authenticate user via basic auth mechanism",
            "type": "object",
            "required": [
                "username",
                "password"
            ],
            "properties": {
                "password": {
                    "description": "Password refers to the K8s secret that holds the password.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "username": {
                    "description": "Username refers to the K8s secret that holds the username.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketBasicAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketEventSource": {
            "description": "BitbucketEventSource describes the event source for Bitbucket",
            "type": "object",
            "required": [
                "webhook",
                "auth",
                "events"
            ],
            "properties": {
                "auth": {
                    "description": "Auth information required to connect to Bitbucket.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketAuth"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the defined Bitbucket hook once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events this webhook is subscribed to.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will be passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "DeprecatedOwner is the owner of the repository. Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "projectKey": {
                    "description": "DeprecatedProjectKey is the key of the project to which the repository relates Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "repositories": {
                    "description": "Repositories holds a list of repositories for which integration needs to set up",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketRepository"
                    }
                },
                "repositorySlug": {
                    "description": "DeprecatedRepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "webhook": {
                    "description": "Webhook refers to the configuration required to run an http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketRepository": {
            "type": "object",
            "required": [
                "owner",
                "repositorySlug"
            ],
            "properties": {
                "owner": {
                    "description": "Owner is the owner of the repository",
                    "type": "string",
                    "default": ""
                },
                "repositorySlug": {
                    "description": "RepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource": {
            "description": "BitbucketServerEventSource refers to event-source related to Bitbucket Server events",
            "type": "object",
            "required": [
                "events",
                "bitbucketserverBaseURL"
            ],
            "properties": {
                "accessToken": {
                    "description": "AccessToken is reference to K8s secret which holds the bitbucket api access information",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bitbucketserverBaseURL": {
                    "description": "BitbucketServerBaseURL is the base URL for API requests to a custom endpoint",
                    "type": "string",
                    "default": ""
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events are bitbucket event to listen to. Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectKey": {
                    "description": "DeprecatedProjectKey is the key of project for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8",
                    "type": "string"
                },
                "repositories": {
                    "description": "Repositories holds a list of repositories for which integration needs to set up",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketServerRepository"
                    }
                },
                "repositorySlug": {
                    "description": "DeprecatedRepositorySlug is the slug of the repository for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8",
                    "type": "string"
                },
                "tls": {
                    "description": "TLS configuration for the bitbucketserver client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "webhook": {
                    "description": "Webhook holds configuration to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                },
                "webhookSecret": {
                    "description": "WebhookSecret is reference to K8s secret which holds the bitbucket webhook secret (for HMAC validation)",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketServerEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketServerRepository": {
            "type": "object",
            "required": [
                "projectKey",
                "repositorySlug"
            ],
            "properties": {
                "projectKey": {
                    "description": "ProjectKey is the key of project for which integration needs to set up",
                    "type": "string",
                    "default": ""
                },
                "repositorySlug": {
                    "description": "RepositorySlug is the slug of the repository for which integration needs to set up",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketServerRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.CalendarEventSource": {
            "description": "CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence",
            "type": "object",
            "properties": {
                "exclusionDates": {
                    "description": "ExclusionDates defines the list of DATE-TIME exceptions for recurring events.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "interval": {
                    "description": "Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "description": "Persistence hold the configuration for event persistence",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventPersistence"
                },
                "schedule": {
                    "description": "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "type": "string",
                    "default": ""
                },
                "timezone": {
                    "description": "Timezone in which to run the schedule",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CalendarEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.CatchupConfiguration": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enabled enables to triggered the missed schedule when eventsource restarts",
                    "type": "boolean"
                },
                "maxDuration": {
                    "description": "MaxDuration holds max catchup duration",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CatchupConfiguration",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ConfigMapPersistence": {
            "type": "object",
            "properties": {
                "createIfNotExist": {
                    "description": "CreateIfNotExist will create configmap if it doesn't exists",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the configmap",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConfigMapPersistence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EmitterEventSource": {
            "description": "EmitterEventSource describes the event source for emitter More info at https://emitter.io/develop/getting-started/",
            "type": "object",
            "required": [
                "broker",
                "channelKey",
                "channelName"
            ],
            "properties": {
                "broker": {
                    "description": "Broker URI to connect to.",
                    "type": "string",
                    "default": ""
                },
                "channelKey": {
                    "description": "ChannelKey refers to the channel key",
                    "type": "string",
                    "default": ""
                },
                "channelName": {
                    "description": "ChannelName refers to the channel name",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "password": {
                    "description": "Password to use to connect to broker",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tls": {
                    "description": "TLS configuration for the emitter client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username to use to connect to broker",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EmitterEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventPersistence": {
            "type": "object",
            "properties": {
                "catchup": {
                    "description": "Catchup enables to triggered the missed schedule when eventsource restarts",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.CatchupConfiguration"
                },
                "configMap": {
                    "description": "ConfigMap holds configmap details for persistence",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ConfigMapPersistence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventPersistence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSource": {
            "description": "EventSource is the definition of a eventsource resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceFilter": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceList": {
            "description": "EventSourceList is the list of eventsource resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSource"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceSpec": {
            "description": "EventSourceSpec refers to specification of event-source resource",
            "type": "object",
            "properties": {
                "amqp": {
                    "description": "AMQP event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPEventSource"
                    }
                },
                "azureEventsHub": {
                    "description": "AzureEventsHub event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
                    }
                },
                "azureQueueStorage": {
                    "description": "AzureQueueStorage event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource"
                    }
                },
                "azureServiceBus": {
                    "description": "Azure Service Bus event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource"
                    }
                },
                "bitbucket": {
                    "description": "Bitbucket event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
                    }
                },
                "bitbucketserver": {
                    "description": "Bitbucket Server event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
                    }
                },
                "calendar": {
                    "description": "Calendar event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.CalendarEventSource"
                    }
                },
                "emitter": {
                    "description": "Emitter event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EmitterEventSource"
                    }
                },
                "eventBusName": {
                    "description": "EventBusName references to a EventBus name. By default the value is \"default\"",
                    "type": "string"
                },
                "file": {
                    "description": "File event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.FileEventSource"
                    }
                },
                "generic": {
                    "description": "Generic event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GenericEventSource"
                    }
                },
                "gerrit": {
                    "description": "Gerrit event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GerritEventSource"
                    }
                },
                "github": {
                    "description": "Github event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GithubEventSource"
                    }
                },
                "gitlab": {
                    "description": "Gitlab event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GitlabEventSource"
                    }
                },
                "hdfs": {
                    "description": "HDFS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.HDFSEventSource"
                    }
                },
                "kafka": {
                    "description": "Kafka event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.KafkaEventSource"
                    }
                },
                "minio": {
                    "description": "Minio event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.S3Artifact"
                    }
                },
                "mqtt": {
                    "description": "MQTT event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.MQTTEventSource"
                    }
                },
                "nats": {
                    "description": "NATS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NATSEventsSource"
                    }
                },
                "nsq": {
                    "description": "NSQ event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NSQEventSource"
                    }
                },
                "pubSub": {
                    "description": "PubSub event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.PubSubEventSource"
                    }
                },
                "pulsar": {
                    "description": "Pulsar event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.PulsarEventSource"
                    }
                },
                "redis": {
                    "description": "Redis event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.RedisEventSource"
                    }
                },
                "redisStream": {
                    "description": "Redis stream source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
                    }
                },
                "replicas": {
                    "description": "Replicas is the event source deployment replicas",
                    "type": "integer",
                    "format": "int32"
                },
                "resource": {
                    "description": "Resource event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ResourceEventSource"
                    }
                },
                "service": {
                    "description": "Service is the specifications of the service to expose the event source",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Service"
                },
                "sftp": {
                    "description": "SFTP event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SFTPEventSource"
                    }
                },
                "slack": {
                    "description": "Slack event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SlackEventSource"
                    }
                },
                "sns": {
                    "description": "SNS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SNSEventSource"
                    }
                },
                "sqs": {
                    "description": "SQS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SQSEventSource"
                    }
                },
                "storageGrid": {
                    "description": "StorageGrid event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
                    }
                },
                "stripe": {
                    "description": "Stripe event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StripeEventSource"
                    }
                },
                "template": {
                    "description": "Template is the pod specification for the event source",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Template"
                },
                "webhook": {
                    "description": "Webhook event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookEventSource"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceStatus": {
            "description": "EventSourceStatus holds the status of the event-source resource",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.FileEventSource": {
            "description": "FileEventSource describes an event-source for file related events.",
            "type": "object",
            "required": [
                "eventType",
                "watchPathConfig"
            ],
            "properties": {
                "eventType": {
                    "description": "Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "polling": {
                    "description": "Use polling instead of inotify",
                    "type": "boolean"
                },
                "watchPathConfig": {
                    "description": "WatchPathConfig contains configuration about the file path to watch",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WatchPathConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "FileEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GenericEventSource": {
            "description": "GenericEventSource refers to a generic event source. It can be used to implement a custom event source.",
            "type": "object",
            "required": [
                "url",
                "config"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "config": {
                    "description": "Config is the event source configuration",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "insecure": {
                    "description": "Insecure determines the type of connection.",
                    "type": "boolean"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "url": {
                    "description": "URL of the gRPC server that implements the event source.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GenericEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GerritEventSource": {
            "description": "GerritEventSource refers to event-source related to gerrit events",
            "type": "object",
            "required": [
                "hookName",
                "events",
                "gerritBaseURL"
            ],
            "properties": {
                "auth": {
                    "description": "Auth hosts secret selectors for username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the Gerrit hook for the project once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events are gerrit event to listen to. Refer https://gerrit-review.googlesource.com/Documentation/cmd-stream-events.html#events",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "gerritBaseURL": {
                    "description": "GerritBaseURL is the base URL for API requests to a custom endpoint",
                    "type": "string",
                    "default": ""
                },
                "hookName": {
                    "description": "HookName is the name of the webhook",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projects": {
                    "description": "List of project namespace paths like \"whynowy/test\".",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sslVerify": {
                    "description": "SslVerify to enable ssl verification",
                    "type": "boolean"
                },
                "webhook": {
                    "description": "Webhook holds configuration to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GerritEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GithubAppCreds": {
            "type": "object",
            "required": [
                "privateKey",
                "appID",
                "installationID"
            ],
            "properties": {
                "appID": {
                    "description": "AppID refers to the GitHub App ID for the application you created",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "installationID": {
                    "description": "InstallationID refers to the Installation ID of the GitHub app you created and installed",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "privateKey": {
                    "description": "PrivateKey refers to a K8s secret containing the GitHub app private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GithubAppCreds",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GithubEventSource": {
            "description": "GithubEventSource refers to event-source for github related events",
            "type": "object",
            "required": [
                "events"
            ],
            "properties": {
                "active": {
                    "description": "Active refers to status of the webhook for event deliveries. https://developer.github.com/webhooks/creating/#active",
                    "type": "boolean"
                },
                "apiToken": {
                    "description": "APIToken refers to a K8s secret containing github api token",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "contentType": {
                    "description": "ContentType of the event delivery",
                    "type": "string"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events refer to Github events to which the event source will subscribe",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "githubApp": {
                    "description": "GitHubApp holds the GitHub app credentials",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GithubAppCreds"
                },
                "githubBaseURL": {
                    "description": "GitHub base URL (for GitHub Enterprise)",
                    "type": "string"
                },
                "githubUploadURL": {
                    "description": "GitHub upload URL (for GitHub Enterprise)",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the webhook's id Deprecated: This is not used at all, will be removed in v1.6",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "insecure": {
                    "description": "Insecure tls verification",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "organizations": {
                    "description": "Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "DeprecatedOwner refers to GitHub owner name i.e. argoproj Deprecated: use Repositories instead. Will be unsupported in v 1.6",
                    "type": "string",
                    "default": ""
                },
                "repositories": {
                    "description": "Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.OwnedRepositories"
                    }
                },
                "repository": {
                    "description": "DeprecatedRepository refers to GitHub repo name i.e. argo-events Deprecated: use Repositories instead. Will be unsupported in v 1.6",
                    "type": "string",
                    "default": ""
                },
                "webhook": {
                    "description": "Webhook refers to the configuration required to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                },
                "webhookSecret": {
                    "description": "WebhookSecret refers to K8s secret containing GitHub webhook secret https://developer.github.com/webhooks/securing/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GithubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GitlabEventSource": {
            "description": "GitlabEventSource refers to event-source related to Gitlab events",
            "type": "object",
            "required": [
                "events",
                "gitlabBaseURL"
            ],
            "properties": {
                "accessToken": {
                    "description": "AccessToken references to k8 secret which holds the gitlab api access information",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.",
                    "type": "boolean"
                },
                "enableSSLVerification": {
                    "description": "EnableSSLVerification to enable ssl verification",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "gitlabBaseURL": {
                    "description": "GitlabBaseURL is the base URL for API requests to a custom endpoint",
                    "type": "string",
                    "default": ""
                },
                "groups": {
                    "description": "List of group IDs or group name like \"test\". Group level hook available in Premium and Ultimate Gitlab.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectID": {
                    "description": "DeprecatedProjectID is the id of project for which integration needs to setup Deprecated: use Projects instead. Will be unsupported in v 1.7",
                    "type": "string"
                },
                "projects": {
                    "description": "List of project IDs or project namespace paths like \"whynowy/test\". Projects and groups cannot be empty at the same time.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "secretToken": {
                    "description": "SecretToken references to k8 secret which holds the Secret Token used by webhook config",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "webhook": {
                    "description": "Webhook holds configuration to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitlabEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.HDFSEventSource": {
            "description": "HDFSEventSource refers to event-source for HDFS related events",
            "type": "object",
            "required": [
                "directory",
                "type",
                "addresses"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "checkInterval": {
                    "description": "CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)",
                    "type": "string"
                },
                "directory": {
                    "description": "Directory to watch for events",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "path": {
                    "description": "Path is relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "pathRegexp": {
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "type": {
                    "description": "Type of file operations to watch",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup": {
            "type": "object",
            "required": [
                "groupName"
            ],
            "properties": {
                "groupName": {
                    "description": "The name for the consumer group to use",
                    "type": "string",
                    "default": ""
                },
                "oldest": {
                    "description": "When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false",
                    "type": "boolean"
                },
                "rebalanceStrategy": {
                    "description": "Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaConsumerGroup",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.KafkaEventSource": {
            "description": "KafkaEventSource refers to event-source for Kafka related events",
            "type": "object",
            "required": [
                "url",
                "topic"
            ],
            "properties": {
                "config": {
                    "description": "Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/IBM/sarama/blob/main/config.go e.g.\n\nconsumer:\n  fetch:\n    min: 1\nnet:\n  MaxOpenRequests: 5",
                    "type": "string"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "consumerGroup": {
                    "description": "Consumer group for kafka client",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "limitEventsPerSecond": {
                    "description": "Sets a limit on how many events get read from kafka per second.",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "partition": {
                    "description": "Partition name",
                    "type": "string",
                    "default": ""
                },
                "sasl": {
                    "description": "SASL configuration for the kafka client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SASLConfig"
                },
                "tls": {
                    "description": "TLS configuration for the kafka client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic name",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL to kafka cluster, multiple URLs separated by comma",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.MQTTEventSource": {
            "description": "MQTTEventSource refers to event-source for MQTT related events",
            "type": "object",
            "required": [
                "url",
                "topic",
                "clientId"
            ],
            "properties": {
                "auth": {
                    "description": "Auth hosts secret selectors for username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "clientId": {
                    "description": "ClientID is the id of the client",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the mqtt client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic name",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL to connect to broker",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MQTTEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NATSAuth": {
            "description": "NATSAuth refers to the auth info for NATS EventSource",
            "type": "object",
            "properties": {
                "basic": {
                    "description": "Baisc auth with username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "credential": {
                    "description": "credential used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "nkey": {
                    "description": "NKey used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "token": {
                    "description": "Token used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NATSEventsSource": {
            "description": "NATSEventsSource refers to event-source for NATS related events",
            "type": "object",
            "required": [
                "url",
                "subject"
            ],
            "properties": {
                "auth": {
                    "description": "Auth information",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NATSAuth"
                },
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "subject": {
                    "description": "Subject holds the name of the subject onto which messages are published",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the nats client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL to connect to NATS cluster",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSEventsSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NSQEventSource": {
            "description": "NSQEventSource describes the event source for NSQ PubSub More info at https://godoc.org/github.com/nsqio/go-nsq",
            "type": "object",
            "required": [
                "hostAddress",
                "topic",
                "channel"
            ],
            "properties": {
                "channel": {
                    "description": "Channel used for subscription",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress is the address of the host for NSQ lookup",
                    "type": "string",
                    "default": ""
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the nsq client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic to subscribe to.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NSQEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.OwnedRepositories": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Repository names",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "Organization or user name",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OwnedRepositories",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.PubSubEventSource": {
            "description": "PubSubEventSource refers to event-source for GCP PubSub related events.",
            "type": "object",
            "properties": {
                "credentialSecret": {
                    "description": "CredentialSecret references to the secret that contains JSON credentials to access GCP. If it is missing, it implicitly uses Workload Identity to access. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "deleteSubscriptionOnFinish": {
                    "description": "DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped.",
                    "type": "boolean"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectID": {
                    "description": "ProjectID is GCP project ID for the subscription. Required if you run Argo Events outside of GKE/GCE. (otherwise, the default value is its project)",
                    "type": "string",
                    "default": ""
                },
                "subscriptionID": {
                    "description": "SubscriptionID is ID of subscription. Required if you use existing subscription. The default value will be auto generated hash based on this eventsource setting, so the subscription might be recreated every time you update the setting, which has a possibility of event loss.",
                    "type": "string",
                    "default": ""
                },
                "topic": {
                    "description": "Topic to which the subscription should belongs. Required if you want the eventsource to create a new subscription. If you specify this field along with an existing subscription, it will be verified whether it actually belongs to the specified topic.",
                    "type": "string",
                    "default": ""
                },
                "topicProjectID": {
                    "description": "TopicProjectID is GCP project ID for the topic. By default, it is same as ProjectID.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PubSubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.PulsarEventSource": {
            "description": "PulsarEventSource describes the event source for Apache Pulsar",
            "type": "object",
            "required": [
                "topics",
                "url"
            ],
            "properties": {
                "authAthenzParams": {
                    "description": "Authentication athenz parameters for the pulsar client. Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go Either token or athenz can be set to use auth.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "authAthenzSecret": {
                    "description": "Authentication athenz privateKey secret for the pulsar client. AuthAthenzSecret must be set if AuthAthenzParams is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "authTokenSecret": {
                    "description": "Authentication token for the pulsar client. Either token or athenz can be set to use auth.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the pulsar client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "tlsAllowInsecureConnection": {
                    "description": "Whether the Pulsar client accept untrusted TLS certificate from broker.",
                    "type": "boolean"
                },
                "tlsTrustCertsSecret": {
                    "description": "Trusted TLS certificate secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tlsValidateHostname": {
                    "description": "Whether the Pulsar client verify the validity of the host name from broker.",
                    "type": "boolean"
                },
                "topics": {
                    "description": "Name of the topics to subscribe to.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "type": {
                    "description": "Type of the subscription. Only \"exclusive\" and \"shared\" is supported. Defaults to exclusive.",
                    "type": "string"
                },
                "url": {
                    "description": "Configure the service URL for the Pulsar service.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PulsarEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.RedisEventSource": {
            "description": "RedisEventSource describes an event source for the Redis PubSub. More info at https://godoc.org/github.com/go-redis/redis#example-PubSub",
            "type": "object",
            "required": [
                "hostAddress",
                "channels"
            ],
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "db": {
                    "description": "DB to use. If not specified, default DB 0 will be used.",
                    "type": "integer",
                    "format": "int32"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress refers to the address of the Redis host/server",
                    "type": "string",
                    "default": ""
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "namespace": {
                    "description": "Namespace to use to retrieve the password from. It should only be specified if password is declared",
                    "type": "string"
                },
                "password": {
                    "description": "Password required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tls": {
                    "description": "TLS configuration for the redis client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username required for ACL style authentication if any.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RedisEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.RedisStreamEventSource": {
            "description": "RedisStreamEventSource describes an event source for Redis streams (https://redis.io/topics/streams-intro)",
            "type": "object",
            "required": [
                "hostAddress",
                "streams"
            ],
            "properties": {
                "consumerGroup": {
                    "description": "ConsumerGroup refers to the Redis stream consumer group that will be created on all redis streams. Messages are read through this group. Defaults to 'argo-events-cg'",
                    "type": "string"
                },
                "db": {
                    "description": "DB to use. If not specified, default DB 0 will be used.",
                    "type": "integer",
                    "format": "int32"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress refers to the address of the Redis host/server (master instance)",
                    "type": "string",
                    "default": ""
                },
                "maxMsgCountPerRead": {
                    "description": "MaxMsgCountPerRead holds the maximum number of messages per stream that will be read in each XREADGROUP of all streams Example: if there are 2 streams and MaxMsgCountPerRead=10, then each XREADGROUP may read upto a total of 20 messages. Same as COUNT option in XREADGROUP(https://redis.io/topics/streams-intro). Defaults to 10",
                    "type": "integer",
                    "format": "int32"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "password": {
                    "description": "Password required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "streams": {
                    "description": "Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the redis client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username required for ACL style authentication if any.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RedisStreamEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ResourceEventSource": {
            "description": "ResourceEventSource refers to a event-source for K8s resource related events.",
            "type": "object",
            "required": [
                "namespace",
                "group",
                "version",
                "resource",
                "eventTypes"
            ],
            "properties": {
                "eventTypes": {
                    "description": "EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter is applied on the metadata of the resource If you apply filter, then the internal event informer will only monitor objects that pass the filter.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ResourceFilter"
                },
                "group": {
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "namespace": {
                    "description": "Namespace where resource is deployed",
                    "type": "string",
                    "default": ""
                },
                "resource": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ResourceFilter": {
            "description": "ResourceFilter contains K8s ObjectMeta information to further filter resource event objects",
            "type": "object",
            "properties": {
                "afterStart": {
                    "description": "If the resource is created after the start time then the event is treated as valid.",
                    "type": "boolean"
                },
                "createdBy": {
                    "description": "If resource is created before the specified time then the event is treated as valid.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "fields": {
                    "description": "Fields provide field filters similar to K8s field selector (see https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/). Unlike K8s field selector, it supports arbitrary fileds like \"spec.serviceAccountName\", and the value could be a string or a regex. Same as K8s field selector, operator \"=\", \"==\" and \"!=\" are supported.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Selector"
                    }
                },
                "labels": {
                    "description": "Labels provide listing options to K8s API to watch resource/s. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/ for more info. Unlike K8s field selector, multiple values are passed as comma separated values instead of list of values. Eg: value: value1,value2. Same as K8s label selector, operator \"=\", \"==\", \"!=\", \"exists\", \"!\", \"notin\", \"in\", \"gt\" and \"lt\" are supported",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Selector"
                    }
                },
                "prefix": {
                    "description": "Prefix filter is applied on the resource name.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SFTPEventSource": {
            "description": "SFTPEventSource describes an event-source for sftp related events.",
            "type": "object",
            "required": [
                "eventType",
                "watchPathConfig"
            ],
            "properties": {
                "address": {
                    "description": "Address sftp address.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "eventType": {
                    "description": "Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "password": {
                    "description": "Password required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "pollIntervalDuration": {
                    "description": "PollIntervalDuration the interval at which to poll the SFTP server defaults to 10 seconds",
                    "type": "string",
                    "default": ""
                },
                "sshKeySecret": {
                    "description": "SSHKeySecret refers to the secret that contains SSH key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "username": {
                    "description": "Username required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "watchPathConfig": {
                    "description": "WatchPathConfig contains configuration about the file path to watch",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WatchPathConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SFTPEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SNSEventSource": {
            "description": "SNSEventSource refers to event-source for AWS SNS related events",
            "type": "object",
            "required": [
                "topicArn",
                "region"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "Endpoint configures connection to a specific SNS endpoint instead of Amazons servers",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "topicArn": {
                    "description": "TopicArn",
                    "type": "string",
                    "default": ""
                },
                "validateSignature": {
                    "description": "ValidateSignature is boolean that can be set to true for SNS signature verification",
                    "type": "boolean"
                },
                "webhook": {
                    "description": "Webhook configuration for http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SNSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SQSEventSource": {
            "description": "SQSEventSource refers to event-source for AWS SQS related events",
            "type": "object",
            "required": [
                "region",
                "queue",
                "waitTimeSeconds"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "dlq": {
                    "description": "DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully. If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue. The default value is false.",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint configures connection to a specific SQS endpoint instead of Amazons servers",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queue": {
                    "description": "Queue is AWS SQS queue to listen to for messages",
                    "type": "string",
                    "default": ""
                },
                "queueAccountId": {
                    "description": "QueueAccountID is the ID of the account that created the queue to monitor",
                    "type": "string"
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sessionToken": {
                    "description": "SessionToken refers to K8s secret containing AWS temporary credentials(STS) session token",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "waitTimeSeconds": {
                    "description": "WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SQSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Selector": {
            "description": "Selector represents conditional operation to select K8s objects.",
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "description": "Key name",
                    "type": "string",
                    "default": ""
                },
                "operation": {
                    "description": "Supported operations like ==, != etc. Defaults to ==. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors for more info.",
                    "type": "string"
                },
                "value": {
                    "description": "Value",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Selector",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Service": {
            "description": "Service holds the service information eventsource exposes",
            "type": "object",
            "properties": {
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "string"
                },
                "ports": {
                    "description": "The list of ports that are exposed by this ClusterIP service.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "port",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "port",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Service",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SlackEventSource": {
            "description": "SlackEventSource refers to event-source for Slack related events",
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "signingSecret": {
                    "description": "Slack App signing secret",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "token": {
                    "description": "Token for URL verification handshake",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StorageGridEventSource": {
            "description": "StorageGridEventSource refers to event-source for StorageGrid related events",
            "type": "object",
            "required": [
                "topicArn",
                "bucket",
                "authToken",
                "apiURL"
            ],
            "properties": {
                "apiURL": {
                    "description": "APIURL is the url of the storagegrid api.",
                    "type": "string",
                    "default": ""
                },
                "authToken": {
                    "description": "Auth token for storagegrid api",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Name of the bucket to register notifications for.",
                    "type": "string",
                    "default": ""
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter on object key which caused the notification.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StorageGridFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "region": {
                    "description": "S3 region. Defaults to us-east-1",
                    "type": "string"
                },
                "topicArn": {
                    "description": "TopicArn",
                    "type": "string",
                    "default": ""
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StorageGridEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StorageGridFilter": {
            "description": "StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects",
            "type": "object",
            "required": [
                "prefix",
                "suffix"
            ],
            "properties": {
                "prefix": {
                    "type": "string",
                    "default": ""
                },
                "suffix": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StorageGridFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StripeEventSource": {
            "description": "StripeEventSource describes the event source for stripe webhook notifications More info at https://stripe.com/docs/webhooks",
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "APIKey refers to K8s secret that holds Stripe API key. Used only if CreateWebhook is enabled.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "createWebhook": {
                    "description": "CreateWebhook if specified creates a new webhook programmatically.",
                    "type": "boolean"
                },
                "eventFilter": {
                    "description": "EventFilter describes the type of events to listen to. If not specified, all types of events will be processed. More info at https://stripe.com/docs/api/events/list",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StripeEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Template": {
            "description": "Template holds the information of an EventSource deployment template",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "container": {
                    "description": "Container is the main container image to run in the event source pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run event source pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in an eventsource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WatchPathConfig": {
            "type": "object",
            "required": [
                "directory"
            ],
            "properties": {
                "directory": {
                    "description": "Directory to watch for events",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "Path is relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "pathRegexp": {
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WatchPathConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WebhookContext": {
            "description": "WebhookContext holds a general purpose REST API context",
            "type": "object",
            "required": [
                "endpoint",
                "method",
                "port",
                "url"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "REST API endpoint",
                    "type": "string",
                    "default": ""
                },
                "maxPayloadSize": {
                    "description": "MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with \"request too large\" response. Default value: 1048576 (1MB).",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
                    "type": "string",
                    "default": ""
                },
                "port": {
                    "description": "Port on which HTTP server is listening for incoming events.",
                    "type": "string",
                    "default": ""
                },
                "serverCertSecret": {
                    "description": "ServerCertPath refers the file that contains the cert.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "serverKeySecret": {
                    "description": "ServerKeyPath refers the file that contains private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL is the url of the server.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebhookContext",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WebhookEventSource": {
            "description": "CalendarEventSource describes an HTTP based EventSource",
            "type": "object",
            "required": [
                "endpoint",
                "method",
                "port",
                "url"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "REST API endpoint",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "maxPayloadSize": {
                    "description": "MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with \"request too large\" response. Default value: 1048576 (1MB).",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
                    "type": "string",
                    "default": ""
                },
                "port": {
                    "description": "Port on which HTTP server is listening for incoming events.",
                    "type": "string",
                    "default": ""
                },
                "serverCertSecret": {
                    "description": "ServerCertPath refers the file that contains the cert.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "serverKeySecret": {
                    "description": "ServerKeyPath refers the file that contains private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL is the url of the server.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebhookEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ALBStatus": {
            "type": "object",
            "properties": {
                "canaryTargetGroup": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AwsResourceRef"
                },
                "ingress": {
                    "type": "string"
                },
                "loadBalancer": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AwsResourceRef"
                },
                "stableTargetGroup": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AwsResourceRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ALBStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ALBTrafficRouting": {
            "description": "ALBTrafficRouting configuration for ALB ingress controller to control traffic routing",
            "type": "object",
            "required": [
                "servicePort"
            ],
            "properties": {
                "annotationPrefix": {
                    "description": "AnnotationPrefix has to match the configured annotation prefix on the alb ingress controller",
                    "type": "string"
                },
                "ingress": {
                    "description": "Ingress refers to the name of an `Ingress` resource in the same namespace as the `Rollout`",
                    "type": "string"
                },
                "ingresses": {
                    "description": "Ingresses refers to the name of an `Ingress` resource in the same namespace as the `Rollout` in a multi ingress scenario",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "rootService": {
                    "description": "RootService references the service in the ingress to the controller should add the action to",
                    "type": "string"
                },
                "servicePort": {
                    "description": "ServicePort refers to the port that the Ingress action should route traffic to",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "stickinessConfig": {
                    "description": "StickinessConfig refers to the duration-based stickiness of the target groups associated with an `Ingress`",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.StickinessConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ALBTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AmbassadorTrafficRouting": {
            "description": "AmbassadorTrafficRouting defines the configuration required to use Ambassador as traffic router",
            "type": "object",
            "required": [
                "mappings"
            ],
            "properties": {
                "mappings": {
                    "description": "Mappings refer to the name of the Ambassador Mappings used to route traffic to the service",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AmbassadorTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRun": {
            "description": "AnalysisRun is an instantiation of an AnalysisTemplate",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRun",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunArgument": {
            "description": "AnalysisRunArgument argument to add to analysisRun",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name argument name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value a hardcoded value for the argument. This field is a one of field with valueFrom",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "ValueFrom A reference to where the value is stored. This field is a one of field with valueFrom",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ArgumentValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunArgument",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunList": {
            "description": "AnalysisRunList is a list of AnalysisTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRun"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunMetadata": {
            "description": "AnalysisRunMetadata extra labels to add to the AnalysisRun",
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations additional annotations to add to the AnalysisRun",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "description": "Labels Additional labels to add to the AnalysisRun",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunSpec": {
            "description": "AnalysisRunSpec is the spec for a AnalysisRun resource",
            "type": "object",
            "required": [
                "metrics"
            ],
            "properties": {
                "args": {
                    "description": "Args are the list of arguments used in this run",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Argument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dryRun": {
                    "description": "DryRun object contains the settings for running the analysis in Dry-Run mode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DryRun"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "measurementRetention": {
                    "description": "MeasurementRetention object contains the settings for retaining the number of measurements during the analysis",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MeasurementRetention"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metrics": {
                    "description": "Metrics contains the list of metrics to query as part of an analysis run",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Metric"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "terminate": {
                    "description": "Terminate is used to prematurely stop the run (e.g. rollout completed and analysis is no longer desired)",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunStatus": {
            "description": "AnalysisRunStatus is the status for a AnalysisRun resource",
            "type": "object",
            "required": [
                "phase"
            ],
            "properties": {
                "dryRunSummary": {
                    "description": "DryRunSummary contains the final results from the metric executions in the dry-run mode",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RunSummary"
                },
                "message": {
                    "description": "Message is a message explaining current status",
                    "type": "string"
                },
                "metricResults": {
                    "description": "MetricResults contains the metrics collected during the run",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MetricResult"
                    }
                },
                "phase": {
                    "description": "Phase is the status of the analysis run",
                    "type": "string",
                    "default": ""
                },
                "runSummary": {
                    "description": "RunSummary contains the final results from the metric executions",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RunSummary"
                },
                "startedAt": {
                    "description": "StartedAt indicates when the analysisRun first started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisRunStrategy": {
            "description": "AnalysisRunStrategy configuration for the analysis runs and experiments to retain",
            "type": "object",
            "properties": {
                "successfulRunHistoryLimit": {
                    "description": "SuccessfulRunHistoryLimit limits the number of old successful analysis runs and experiments to be retained in a history",
                    "type": "integer",
                    "format": "int32"
                },
                "unsuccessfulRunHistoryLimit": {
                    "description": "UnsuccessfulRunHistoryLimit limits the number of old unsuccessful analysis runs and experiments to be retained in a history. Stages for unsuccessful: \"Error\", \"Failed\", \"Inconclusive\"",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisRunStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisTemplate": {
            "description": "AnalysisTemplate holds the template for performing canary analysis",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisTemplateList": {
            "description": "AnalysisTemplateList is a list of AnalysisTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AnalysisTemplateSpec": {
            "description": "AnalysisTemplateSpec is the specification for a AnalysisTemplate resource",
            "type": "object",
            "required": [
                "metrics"
            ],
            "properties": {
                "args": {
                    "description": "Args are the list of arguments to the template",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Argument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dryRun": {
                    "description": "DryRun object contains the settings for running the analysis in Dry-Run mode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DryRun"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "measurementRetention": {
                    "description": "MeasurementRetention object contains the settings for retaining the number of measurements during the analysis",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MeasurementRetention"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metrics": {
                    "description": "Metrics contains the list of metrics to query as part of an analysis run",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Metric"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AnalysisTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AntiAffinity": {
            "description": "AntiAffinity defines which inter-pod scheduling rule to use for anti-affinity injection",
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PreferredDuringSchedulingIgnoredDuringExecution"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RequiredDuringSchedulingIgnoredDuringExecution"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AntiAffinity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ApisixRoute": {
            "description": "ApisixRoute holds information on the APISIX Route the rollout needs to modify",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name refer to the name of the APISIX Route used to route traffic to the service",
                    "type": "string",
                    "default": ""
                },
                "rules": {
                    "description": "RuleRef a list of the APISIX Route HTTP Rules used to route traffic to the service",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApisixRoute",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ApisixTrafficRouting": {
            "description": "ApisixTrafficRouting defines the configuration required to use APISIX as traffic router",
            "type": "object",
            "properties": {
                "route": {
                    "description": "Route references an Apisix Route to modify to shape traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ApisixRoute"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ApisixTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AppMeshTrafficRouting": {
            "description": "AppMeshTrafficRouting configuration for AWS AppMesh service mesh to enable fine grain configuration",
            "type": "object",
            "properties": {
                "virtualNodeGroup": {
                    "description": "VirtualNodeGroup references an AppMesh Route targets that are formed by a set of VirtualNodes that are used to shape traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AppMeshVirtualNodeGroup"
                },
                "virtualService": {
                    "description": "VirtualService references an AppMesh VirtualService and VirtualRouter to modify to shape traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AppMeshVirtualService"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppMeshTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AppMeshVirtualNodeGroup": {
            "description": "AppMeshVirtualNodeGroup holds information about targets used for routing traffic to a virtual service",
            "type": "object",
            "required": [
                "canaryVirtualNodeRef",
                "stableVirtualNodeRef"
            ],
            "properties": {
                "canaryVirtualNodeRef": {
                    "description": "CanaryVirtualNodeRef is the virtual node ref to modify labels with canary ReplicaSet pod template hash value",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AppMeshVirtualNodeReference"
                },
                "stableVirtualNodeRef": {
                    "description": "StableVirtualNodeRef is the virtual node name to modify labels with stable ReplicaSet pod template hash value",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AppMeshVirtualNodeReference"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppMeshVirtualNodeGroup",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AppMeshVirtualNodeReference": {
            "description": "AppMeshVirtualNodeReference holds a reference to VirtualNode.appmesh.k8s.aws",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of VirtualNode CR",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppMeshVirtualNodeReference",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AppMeshVirtualService": {
            "description": "AppMeshVirtualService holds information on the virtual service the rollout needs to modify",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of virtual service",
                    "type": "string",
                    "default": ""
                },
                "routes": {
                    "description": "Routes is list of HTTP routes within virtual router associated with virtual service to edit. If omitted, virtual service must have a single route of this type.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AppMeshVirtualService",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Argument": {
            "description": "Argument is an argument to an AnalysisRun",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the argument",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the value of the argument",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "ValueFrom is a reference to where a secret is stored. This field is one of the fields with valueFrom",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Argument",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ArgumentValueFrom": {
            "description": "ArgumentValueFrom defines references to fields within resources to grab for the value (i.e. Pod Template Hash)",
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "FieldRef",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.FieldRef"
                },
                "podTemplateHashValue": {
                    "description": "PodTemplateHashValue gets the value from one of the children ReplicaSet's Pod Template Hash",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArgumentValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.AwsResourceRef": {
            "type": "object",
            "required": [
                "name",
                "arn"
            ],
            "properties": {
                "arn": {
                    "type": "string",
                    "default": ""
                },
                "fullName": {
                    "description": "FullName is the full name of the resource",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AwsResourceRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.BlueGreenStatus": {
            "description": "BlueGreenStatus status fields that only pertain to the blueGreen rollout",
            "type": "object",
            "properties": {
                "activeSelector": {
                    "description": "ActiveSelector indicates which replicas set the active service is serving traffic to",
                    "type": "string"
                },
                "postPromotionAnalysisRunStatus": {
                    "description": "PostPromotionAnalysisRunStatus indicates the status of the current post promotion analysis run",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisRunStatus"
                },
                "prePromotionAnalysisRunStatus": {
                    "description": "PrePromotionAnalysisRunStatus indicates the status of the current prepromotion analysis run",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisRunStatus"
                },
                "previewSelector": {
                    "description": "PreviewSelector indicates which replicas set the preview service is serving traffic to",
                    "type": "string"
                },
                "scaleUpPreviewCheckPoint": {
                    "description": "ScaleUpPreviewCheckPoint indicates that the Replicaset receiving traffic from the preview service is ready to be scaled up after the rollout is unpaused",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BlueGreenStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.BlueGreenStrategy": {
            "description": "BlueGreenStrategy defines parameters for Blue Green deployment",
            "type": "object",
            "required": [
                "activeService"
            ],
            "properties": {
                "abortScaleDownDelaySeconds": {
                    "description": "AbortScaleDownDelaySeconds adds a delay in second before scaling down the preview replicaset if update is aborted. 0 means not to scale down. Default is 30 second",
                    "type": "integer",
                    "format": "int32"
                },
                "activeMetadata": {
                    "description": "ActiveMetadata specify labels and annotations which will be attached to the active pods for the duration which they act as a active pod, and will be removed after",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PodTemplateMetadata"
                },
                "activeService": {
                    "description": "Name of the service that the rollout modifies as the active service.",
                    "type": "string",
                    "default": ""
                },
                "antiAffinity": {
                    "description": "AntiAffinity enables anti-affinity rules for Blue Green deployment",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AntiAffinity"
                },
                "autoPromotionEnabled": {
                    "description": "AutoPromotionEnabled indicates if the rollout should automatically promote the new ReplicaSet to the active service or enter a paused state. If not specified, the default value is true.",
                    "type": "boolean"
                },
                "autoPromotionSeconds": {
                    "description": "AutoPromotionSeconds is a duration in seconds in which to delay auto-promotion (default: 0). The countdown begins after the preview ReplicaSet have reached full availability. This option is ignored if autoPromotionEnabled is set to false.",
                    "type": "integer",
                    "format": "int32"
                },
                "maxUnavailable": {
                    "description": "MaxUnavailable The maximum number of pods that can be unavailable during a restart operation. Defaults to 25% of total replicas.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "postPromotionAnalysis": {
                    "description": "PostPromotionAnalysis configuration to run analysis after a selector switch",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysis"
                },
                "prePromotionAnalysis": {
                    "description": "PrePromotionAnalysis configuration to run analysis before a selector switch",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysis"
                },
                "previewMetadata": {
                    "description": "PreviewMetadata specify labels and annotations which will be attached to the preview pods for the duration which they act as a preview pod, and will be removed after",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PodTemplateMetadata"
                },
                "previewReplicaCount": {
                    "description": "PreviewReplicaCount is the number of replicas to run for the preview stack before the switchover. Once the rollout is resumed the desired replicaset will be full scaled up before the switch occurs",
                    "type": "integer",
                    "format": "int32"
                },
                "previewService": {
                    "description": "Name of the service that the rollout modifies as the preview service.",
                    "type": "string"
                },
                "scaleDownDelayRevisionLimit": {
                    "description": "ScaleDownDelayRevisionLimit limits the number of old RS that can run at one time before getting scaled down",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleDownDelaySeconds": {
                    "description": "ScaleDownDelaySeconds adds a delay before scaling down the previous replicaset. If omitted, the Rollout waits 30 seconds before scaling down the previous ReplicaSet. A minimum of 30 seconds is recommended to ensure IP table propagation across the nodes in a cluster. See https://github.com/argoproj/argo-rollouts/issues/19#issuecomment-476329960 for more information",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BlueGreenStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CanaryStatus": {
            "description": "CanaryStatus status fields that only pertain to the canary rollout",
            "type": "object",
            "properties": {
                "currentBackgroundAnalysisRunStatus": {
                    "description": "CurrentBackgroundAnalysisRunStatus indicates the status of the current background analysis run",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisRunStatus"
                },
                "currentExperiment": {
                    "description": "CurrentExperiment indicates the running experiment",
                    "type": "string"
                },
                "currentStepAnalysisRunStatus": {
                    "description": "CurrentStepAnalysisRunStatus indicates the status of the current step analysis run",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisRunStatus"
                },
                "stablePingPong": {
                    "description": "StablePingPong For the ping-pong feature holds the current stable service, ping or pong",
                    "type": "string"
                },
                "weights": {
                    "description": "Weights records the weights which have been set on traffic provider. Only valid when using traffic routing",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TrafficWeights"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CanaryStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CanaryStep": {
            "description": "CanaryStep defines a step of a canary deployment.",
            "type": "object",
            "properties": {
                "analysis": {
                    "description": "Analysis defines the AnalysisRun that will run for a step",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysis"
                },
                "experiment": {
                    "description": "Experiment defines the experiment object that should be created",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutExperimentStep"
                },
                "pause": {
                    "description": "Pause freezes the rollout by setting spec.Paused to true. A Rollout will resume when spec.Paused is reset to false.",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutPause"
                },
                "setCanaryScale": {
                    "description": "SetCanaryScale defines how to scale the newRS without changing traffic weight",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SetCanaryScale"
                },
                "setHeaderRoute": {
                    "description": "SetHeaderRoute defines the route with specified header name to send 100% of traffic to the canary service",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SetHeaderRoute"
                },
                "setMirrorRoute": {
                    "description": "SetMirrorRoutes Mirrors traffic that matches rules to a particular destination",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SetMirrorRoute"
                },
                "setWeight": {
                    "description": "SetWeight sets what percentage of the newRS should receive",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CanaryStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CanaryStrategy": {
            "description": "CanaryStrategy defines parameters for a Replica Based Canary",
            "type": "object",
            "properties": {
                "abortScaleDownDelaySeconds": {
                    "description": "AbortScaleDownDelaySeconds adds a delay in second before scaling down the canary pods when update is aborted for canary strategy with traffic routing (not applicable for basic canary). 0 means canary pods are not scaled down. Default is 30 seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "analysis": {
                    "description": "Analysis runs a separate analysisRun while all the steps execute. This is intended to be a continuous validation of the new ReplicaSet",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisBackground"
                },
                "antiAffinity": {
                    "description": "AntiAffinity enables anti-affinity rules for Canary deployment",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AntiAffinity"
                },
                "canaryMetadata": {
                    "description": "CanaryMetadata specify labels and annotations which will be attached to the canary pods for the duration which they act as a canary, and will be removed after",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PodTemplateMetadata"
                },
                "canaryService": {
                    "description": "CanaryService holds the name of a service which selects pods with canary version and don't select any pods with stable version.",
                    "type": "string"
                },
                "dynamicStableScale": {
                    "description": "DynamicStableScale is a traffic routing feature which dynamically scales the stable ReplicaSet to minimize total pods which are running during an update. This is calculated by scaling down the stable as traffic is increased to canary. When disabled (the default behavior) the stable ReplicaSet remains fully scaled to support instantaneous aborts.",
                    "type": "boolean"
                },
                "maxSurge": {
                    "description": "MaxSurge The maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 25% is used. Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of original pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "MaxUnavailable The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 25% is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minPodsPerReplicaSet": {
                    "description": "Assuming the desired number of pods in a stable or canary ReplicaSet is not zero, then make sure it is at least MinPodsPerReplicaSet for High Availability. Only applicable for TrafficRoutedCanary",
                    "type": "integer",
                    "format": "int32"
                },
                "pingPong": {
                    "description": "PingPongSpec holds the ping and pong services",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PingPongSpec"
                },
                "scaleDownDelayRevisionLimit": {
                    "description": "ScaleDownDelayRevisionLimit limits the number of old RS that can run at one time before getting scaled down",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleDownDelaySeconds": {
                    "description": "ScaleDownDelaySeconds adds a delay before scaling down the previous ReplicaSet when the canary strategy is used with traffic routing (default 30 seconds). A delay in scaling down the previous ReplicaSet is needed after switching the stable service selector to point to the new ReplicaSet, in order to give time for traffic providers to re-target the new pods. This value is ignored with basic, replica-weighted canary without traffic routing.",
                    "type": "integer",
                    "format": "int32"
                },
                "stableMetadata": {
                    "description": "StableMetadata specify labels and annotations which will be attached to the stable pods for the duration which they act as a canary, and will be removed after",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PodTemplateMetadata"
                },
                "stableService": {
                    "description": "StableService holds the name of a service which selects pods with stable version and don't select any pods with canary version.",
                    "type": "string"
                },
                "steps": {
                    "description": "Steps define the order of phases to execute the canary deployment",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CanaryStep"
                    }
                },
                "trafficRouting": {
                    "description": "TrafficRouting hosts all the supported service meshes supported to enable more fine-grained traffic routing",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutTrafficRouting"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CanaryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CloudWatchMetric": {
            "description": "CloudWatchMetric defines the cloudwatch query to perform canary analysis",
            "type": "object",
            "required": [
                "metricDataQueries"
            ],
            "properties": {
                "interval": {
                    "type": "string"
                },
                "metricDataQueries": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CloudWatchMetricDataQuery"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CloudWatchMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CloudWatchMetricDataQuery": {
            "description": "CloudWatchMetricDataQuery defines the cloudwatch query",
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "metricStat": {
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CloudWatchMetricStat"
                },
                "period": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "returnData": {
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CloudWatchMetricDataQuery",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CloudWatchMetricStat": {
            "type": "object",
            "properties": {
                "metric": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CloudWatchMetricStatMetric"
                },
                "period": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "stat": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CloudWatchMetricStat",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CloudWatchMetricStatMetric": {
            "type": "object",
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CloudWatchMetricStatMetricDimension"
                    }
                },
                "metricName": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CloudWatchMetricStatMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.CloudWatchMetricStatMetricDimension": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CloudWatchMetricStatMetricDimension",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ClusterAnalysisTemplate": {
            "description": "ClusterAnalysisTemplate holds the template for performing canary analysis",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterAnalysisTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ClusterAnalysisTemplateList": {
            "description": "AnalysisTemplateList is a list of AnalysisTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ClusterAnalysisTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterAnalysisTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.DatadogMetric": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "apiVersion": {
                    "description": "ApiVersion refers to the Datadog API version being used (default: v1). v1 will eventually be deprecated.",
                    "type": "string"
                },
                "interval": {
                    "type": "string"
                },
                "query": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DatadogMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.DryRun": {
            "description": "DryRun defines the settings for running the analysis in Dry-Run mode.",
            "type": "object",
            "required": [
                "metricName"
            ],
            "properties": {
                "metricName": {
                    "description": "Name of the metric which needs to be evaluated in the Dry-Run mode. Wildcard '*' is supported and denotes all the available metrics.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DryRun",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Experiment": {
            "description": "Experiment is a specification for an Experiment resource",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ExperimentSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ExperimentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Experiment",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentAnalysisRunStatus": {
            "type": "object",
            "required": [
                "name",
                "analysisRun",
                "phase"
            ],
            "properties": {
                "analysisRun": {
                    "description": "AnalysisRun is the name of the AnalysisRun",
                    "type": "string",
                    "default": ""
                },
                "message": {
                    "description": "Message is a message explaining the current status",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the analysis",
                    "type": "string",
                    "default": ""
                },
                "phase": {
                    "description": "Phase is the status of the AnalysisRun",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentAnalysisRunStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentAnalysisTemplateRef": {
            "type": "object",
            "required": [
                "name",
                "templateName"
            ],
            "properties": {
                "args": {
                    "description": "Args are the arguments that will be added to the AnalysisRuns",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Argument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "clusterScope": {
                    "description": "Whether to look for the templateName at cluster scope or namespace scope",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the name of the analysis",
                    "type": "string",
                    "default": ""
                },
                "requiredForCompletion": {
                    "description": "RequiredForCompletion blocks the Experiment from completing until the analysis has completed",
                    "type": "boolean"
                },
                "templateName": {
                    "description": "TemplateName reference of the AnalysisTemplate name used by the Experiment to create the run",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentAnalysisTemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentCondition": {
            "description": "ExperimentCondition describes the state of a experiment at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status",
                "lastUpdateTime",
                "lastTransitionTime",
                "reason",
                "message"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string",
                    "default": ""
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "Phase of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentList": {
            "description": "ExperimentList is a list of Experiment resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Experiment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentSpec": {
            "description": "ExperimentSpec is the spec for a Experiment resource",
            "type": "object",
            "required": [
                "templates"
            ],
            "properties": {
                "analyses": {
                    "description": "Analyses references AnalysisTemplates to run during the experiment",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ExperimentAnalysisTemplateRef"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dryRun": {
                    "description": "DryRun object contains the settings for running the analysis in Dry-Run mode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DryRun"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "duration": {
                    "description": "Duration the amount of time for the experiment to run as a duration string (e.g. 30s, 5m, 1h). If omitted, the experiment will run indefinitely, stopped either via termination, or a failed analysis run.",
                    "type": "string"
                },
                "measurementRetention": {
                    "description": "MeasurementRetention object contains the settings for retaining the number of measurements during the analysis",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MeasurementRetention"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "progressDeadlineSeconds": {
                    "description": "ProgressDeadlineSeconds The maximum time in seconds for a experiment to make progress before it is considered to be failed. Argo Rollouts will continue to process failed experiments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the experiment status. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleDownDelaySeconds": {
                    "description": "ScaleDownDelaySeconds adds a delay before scaling down the Experiment. If omitted, the Experiment waits 30 seconds before scaling down. A minimum of 30 seconds is recommended to ensure IP table propagation across the nodes in a cluster. See https://github.com/argoproj/argo-rollouts/issues/19#issuecomment-476329960 for more information",
                    "type": "integer",
                    "format": "int32"
                },
                "templates": {
                    "description": "Templates are a list of PodSpecs that define the ReplicaSets that should be run during an experiment.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TemplateSpec"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "terminate": {
                    "description": "Terminate is used to prematurely stop the experiment",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ExperimentStatus": {
            "description": "ExperimentStatus is the status for a Experiment resource",
            "type": "object",
            "properties": {
                "analysisRuns": {
                    "description": "AnalysisRuns tracks the status of AnalysisRuns associated with this Experiment",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ExperimentAnalysisRunStatus"
                    }
                },
                "availableAt": {
                    "description": "AvailableAt the time when all the templates become healthy and the experiment should start tracking the time to run for the duration of specificed in the spec.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "conditions": {
                    "description": "Conditions a list of conditions a experiment can have.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ExperimentCondition"
                    }
                },
                "message": {
                    "description": "Message is an explanation for the current status",
                    "type": "string"
                },
                "phase": {
                    "description": "Phase is the status of the experiment. Takes into consideration ReplicaSet degradations and AnalysisRun statuses",
                    "type": "string"
                },
                "templateStatuses": {
                    "description": "TemplateStatuses holds the ReplicaSet related statuses for individual templates",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TemplateStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExperimentStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.FieldRef": {
            "type": "object",
            "required": [
                "fieldPath"
            ],
            "properties": {
                "fieldPath": {
                    "description": "Required: Path of the field to select in the specified API version",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "FieldRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.GraphiteMetric": {
            "description": "GraphiteMetric defines the Graphite query to perform canary analysis",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the HTTP address and port of the Graphite server",
                    "type": "string"
                },
                "query": {
                    "description": "Query is a raw Graphite query to perform",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GraphiteMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.HeaderRoutingMatch": {
            "type": "object",
            "required": [
                "headerName",
                "headerValue"
            ],
            "properties": {
                "headerName": {
                    "description": "HeaderName the name of the request header",
                    "type": "string",
                    "default": ""
                },
                "headerValue": {
                    "description": "HeaderValue the value of the header",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.StringMatch"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HeaderRoutingMatch",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.InfluxdbMetric": {
            "description": "InfluxdbMetric defines the InfluxDB Flux query to perform canary analysis",
            "type": "object",
            "properties": {
                "profile": {
                    "description": "Profile is the name of the secret holding InfluxDB account configuration",
                    "type": "string"
                },
                "query": {
                    "description": "Query is a raw InfluxDB flux query to perform",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "InfluxdbMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.IstioDestinationRule": {
            "description": "IstioDestinationRule is a reference to an Istio DestinationRule to modify and shape traffic",
            "type": "object",
            "required": [
                "name",
                "canarySubsetName",
                "stableSubsetName"
            ],
            "properties": {
                "canarySubsetName": {
                    "description": "CanarySubsetName is the subset name to modify labels with canary ReplicaSet pod template hash value",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name holds the name of the DestinationRule",
                    "type": "string",
                    "default": ""
                },
                "stableSubsetName": {
                    "description": "StableSubsetName is the subset name to modify labels with stable ReplicaSet pod template hash value",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "IstioDestinationRule",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.IstioTrafficRouting": {
            "description": "IstioTrafficRouting configuration for Istio service mesh to enable fine grain configuration",
            "type": "object",
            "properties": {
                "destinationRule": {
                    "description": "DestinationRule references an Istio DestinationRule to modify to shape traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.IstioDestinationRule"
                },
                "virtualService": {
                    "description": "VirtualService references an Istio VirtualService to modify to shape traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.IstioVirtualService"
                },
                "virtualServices": {
                    "description": "VirtualServices references a list of Istio VirtualService to modify to shape traffic",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.IstioVirtualService"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "IstioTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.IstioVirtualService": {
            "description": "IstioVirtualService holds information on the virtual service the rollout needs to modify",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name holds the name of the VirtualService",
                    "type": "string",
                    "default": ""
                },
                "routes": {
                    "description": "A list of HTTP routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tcpRoutes": {
                    "description": "A list of TCP routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TCPRoute"
                    }
                },
                "tlsRoutes": {
                    "description": "A list of TLS/HTTPS routes within VirtualService to edit. If omitted, VirtualService must have a single route of this type.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TLSRoute"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "IstioVirtualService",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.JobMetric": {
            "description": "JobMetric defines a job to run which acts as a metric",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JobMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.KayentaMetric": {
            "type": "object",
            "required": [
                "address",
                "application",
                "canaryConfigName",
                "metricsAccountName",
                "configurationAccountName",
                "storageAccountName",
                "threshold",
                "scopes"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "default": ""
                },
                "application": {
                    "type": "string",
                    "default": ""
                },
                "canaryConfigName": {
                    "type": "string",
                    "default": ""
                },
                "configurationAccountName": {
                    "type": "string",
                    "default": ""
                },
                "metricsAccountName": {
                    "type": "string",
                    "default": ""
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.KayentaScope"
                    }
                },
                "storageAccountName": {
                    "type": "string",
                    "default": ""
                },
                "threshold": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.KayentaThreshold"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KayentaMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.KayentaScope": {
            "type": "object",
            "required": [
                "name",
                "controlScope",
                "experimentScope"
            ],
            "properties": {
                "controlScope": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ScopeDetail"
                },
                "experimentScope": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ScopeDetail"
                },
                "name": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KayentaScope",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.KayentaThreshold": {
            "type": "object",
            "required": [
                "pass",
                "marginal"
            ],
            "properties": {
                "marginal": {
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "pass": {
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KayentaThreshold",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.MangedRoutes": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MangedRoutes",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Measurement": {
            "description": "Measurement is a point in time result value of a single metric, and the time it was measured",
            "type": "object",
            "required": [
                "phase"
            ],
            "properties": {
                "finishedAt": {
                    "description": "FinishedAt is the timestamp in which this measurement completed and value was collected",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message contains a message describing current condition (e.g. error messages)",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata stores additional metadata about this metric result, used by the different providers (e.g. kayenta run ID, job name)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "phase": {
                    "description": "Phase is the status of this single measurement",
                    "type": "string",
                    "default": ""
                },
                "resumeAt": {
                    "description": "ResumeAt is the  timestamp when the analysisRun should try to resume the measurement",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "startedAt": {
                    "description": "StartedAt is the timestamp in which this measurement started to be measured",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "value": {
                    "description": "Value is the measured value of the metric",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Measurement",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.MeasurementRetention": {
            "description": "MeasurementRetention defines the settings for retaining the number of measurements during the analysis.",
            "type": "object",
            "required": [
                "metricName",
                "limit"
            ],
            "properties": {
                "limit": {
                    "description": "Limit is the maximum number of measurements to be retained for this given metric.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "metricName": {
                    "description": "MetricName is the name of the metric on which this retention policy should be applied.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MeasurementRetention",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Metric": {
            "description": "Metric defines a metric in which to perform analysis",
            "type": "object",
            "required": [
                "name",
                "provider"
            ],
            "properties": {
                "consecutiveErrorLimit": {
                    "description": "ConsecutiveErrorLimit is the maximum number of times the measurement is allowed to error in succession, before the metric is considered error (default: 4)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "count": {
                    "description": "Count is the number of times to run the measurement. If both interval and count are omitted, the effective count is 1. If only interval is specified, metric runs indefinitely. If count \u003e 1, interval must be specified.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "failureCondition": {
                    "description": "FailureCondition is an expression which determines if a measurement is considered failed If both success and failure conditions are specified, and the measurement does not fall into either condition, the measurement is considered Inconclusive",
                    "type": "string"
                },
                "failureLimit": {
                    "description": "FailureLimit is the maximum number of times the measurement is allowed to fail, before the entire metric is considered Failed (default: 0)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "inconclusiveLimit": {
                    "description": "InconclusiveLimit is the maximum number of times the measurement is allowed to measure Inconclusive, before the entire metric is considered Inconclusive (default: 0)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "initialDelay": {
                    "description": "InitialDelay how long the AnalysisRun should wait before starting this metric",
                    "type": "string"
                },
                "interval": {
                    "description": "Interval defines an interval string (e.g. 30s, 5m, 1h) between each measurement. If omitted, will perform a single measurement",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the metric",
                    "type": "string",
                    "default": ""
                },
                "provider": {
                    "description": "Provider configuration to the external system to use to verify the analysis",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MetricProvider"
                },
                "successCondition": {
                    "description": "SuccessCondition is an expression which determines if a measurement is considered successful Expression is a goevaluate expression. The keyword `result` is a variable reference to the value of measurement. Results can be both structured data or primitive. Examples:\n  result \u003e 10\n  (result.requests_made * result.requests_succeeded / 100) \u003e= 90",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Metric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.MetricProvider": {
            "description": "MetricProvider which external system to use to verify the analysis Only one of the fields in this struct should be non-nil",
            "type": "object",
            "properties": {
                "cloudWatch": {
                    "description": "CloudWatch specifies the cloudWatch metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CloudWatchMetric"
                },
                "datadog": {
                    "description": "Datadog specifies a datadog metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DatadogMetric"
                },
                "graphite": {
                    "description": "Graphite specifies the Graphite metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.GraphiteMetric"
                },
                "influxdb": {
                    "description": "Influxdb specifies the influxdb metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.InfluxdbMetric"
                },
                "job": {
                    "description": "Job specifies the job metric run",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.JobMetric"
                },
                "kayenta": {
                    "description": "Kayenta specifies a Kayenta metric",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.KayentaMetric"
                },
                "newRelic": {
                    "description": "NewRelic specifies the newrelic metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.NewRelicMetric"
                },
                "plugin": {
                    "description": "Plugin specifies the hashicorp go-plugin metric to query",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "prometheus": {
                    "description": "Prometheus specifies the prometheus metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PrometheusMetric"
                },
                "skywalking": {
                    "description": "SkyWalking specifies the skywalking metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SkyWalkingMetric"
                },
                "wavefront": {
                    "description": "Wavefront specifies the wavefront metric to query",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WavefrontMetric"
                },
                "web": {
                    "description": "Web specifies a generic HTTP web metric",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WebMetric"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MetricProvider",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.MetricResult": {
            "description": "MetricResult contain a list of the most recent measurements for a single metric along with counters on how often the measurement",
            "type": "object",
            "required": [
                "name",
                "phase"
            ],
            "properties": {
                "consecutiveError": {
                    "description": "ConsecutiveError is the number of times an error was encountered during measurement in succession Resets to zero when non-errors are encountered",
                    "type": "integer",
                    "format": "int32"
                },
                "count": {
                    "description": "Count is the number of times the metric was measured without Error This is equal to the sum of Successful, Failed, Inconclusive",
                    "type": "integer",
                    "format": "int32"
                },
                "dryRun": {
                    "description": "DryRun indicates whether this metric is running in a dry-run mode or not",
                    "type": "boolean"
                },
                "error": {
                    "description": "Error is the number of times an error was encountered during measurement",
                    "type": "integer",
                    "format": "int32"
                },
                "failed": {
                    "description": "Failed is the number of times the metric was measured Failed",
                    "type": "integer",
                    "format": "int32"
                },
                "inconclusive": {
                    "description": "Inconclusive is the number of times the metric was measured Inconclusive",
                    "type": "integer",
                    "format": "int32"
                },
                "measurements": {
                    "description": "Measurements holds the most recent measurements collected for the metric",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Measurement"
                    }
                },
                "message": {
                    "description": "Message contains a message describing current condition (e.g. error messages)",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata stores additional metadata about this metric. It is used by different providers to store the final state which gets used while taking measurements. For example, Prometheus uses this field to store the final resolved query after substituting the template arguments.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "name": {
                    "description": "Name is the name of the metric",
                    "type": "string",
                    "default": ""
                },
                "phase": {
                    "description": "Phase is the overall aggregate status of the metric",
                    "type": "string",
                    "default": ""
                },
                "successful": {
                    "description": "Successful is the number of times the metric was measured Successful",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MetricResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.NewRelicMetric": {
            "description": "NewRelicMetric defines the newrelic query to perform canary analysis",
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "profile": {
                    "description": "Profile is the name of the secret holding NR account configuration",
                    "type": "string"
                },
                "query": {
                    "description": "Query is a raw newrelic NRQL query to perform",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NewRelicMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.NginxTrafficRouting": {
            "description": "NginxTrafficRouting configuration for Nginx ingress controller to control traffic routing",
            "type": "object",
            "properties": {
                "additionalIngressAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "annotationPrefix": {
                    "description": "AnnotationPrefix has to match the configured annotation prefix on the nginx ingress controller",
                    "type": "string"
                },
                "stableIngress": {
                    "description": "StableIngress refers to the name of an `Ingress` resource in the same namespace as the `Rollout`",
                    "type": "string"
                },
                "stableIngresses": {
                    "description": "StableIngresses refers to the names of `Ingress` resources in the same namespace as the `Rollout` in a multi ingress scenario",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NginxTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ObjectRef": {
            "description": "ObjectRef holds a references to the Kubernetes object",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API Version of the referent",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ObjectRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PauseCondition": {
            "description": "PauseCondition the reason for a pause and when it started",
            "type": "object",
            "required": [
                "reason",
                "startTime"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "default": ""
                },
                "startTime": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PauseCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PingPongSpec": {
            "description": "PingPongSpec holds the ping and pong service name.",
            "type": "object",
            "required": [
                "pingService",
                "pongService"
            ],
            "properties": {
                "pingService": {
                    "description": "name of the ping service",
                    "type": "string",
                    "default": ""
                },
                "pongService": {
                    "description": "name of the pong service",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PingPongSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PodTemplateMetadata": {
            "description": "PodTemplateMetadata extra labels to add to the template",
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations additional annotations to add to the experiment",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "description": "Labels Additional labels to add to the experiment",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PodTemplateMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PreferredDuringSchedulingIgnoredDuringExecution": {
            "description": "PreferredDuringSchedulingIgnoredDuringExecution defines the weight of the anti-affinity injection",
            "type": "object",
            "required": [
                "weight"
            ],
            "properties": {
                "weight": {
                    "description": "Weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PreferredDuringSchedulingIgnoredDuringExecution",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PrometheusAuth": {
            "description": "PrometheusMetric defines the prometheus query to perform canary analysis",
            "type": "object",
            "properties": {
                "sigv4": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Sigv4Config"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PrometheusAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.PrometheusMetric": {
            "description": "PrometheusMetric defines the prometheus query to perform canary analysis",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the HTTP address and port of the prometheus server",
                    "type": "string"
                },
                "authentication": {
                    "description": "Sigv4 Config is the aws SigV4 configuration to use for SigV4 signing if using Amazon Managed Prometheus",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PrometheusAuth"
                },
                "headers": {
                    "description": "Headers are optional HTTP headers to use in the request",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WebMetricHeader"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "insecure": {
                    "description": "Insecure skips host TLS verification",
                    "type": "boolean"
                },
                "query": {
                    "description": "Query is a raw prometheus query to perform",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout represents the duration within which a prometheus query should complete. It is expressed in seconds.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PrometheusMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RequiredDuringSchedulingIgnoredDuringExecution": {
            "description": "RequiredDuringSchedulingIgnoredDuringExecution defines inter-pod scheduling rule to be RequiredDuringSchedulingIgnoredDuringExecution",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RequiredDuringSchedulingIgnoredDuringExecution",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RollbackWindowSpec": {
            "type": "object",
            "properties": {
                "revisions": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RollbackWindowSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Rollout": {
            "description": "Rollout is a specification for a Rollout resource",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Rollout",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutAnalysis": {
            "description": "RolloutAnalysis defines a template that is used to create a analysisRun",
            "type": "object",
            "properties": {
                "analysisRunMetadata": {
                    "description": "AnalysisRunMetadata labels and annotations that will be added to the AnalysisRuns",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunMetadata"
                },
                "args": {
                    "description": "Args the arguments that will be added to the AnalysisRuns",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunArgument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dryRun": {
                    "description": "DryRun object contains the settings for running the analysis in Dry-Run mode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DryRun"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "measurementRetention": {
                    "description": "MeasurementRetention object contains the settings for retaining the number of measurements during the analysis",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MeasurementRetention"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "templates": {
                    "description": "Templates reference to a list of analysis templates to combine for an AnalysisRun",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisTemplate"
                    },
                    "x-kubernetes-patch-merge-key": "templateName",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutAnalysis",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutAnalysisBackground": {
            "description": "RolloutAnalysisBackground defines a template that is used to create a background analysisRun",
            "type": "object",
            "properties": {
                "analysisRunMetadata": {
                    "description": "AnalysisRunMetadata labels and annotations that will be added to the AnalysisRuns",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunMetadata"
                },
                "args": {
                    "description": "Args the arguments that will be added to the AnalysisRuns",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunArgument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dryRun": {
                    "description": "DryRun object contains the settings for running the analysis in Dry-Run mode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.DryRun"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "measurementRetention": {
                    "description": "MeasurementRetention object contains the settings for retaining the number of measurements during the analysis",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MeasurementRetention"
                    },
                    "x-kubernetes-patch-merge-key": "metricName",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "startingStep": {
                    "description": "StartingStep indicates which step the background analysis should start on If not listed, controller defaults to 0",
                    "type": "integer",
                    "format": "int32"
                },
                "templates": {
                    "description": "Templates reference to a list of analysis templates to combine for an AnalysisRun",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutAnalysisTemplate"
                    },
                    "x-kubernetes-patch-merge-key": "templateName",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutAnalysisBackground",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutAnalysisRunStatus": {
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutAnalysisRunStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutAnalysisTemplate": {
            "type": "object",
            "properties": {
                "clusterScope": {
                    "description": "Whether to look for the templateName at cluster scope or namespace scope",
                    "type": "boolean"
                },
                "templateName": {
                    "description": "TemplateName name of template to use in AnalysisRun",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutAnalysisTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutCondition": {
            "description": "RolloutCondition describes the state of a rollout at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status",
                "lastUpdateTime",
                "lastTransitionTime",
                "reason",
                "message"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string",
                    "default": ""
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "Phase of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutExperimentStep": {
            "description": "RolloutExperimentStep defines a template that is used to create a experiment for a step",
            "type": "object",
            "required": [
                "templates"
            ],
            "properties": {
                "analyses": {
                    "description": "Analyses reference which analysis templates to run with the experiment",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutExperimentStepAnalysisTemplateRef"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "duration": {
                    "description": "Duration is a duration string (e.g. 30s, 5m, 1h) that the experiment should run for",
                    "type": "string"
                },
                "templates": {
                    "description": "Templates what templates that should be added to the experiment. Should be non-nil",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutExperimentTemplate"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutExperimentStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutExperimentStepAnalysisTemplateRef": {
            "type": "object",
            "required": [
                "name",
                "templateName"
            ],
            "properties": {
                "args": {
                    "description": "Args the arguments that will be added to the AnalysisRuns",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunArgument"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "clusterScope": {
                    "description": "Whether to look for the templateName at cluster scope or namespace scope",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is a name for this analysis template invocation",
                    "type": "string",
                    "default": ""
                },
                "requiredForCompletion": {
                    "description": "RequiredForCompletion blocks the Experiment from completing until the analysis has completed",
                    "type": "boolean"
                },
                "templateName": {
                    "description": "TemplateName reference of the AnalysisTemplate name used by the Experiment to create the run",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutExperimentStepAnalysisTemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutExperimentTemplate": {
            "description": "RolloutExperimentTemplate defines the template used to create experiments for the Rollout's experiment canary step",
            "type": "object",
            "required": [
                "name",
                "specRef"
            ],
            "properties": {
                "metadata": {
                    "description": "Metadata sets labels and annotations to use for the RS created from the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PodTemplateMetadata"
                },
                "name": {
                    "description": "Name description of template that passed to the template",
                    "type": "string",
                    "default": ""
                },
                "replicas": {
                    "description": "Replicas replica count for the template",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector overrides the selector to be used for the template's ReplicaSet. If omitted, will use the same selector as the Rollout",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "service": {
                    "description": "Service controls the optionally generated service",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TemplateService"
                },
                "specRef": {
                    "description": "SpecRef indicates where the rollout should get the RS template from",
                    "type": "string",
                    "default": ""
                },
                "weight": {
                    "description": "Weight sets the percentage of traffic the template's replicas should receive",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutExperimentTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutList": {
            "description": "RolloutList is a list of Rollout resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.Rollout"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutPause": {
            "description": "RolloutPause defines a pause stage for a rollout",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration the amount of time to wait before moving to the next step.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutPause",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutSpec": {
            "description": "RolloutSpec is the spec for a Rollout resource",
            "type": "object",
            "properties": {
                "analysis": {
                    "description": "Analysis configuration for the analysis runs to retain",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AnalysisRunStrategy"
                },
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Paused pauses the rollout at its current step.",
                    "type": "boolean"
                },
                "progressDeadlineAbort": {
                    "description": "ProgressDeadlineAbort is whether to abort the update when ProgressDeadlineSeconds is exceeded.",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "ProgressDeadlineSeconds The maximum time in seconds for a rollout to make progress before it is considered to be failed. Argo Rollouts will continue to process failed rollouts and a condition with a ProgressDeadlineExceeded reason will be surfaced in the rollout status. Note that progress will not be estimated during the time a rollout is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "restartAt": {
                    "description": "RestartAt indicates when all the pods of a Rollout should be restarted",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain. If unspecified, will retain 10 old ReplicaSets",
                    "type": "integer",
                    "format": "int32"
                },
                "rollbackWindow": {
                    "description": "The window in which a rollback will be fast tracked (fully promoted)",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RollbackWindowSpec"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this rollout. It must match the pod template's labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutStrategy"
                },
                "template": {
                    "description": "Template describes the pods that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "workloadRef": {
                    "description": "WorkloadRef holds a references to a workload that provides Pod template",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ObjectRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutStatus": {
            "description": "RolloutStatus is the status for a Rollout resource",
            "type": "object",
            "properties": {
                "HPAReplicas": {
                    "description": "HPAReplicas the number of non-terminated replicas that are receiving active traffic",
                    "type": "integer",
                    "format": "int32"
                },
                "abort": {
                    "description": "Abort cancel the current rollout progression",
                    "type": "boolean"
                },
                "abortedAt": {
                    "description": "AbortedAt indicates the controller reconciled an aborted rollout. The controller uses this to understand if the controller needs to do some specific work when a Rollout is aborted. For example, the reconcileAbort is used to indicate if the Rollout should enter an aborted state when the latest AnalysisRun is a failure, or the controller has already put the Rollout into an aborted and should create a new AnalysisRun.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "alb": {
                    "description": "/ ALB keeps information regarding the ALB and TargetGroups",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ALBStatus"
                },
                "albs": {
                    "description": "/ ALBs keeps information regarding multiple ALBs and TargetGroups in a multi ingress scenario",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ALBStatus"
                    }
                },
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this rollout.",
                    "type": "integer",
                    "format": "int32"
                },
                "blueGreen": {
                    "description": "BlueGreen describes the state of the bluegreen rollout",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.BlueGreenStatus"
                },
                "canary": {
                    "description": "Canary describes the state of the canary rollout",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CanaryStatus"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Rollout. The Rollout controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Conditions a list of conditions a rollout can have.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RolloutCondition"
                    }
                },
                "controllerPause": {
                    "description": "ControllerPause indicates the controller has paused the rollout. It is set to true when the controller adds a pause condition. This field helps to discern the scenario where a rollout was resumed after being paused by the controller (e.g. via the plugin). In that situation, the pauseConditions would have been cleared , but controllerPause would still be set to true.",
                    "type": "boolean"
                },
                "currentPodHash": {
                    "description": "CurrentPodHash the hash of the current pod template",
                    "type": "string"
                },
                "currentStepHash": {
                    "description": "CurrentStepHash the hash of the current list of steps for the current strategy. This is used to detect when the list of current steps change",
                    "type": "string"
                },
                "currentStepIndex": {
                    "description": "CurrentStepIndex defines the current step of the rollout is on. If the current step index is null, the controller will execute the rollout.",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Message provides details on why the rollout is in its current phase",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "The generation observed by the rollout controller from metadata.generation",
                    "type": "string"
                },
                "pauseConditions": {
                    "description": "PauseConditions is a list of reasons why rollout became automatically paused (e.g. CanaryPauseStep, BlueGreenPause, InconclusiveAnalysis). The items in this list are populated by the controller but are cleared by the user (e.g. plugin, argo-cd resume action) when they wish to unpause. If pause conditions is empty, but controllerPause is true, it indicates the user manually unpaused the Rollout",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.PauseCondition"
                    }
                },
                "phase": {
                    "description": "Phase is the rollout phase. Clients should only rely on the value if status.observedGeneration equals metadata.generation",
                    "type": "string"
                },
                "promoteFull": {
                    "description": "PromoteFull indicates if the rollout should perform a full promotion, skipping analysis and pauses.",
                    "type": "boolean"
                },
                "readyReplicas": {
                    "description": "Total number of ready pods targeted by this rollout.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this rollout (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                },
                "restartedAt": {
                    "description": "RestartedAt indicates last time a Rollout was restarted",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "selector": {
                    "description": "Selector that identifies the pods that are receiving active traffic",
                    "type": "string"
                },
                "stableRS": {
                    "description": "StableRS indicates the replicaset that has successfully rolled out",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this rollout that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                },
                "workloadObservedGeneration": {
                    "description": "The generation of referenced workload observed by the rollout controller",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutStrategy": {
            "description": "RolloutStrategy defines strategy to apply during next rollout",
            "type": "object",
            "properties": {
                "blueGreen": {
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.BlueGreenStrategy"
                },
                "canary": {
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.CanaryStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RolloutTrafficRouting": {
            "description": "RolloutTrafficRouting hosts all the different configuration for supported service meshes to enable more fine-grained traffic routing",
            "type": "object",
            "properties": {
                "alb": {
                    "description": "Nginx holds ALB Ingress specific configuration to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ALBTrafficRouting"
                },
                "ambassador": {
                    "description": "Ambassador holds specific configuration to use Ambassador to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AmbassadorTrafficRouting"
                },
                "apisix": {
                    "description": "Apisix holds specific configuration to use Apisix to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.ApisixTrafficRouting"
                },
                "appMesh": {
                    "description": "AppMesh holds specific configuration to use AppMesh to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.AppMeshTrafficRouting"
                },
                "istio": {
                    "description": "Istio holds Istio specific configuration to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.IstioTrafficRouting"
                },
                "managedRoutes": {
                    "description": "ManagedRoutes A list of HTTP routes that Argo Rollouts manages, the order of this array also becomes the precedence in the upstream traffic router.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.MangedRoutes"
                    }
                },
                "nginx": {
                    "description": "Nginx holds Nginx Ingress specific configuration to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.NginxTrafficRouting"
                },
                "plugins": {
                    "description": "Plugins holds specific configuration that traffic router plugins can use for routing traffic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "smi": {
                    "description": "SMI holds TrafficSplit specific configuration to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SMITrafficRouting"
                },
                "traefik": {
                    "description": "Traefik holds specific configuration to use Traefik to route traffic",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TraefikTrafficRouting"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RolloutTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RouteMatch": {
            "type": "object",
            "properties": {
                "headers": {
                    "description": "Headers What request with matching headers should be mirrored",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.StringMatch"
                    }
                },
                "method": {
                    "description": "Method What http methods should be mirrored",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.StringMatch"
                },
                "path": {
                    "description": "Path What url paths should be mirrored",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.StringMatch"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RouteMatch",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.RunSummary": {
            "description": "RunSummary contains the final results from the metric executions",
            "type": "object",
            "properties": {
                "count": {
                    "description": "This is equal to the sum of Successful, Failed, Inconclusive",
                    "type": "integer",
                    "format": "int32"
                },
                "error": {
                    "description": "Error is the number of times an error was encountered during measurement",
                    "type": "integer",
                    "format": "int32"
                },
                "failed": {
                    "description": "Failed is the number of times the metric was measured Failed",
                    "type": "integer",
                    "format": "int32"
                },
                "inconclusive": {
                    "description": "Inconclusive is the number of times the metric was measured Inconclusive",
                    "type": "integer",
                    "format": "int32"
                },
                "successful": {
                    "description": "Successful is the number of times the metric was measured Successful",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RunSummary",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SMITrafficRouting": {
            "description": "SMITrafficRouting configuration for TrafficSplit Custom Resource to control traffic routing",
            "type": "object",
            "properties": {
                "rootService": {
                    "description": "RootService holds the name of that clients use to communicate.",
                    "type": "string"
                },
                "trafficSplitName": {
                    "description": "TrafficSplitName holds the name of the TrafficSplit.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SMITrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ScopeDetail": {
            "type": "object",
            "required": [
                "scope",
                "region",
                "step",
                "start",
                "end"
            ],
            "properties": {
                "end": {
                    "type": "string",
                    "default": ""
                },
                "region": {
                    "type": "string",
                    "default": ""
                },
                "scope": {
                    "type": "string",
                    "default": ""
                },
                "start": {
                    "type": "string",
                    "default": ""
                },
                "step": {
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ScopeDetail",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SecretKeyRef": {
            "type": "object",
            "required": [
                "name",
                "key"
            ],
            "properties": {
                "key": {
                    "description": "Key is the key of the secret to select from.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of the secret",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SecretKeyRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SetCanaryScale": {
            "description": "SetCanaryScale defines how to scale the newRS without changing traffic weight",
            "type": "object",
            "properties": {
                "matchTrafficWeight": {
                    "description": "MatchTrafficWeight cancels out previously set Replicas or Weight, effectively activating SetWeight",
                    "type": "boolean"
                },
                "replicas": {
                    "description": "Replicas sets the number of replicas the newRS should have",
                    "type": "integer",
                    "format": "int32"
                },
                "weight": {
                    "description": "Weight sets the percentage of replicas the newRS should have",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SetCanaryScale",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SetHeaderRoute": {
            "description": "SetHeaderRoute defines the route with specified header name to send 100% of traffic to the canary service",
            "type": "object",
            "properties": {
                "match": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.HeaderRoutingMatch"
                    }
                },
                "name": {
                    "description": "Name this is the name of the route to use for the mirroring of traffic this also needs to be included in the `spec.strategy.canary.trafficRouting.managedRoutes` field",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SetHeaderRoute",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SetMirrorRoute": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "match": {
                    "description": "Match Contains a list of rules that if mated will mirror the traffic to the services",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.RouteMatch"
                    }
                },
                "name": {
                    "description": "Name this is the name of the route to use for the mirroring of traffic this also needs to be included in the `spec.strategy.canary.trafficRouting.managedRoutes` field",
                    "type": "string",
                    "default": ""
                },
                "percentage": {
                    "description": "Services The list of services to mirror the traffic to if the method, path, headers match Service string `json:\"service\" protobuf:\"bytes,3,opt,name=service\"` Percentage What percent of the traffic that matched the rules should be mirrored",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SetMirrorRoute",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.Sigv4Config": {
            "type": "object",
            "properties": {
                "profile": {
                    "description": "Profile is the Credential Profile used to sign the SigV4 Request",
                    "type": "string"
                },
                "region": {
                    "description": "Region is the AWS Region to sign the SigV4 Request",
                    "type": "string"
                },
                "roleArn": {
                    "description": "RoleARN is the IAM role used to sign the SIgV4 Request",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Sigv4Config",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.SkyWalkingMetric": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "interval": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SkyWalkingMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.StickinessConfig": {
            "type": "object",
            "required": [
                "enabled",
                "durationSeconds"
            ],
            "properties": {
                "durationSeconds": {
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "enabled": {
                    "type": "boolean",
                    "default": false
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StickinessConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.StringMatch": {
            "description": "StringMatch Used to define what type of matching we will use exact, prefix, or regular expression",
            "type": "object",
            "properties": {
                "exact": {
                    "description": "Exact The string must match exactly",
                    "type": "string"
                },
                "prefix": {
                    "description": "Prefix The string will be prefixed matched",
                    "type": "string"
                },
                "regex": {
                    "description": "Regex The string will be regular expression matched",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StringMatch",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TCPRoute": {
            "description": "TCPRoute holds the information on the virtual service's TCP routes that are desired to be matched for changing weights.",
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the TCP Route desired to be matched in the given Istio VirtualService.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TCPRoute",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TLSRoute": {
            "description": "TLSRoute holds the information on the virtual service's TLS/HTTPS routes that are desired to be matched for changing weights.",
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the TLS Route desired to be matched in the given Istio VirtualService.",
                    "type": "integer",
                    "format": "int64"
                },
                "sniHosts": {
                    "description": "A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TLSRoute",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TemplateService": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the service generated by the experiment",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TemplateService",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TemplateSpec": {
            "type": "object",
            "required": [
                "name",
                "selector",
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "Name of the template used to identity replicaset running for this experiment",
                    "type": "string",
                    "default": ""
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this experiment. It must match the pod template's labels. Each selector must be unique to the other selectors in the other templates",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "service": {
                    "description": "TemplateService describes how a service should be generated for template",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.TemplateService"
                },
                "template": {
                    "description": "Template describes the pods that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TemplateStatus": {
            "description": "TemplateStatus is the status of a specific template of an Experiment",
            "type": "object",
            "required": [
                "name",
                "replicas",
                "updatedReplicas",
                "readyReplicas",
                "availableReplicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this experiment.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "CollisionCount count of hash collisions for the Experiment. The Experiment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the replicaset transitioned, which resets the countdown on the ProgressDeadlineSeconds check.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message is a message explaining the current status",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template used to identity which hash to compare to the hash",
                    "type": "string",
                    "default": ""
                },
                "podTemplateHash": {
                    "description": "PodTemplateHash is the value of the Replicas' PodTemplateHash",
                    "type": "string"
                },
                "readyReplicas": {
                    "description": "Total number of ready pods targeted by this experiment.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this experiment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "serviceName": {
                    "description": "ServiceName is the name of the service which corresponds to this experiment",
                    "type": "string"
                },
                "status": {
                    "description": "Phase is the status of the ReplicaSet associated with the template",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this experiment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TemplateStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TraefikTrafficRouting": {
            "description": "TraefikTrafficRouting defines the configuration required to use Traefik as traffic router",
            "type": "object",
            "required": [
                "weightedTraefikServiceName"
            ],
            "properties": {
                "weightedTraefikServiceName": {
                    "description": "TraefikServiceName refer to the name of the Traefik service used to route traffic to the service",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TraefikTrafficRouting",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.TrafficWeights": {
            "description": "TrafficWeights describes the current status of how traffic has been split",
            "type": "object",
            "required": [
                "canary",
                "stable"
            ],
            "properties": {
                "additional": {
                    "description": "Additional holds the weights split to additional ReplicaSets such as experiment ReplicaSets",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WeightDestination"
                    }
                },
                "canary": {
                    "description": "Canary is the current traffic weight split to canary ReplicaSet",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WeightDestination"
                },
                "stable": {
                    "description": "Stable is the current traffic weight split to stable ReplicaSet",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WeightDestination"
                },
                "verified": {
                    "description": "Verified is an optional indicator that the weight has been verified to have taken effect. This is currently only applicable to ALB traffic router",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TrafficWeights",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.ValueFrom": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "FieldRef is a reference to the fields in metadata which we are referencing. This field is one of the fields with valueFrom",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.FieldRef"
                },
                "secretKeyRef": {
                    "description": "Secret is a reference to where a secret is stored. This field is one of the fields with valueFrom",
                    "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.SecretKeyRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.WavefrontMetric": {
            "description": "WavefrontMetric defines the wavefront query to perform canary analysis",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the HTTP address and port of the wavefront server",
                    "type": "string"
                },
                "query": {
                    "description": "Query is a raw wavefront query to perform",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WavefrontMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.WebMetric": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "body": {
                    "description": "Body is the body of the web metric (must be POST/PUT)",
                    "type": "string"
                },
                "headers": {
                    "description": "Headers are optional HTTP headers to use in the request",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.rollouts.v1alpha1.WebMetricHeader"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "insecure": {
                    "description": "Insecure skips host TLS verification",
                    "type": "boolean"
                },
                "jsonBody": {
                    "description": "JSONBody is the body of the web metric in a json format (method must be POST/PUT)",
                    "type": "string",
                    "format": "byte"
                },
                "jsonPath": {
                    "description": "JSONPath is a JSON Path to use as the result variable (default: \"{$}\")",
                    "type": "string"
                },
                "method": {
                    "description": "Method is the method of the web metric (empty defaults to GET)",
                    "type": "string"
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds is the timeout for the request in seconds (default: 10)",
                    "type": "integer",
                    "format": "int64"
                },
                "url": {
                    "description": "URL is the address of the web metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebMetric",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.WebMetricHeader": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebMetricHeader",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.rollouts.v1alpha1.WeightDestination": {
            "type": "object",
            "required": [
                "weight"
            ],
            "properties": {
                "podTemplateHash": {
                    "description": "PodTemplateHash is the pod template hash label for this destination",
                    "type": "string"
                },
                "serviceName": {
                    "description": "ServiceName is the Kubernetes service name traffic is being sent to",
                    "type": "string"
                },
                "weight": {
                    "description": "Weight is an percentage of traffic being sent to this destination",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WeightDestination",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.AWSLambdaTrigger": {
            "description": "AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function",
            "type": "object",
            "required": [
                "functionName",
                "region",
                "payload"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "functionName": {
                    "description": "FunctionName refers to the name of the function to invoke.",
                    "type": "string",
                    "default": ""
                },
                "invocationType": {
                    "description": "Choose from the following options.\n\n   * RequestResponse (default) - Invoke the function synchronously. Keep\n   the connection open until the function returns a response or times out.\n   The API response includes the function response and additional data.\n\n   * Event - Invoke the function asynchronously. Send events that fail multiple\n   times to the function's dead-letter queue (if it's configured). The API\n   response only includes a status code.\n\n   * DryRun - Validate parameter values and verify that the user or role\n   has permission to invoke the function.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AWSLambdaTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger": {
            "description": "ArgoWorkflowTrigger is the trigger for the Argo Workflow",
            "type": "object",
            "properties": {
                "args": {
                    "description": "Args is the list of arguments to pass to the argo CLI",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "operation": {
                    "description": "Operation refers to the type of operation performed on the argo workflow resource. Default value is Submit.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters to pass to resolved Argo Workflow object",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "source": {
                    "description": "Source of the K8s resource file(s)",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArgoWorkflowTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ArtifactLocation": {
            "description": "ArtifactLocation describes the source location for an external artifact",
            "type": "object",
            "properties": {
                "configmap": {
                    "description": "Configmap that stores the artifact",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "file": {
                    "description": "File artifact is artifact stored in a file",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.FileArtifact"
                },
                "git": {
                    "description": "Git repository hosting the artifact",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitArtifact"
                },
                "inline": {
                    "description": "Inline artifact is embedded in sensor spec as a string",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is generic template for K8s resource",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Resource"
                },
                "s3": {
                    "description": "S3 compliant artifact",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.S3Artifact"
                },
                "url": {
                    "description": "URL to fetch the artifact from",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.URLArtifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactLocation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger": {
            "description": "AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger",
            "type": "object",
            "required": [
                "fqdn",
                "hubName",
                "sharedAccessKeyName",
                "payload"
            ],
            "properties": {
                "fqdn": {
                    "description": "FQDN refers to the namespace dns of Azure Event Hubs to be used i.e. \u003cnamespace\u003e.servicebus.windows.net",
                    "type": "string",
                    "default": ""
                },
                "hubName": {
                    "description": "HubName refers to the Azure Event Hub to send events to",
                    "type": "string",
                    "default": ""
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "sharedAccessKey": {
                    "description": "SharedAccessKey refers to a K8s secret containing the primary key for the",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sharedAccessKeyName": {
                    "description": "SharedAccessKeyName refers to the name of the Shared Access Key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureEventHubsTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger": {
            "type": "object",
            "required": [
                "queueName",
                "topicName",
                "subscriptionName",
                "payload"
            ],
            "properties": {
                "connectionString": {
                    "description": "ConnectionString is the connection string for the Azure Service Bus",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "queueName": {
                    "description": "QueueName is the name of the Azure Service Bus Queue",
                    "type": "string",
                    "default": ""
                },
                "subscriptionName": {
                    "description": "SubscriptionName is the name of the Azure Service Bus Topic Subscription",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the service bus client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topicName": {
                    "description": "TopicName is the name of the Azure Service Bus Topic",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureServiceBusTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ConditionsResetByTime": {
            "type": "object",
            "properties": {
                "cron": {
                    "description": "Cron is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConditionsResetByTime",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ConditionsResetCriteria": {
            "type": "object",
            "properties": {
                "byTime": {
                    "description": "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConditionsResetByTime"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConditionsResetCriteria",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.CustomTrigger": {
            "description": "CustomTrigger refers to the specification of the custom trigger.",
            "type": "object",
            "required": [
                "serverURL",
                "secure",
                "spec",
                "payload"
            ],
            "properties": {
                "certSecret": {
                    "description": "CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved custom trigger trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "secure": {
                    "description": "Secure refers to type of the connection between sensor to custom trigger gRPC",
                    "type": "boolean",
                    "default": false
                },
                "serverNameOverride": {
                    "description": "ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.",
                    "type": "string"
                },
                "serverURL": {
                    "description": "ServerURL is the url of the gRPC server that executes custom trigger",
                    "type": "string",
                    "default": ""
                },
                "spec": {
                    "description": "Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CustomTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.DataFilter": {
            "description": "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
            "type": "object",
            "required": [
                "path",
                "type",
                "value"
            ],
            "properties": {
                "comparator": {
                    "description": "Comparator compares the event data with a user given value. Can be \"\u003e=\", \"\u003e\", \"=\", \"!=\", \"\u003c\", or \"\u003c=\". Is optional, and if left blank treated as equality \"=\".",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "description": "Template is a go-template for extracting a string from the event's data. A Template is evaluated with provided path, type and value. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "type": {
                    "description": "Type contains the JSON type of the data",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DataFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EmailTrigger": {
            "description": "EmailTrigger refers to the specification of the email notification trigger.",
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body refers to the body/content of the email send.",
                    "type": "string"
                },
                "from": {
                    "description": "From refers to the address from which the email is send from.",
                    "type": "string"
                },
                "host": {
                    "description": "Host refers to the smtp host url to which email is send.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "port": {
                    "description": "Port refers to the smtp server port to which email is send. Defaults to 0.",
                    "type": "integer",
                    "format": "int32"
                },
                "smtpPassword": {
                    "description": "SMTPPassword refers to the Kubernetes secret that holds the smtp password used to connect to smtp server.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "subject": {
                    "description": "Subject refers to the subject line for the email send.",
                    "type": "string"
                },
                "to": {
                    "description": "To refers to the email addresses to which the emails are send.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "username": {
                    "description": "Username refers to the username used to connect to the smtp server.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EmailTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Event": {
            "description": "Event represents the cloudevent received from an event source.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "context": {
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
                },
                "data": {
                    "type": "string",
                    "format": "byte"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Event",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventContext": {
            "description": "EventContext holds the context of the cloudevent received from an event source.",
            "type": "object",
            "required": [
                "id",
                "source",
                "specversion",
                "type",
                "datacontenttype",
                "subject",
                "time"
            ],
            "properties": {
                "datacontenttype": {
                    "description": "DataContentType - A MIME (RFC2046) string describing the media type of `data`.",
                    "type": "string",
                    "default": ""
                },
                "id": {
                    "description": "ID of the event; must be non-empty and unique within the scope of the producer.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "Source - A URI describing the event producer.",
                    "type": "string",
                    "default": ""
                },
                "specversion": {
                    "description": "SpecVersion - The version of the CloudEvents specification used by the event.",
                    "type": "string",
                    "default": ""
                },
                "subject": {
                    "description": "Subject - The subject of the event in the context of the event producer",
                    "type": "string",
                    "default": ""
                },
                "time": {
                    "description": "Time - A Timestamp when the event happened.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "type": {
                    "description": "Type - The type of the occurrence which has happened.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventContext",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependency": {
            "description": "EventDependency describes a dependency",
            "type": "object",
            "required": [
                "name",
                "eventSourceName",
                "eventName"
            ],
            "properties": {
                "eventName": {
                    "description": "EventName is the name of the event",
                    "type": "string",
                    "default": ""
                },
                "eventSourceName": {
                    "description": "EventSourceName is the name of EventSource that Sensor depends on",
                    "type": "string",
                    "default": ""
                },
                "filters": {
                    "description": "Filters and rules governing toleration of success and constraints on the context and data of an event",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyFilter"
                },
                "filtersLogicalOperator": {
                    "description": "FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "name": {
                    "description": "Name is a unique name of this dependency",
                    "type": "string",
                    "default": ""
                },
                "transform": {
                    "description": "Transform transforms the event data",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyTransformer"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependency",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependencyFilter": {
            "description": "EventDependencyFilter defines filters and constraints for a event.",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context filter constraints",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
                },
                "data": {
                    "description": "Data filter constraints with escalation",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DataFilter"
                    }
                },
                "dataLogicalOperator": {
                    "description": "DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "exprLogicalOperator": {
                    "description": "ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "exprs": {
                    "description": "Exprs contains the list of expressions evaluated against the event payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ExprFilter"
                    }
                },
                "script": {
                    "description": "Script refers to a Lua script evaluated to determine the validity of an event.",
                    "type": "string"
                },
                "time": {
                    "description": "Time filter on the event with escalation",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TimeFilter"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependencyFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependencyTransformer": {
            "description": "EventDependencyTransformer transforms the event",
            "type": "object",
            "properties": {
                "jq": {
                    "description": "JQ holds the jq command applied for transformation",
                    "type": "string"
                },
                "script": {
                    "description": "Script refers to a Lua script used to transform the event",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependencyTransformer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ExprFilter": {
            "type": "object",
            "required": [
                "expr",
                "fields"
            ],
            "properties": {
                "expr": {
                    "description": "Expr refers to the expression that determines the outcome of the filter.",
                    "type": "string",
                    "default": ""
                },
                "fields": {
                    "description": "Fields refers to set of keys that refer to the paths within event payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.PayloadField"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExprFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.FileArtifact": {
            "description": "FileArtifact contains information about an artifact in a filesystem",
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "FileArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitArtifact": {
            "description": "GitArtifact contains information about an artifact stored in git",
            "type": "object",
            "required": [
                "url",
                "cloneDirectory",
                "filePath"
            ],
            "properties": {
                "branch": {
                    "description": "Branch to use to pull trigger resource",
                    "type": "string"
                },
                "cloneDirectory": {
                    "description": "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.",
                    "type": "string",
                    "default": ""
                },
                "creds": {
                    "description": "Creds contain reference to git username and password",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitCreds"
                },
                "filePath": {
                    "description": "Path to file that contains trigger resource definition",
                    "type": "string",
                    "default": ""
                },
                "insecureIgnoreHostKey": {
                    "description": "Whether to ignore host key",
                    "type": "boolean"
                },
                "ref": {
                    "description": "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
                    "type": "string"
                },
                "remote": {
                    "description": "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitRemoteConfig"
                },
                "sshKeySecret": {
                    "description": "SSHKeySecret refers to the secret that contains SSH key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tag": {
                    "description": "Tag to use to pull trigger resource",
                    "type": "string"
                },
                "url": {
                    "description": "Git URL",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitCreds": {
            "description": "GitCreds contain reference to git username and password",
            "type": "object",
            "properties": {
                "password": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "username": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitCreds",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitRemoteConfig": {
            "description": "GitRemoteConfig contains the configuration of a Git remote",
            "type": "object",
            "required": [
                "name",
                "urls"
            ],
            "properties": {
                "name": {
                    "description": "Name of the remote to fetch from.",
                    "type": "string",
                    "default": ""
                },
                "urls": {
                    "description": "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitRemoteConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.HTTPTrigger": {
            "description": "HTTPTrigger is the trigger for the HTTP request",
            "type": "object",
            "required": [
                "url",
                "payload"
            ],
            "properties": {
                "basicAuth": {
                    "description": "BasicAuth configuration for the http request.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "headers": {
                    "description": "Headers for the HTTP request.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go for more info. Default value is POST.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "secureHeaders": {
                    "description": "Secure Headers stored in Kubernetes Secrets for the HTTP requests.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SecureHeader"
                    }
                },
                "timeout": {
                    "description": "Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.",
                    "type": "integer",
                    "format": "int64"
                },
                "tls": {
                    "description": "TLS configuration for the HTTP client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL refers to the URL to send HTTP request to.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.K8SResourcePolicy": {
            "description": "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels",
            "type": "object",
            "required": [
                "backoff",
                "errorOnBackoffTimeout"
            ],
            "properties": {
                "backoff": {
                    "description": "Backoff before checking resource state",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "errorOnBackoffTimeout": {
                    "description": "ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource",
                    "type": "boolean",
                    "default": false
                },
                "labels": {
                    "description": "Labels required to identify whether a resource is in success state",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "K8SResourcePolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.KafkaTrigger": {
            "description": "KafkaTrigger refers to the specification of the Kafka trigger.",
            "type": "object",
            "required": [
                "url",
                "topic",
                "payload"
            ],
            "properties": {
                "compress": {
                    "description": "Compress determines whether to compress message or not. Defaults to false. If set to true, compresses message using snappy compression.",
                    "type": "boolean"
                },
                "flushFrequency": {
                    "description": "FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500 milliseconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "partition": {
                    "description": "DEPRECATED",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "partitioningKey": {
                    "description": "The partitioning key for the messages put on the Kafka topic.",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "requiredAcks": {
                    "description": "RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack).",
                    "type": "integer",
                    "format": "int32"
                },
                "sasl": {
                    "description": "SASL configuration for the kafka client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SASLConfig"
                },
                "schemaRegistry": {
                    "description": "Schema Registry configuration to producer message with avro format",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SchemaRegistryConfig"
                },
                "tls": {
                    "description": "TLS configuration for the Kafka producer.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL of the Kafka broker, multiple URLs separated by comma.",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.LogTrigger": {
            "type": "object",
            "properties": {
                "intervalSeconds": {
                    "description": "Only print messages every interval. Useful to prevent logging too much data for busy events.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LogTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.NATSTrigger": {
            "description": "NATSTrigger refers to the specification of the NATS trigger.",
            "type": "object",
            "required": [
                "url",
                "subject",
                "payload"
            ],
            "properties": {
                "parameters": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "subject": {
                    "description": "Name of the subject to put message on.",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the NATS producer.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL of the NATS cluster.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.OpenWhiskTrigger": {
            "description": "OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.",
            "type": "object",
            "required": [
                "host",
                "actionName",
                "payload"
            ],
            "properties": {
                "actionName": {
                    "description": "Name of the action/function.",
                    "type": "string",
                    "default": ""
                },
                "authToken": {
                    "description": "AuthToken for authentication.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "host": {
                    "description": "Host URL of the OpenWhisk.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace for the action. Defaults to \"_\".",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "version": {
                    "description": "Version for the API. Defaults to v1.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OpenWhiskTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.PayloadField": {
            "description": "PayloadField binds a value at path within the event payload against a name.",
            "type": "object",
            "required": [
                "path",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name acts as key that holds the value at the path.",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PayloadField",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.PulsarTrigger": {
            "description": "PulsarTrigger refers to the specification of the Pulsar trigger.",
            "type": "object",
            "required": [
                "url",
                "topic",
                "payload"
            ],
            "properties": {
                "authAthenzParams": {
                    "description": "Authentication athenz parameters for the pulsar client. Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go Either token or athenz can be set to use auth.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "authAthenzSecret": {
                    "description": "Authentication athenz privateKey secret for the pulsar client. AuthAthenzSecret must be set if AuthAthenzParams is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "authTokenSecret": {
                    "description": "Authentication token for the pulsar client. Either token or athenz can be set to use auth.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "tls": {
                    "description": "TLS configuration for the pulsar client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "tlsAllowInsecureConnection": {
                    "description": "Whether the Pulsar client accept untrusted TLS certificate from broker.",
                    "type": "boolean"
                },
                "tlsTrustCertsSecret": {
                    "description": "Trusted TLS certificate secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tlsValidateHostname": {
                    "description": "Whether the Pulsar client verify the validity of the host name from broker.",
                    "type": "boolean"
                },
                "topic": {
                    "description": "Name of the topic. See https://pulsar.apache.org/docs/en/concepts-messaging/",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "Configure the service URL for the Pulsar service.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PulsarTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.RateLimit": {
            "type": "object",
            "properties": {
                "requestsPerUnit": {
                    "type": "integer",
                    "format": "int32"
                },
                "unit": {
                    "description": "Defaults to Second",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RateLimit",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Sensor": {
            "description": "Sensor is the definition of a sensor resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Sensor",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorList": {
            "description": "SensorList is the list of Sensor resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Sensor"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorSpec": {
            "description": "SensorSpec represents desired sensor state",
            "type": "object",
            "required": [
                "dependencies",
                "triggers"
            ],
            "properties": {
                "dependencies": {
                    "description": "Dependencies is a list of the events that this sensor is dependent on.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependency"
                    }
                },
                "errorOnFailedRound": {
                    "description": "ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.",
                    "type": "boolean"
                },
                "eventBusName": {
                    "description": "EventBusName references to a EventBus name. By default the value is \"default\"",
                    "type": "string"
                },
                "loggingFields": {
                    "description": "LoggingFields add additional key-value pairs when logging happens",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "replicas": {
                    "description": "Replicas is the sensor deployment replicas",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "RevisionHistoryLimit specifies how many old deployment revisions to retain",
                    "type": "integer",
                    "format": "int32"
                },
                "template": {
                    "description": "Template is the pod specification for the sensor",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Template"
                },
                "triggers": {
                    "description": "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Trigger"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorStatus": {
            "description": "SensorStatus contains information about the status of a sensor.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SlackSender": {
            "type": "object",
            "properties": {
                "icon": {
                    "description": "Icon is the Slack application's icon, e.g. :robot_face: or https://example.com/image.png",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the Slack application's username",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackSender",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SlackThread": {
            "type": "object",
            "properties": {
                "broadcastMessageToChannel": {
                    "description": "BroadcastMessageToChannel allows to also broadcast the message from the thread to the channel",
                    "type": "boolean"
                },
                "messageAggregationKey": {
                    "description": "MessageAggregationKey allows to aggregate the messages to a thread by some key.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackThread",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SlackTrigger": {
            "description": "SlackTrigger refers to the specification of the slack notification trigger.",
            "type": "object",
            "properties": {
                "attachments": {
                    "description": "Attachments is a JSON format string that represents an array of Slack attachments according to the attachments API: https://api.slack.com/reference/messaging/attachments .",
                    "type": "string"
                },
                "blocks": {
                    "description": "Blocks is a JSON format string that represents an array of Slack blocks according to the blocks API: https://api.slack.com/reference/block-kit/blocks .",
                    "type": "string"
                },
                "channel": {
                    "description": "Channel refers to which Slack channel to send Slack message.",
                    "type": "string"
                },
                "message": {
                    "description": "Message refers to the message to send to the Slack channel.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "sender": {
                    "description": "Sender refers to additional configuration of the Slack application that sends the message.",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SlackSender"
                },
                "slackToken": {
                    "description": "SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "thread": {
                    "description": "Thread refers to additional options for sending messages to a Slack thread.",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SlackThread"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.StandardK8STrigger": {
            "description": "StandardK8STrigger is the standard Kubernetes resource trigger",
            "type": "object",
            "properties": {
                "liveObject": {
                    "description": "LiveObject specifies whether the resource should be directly fetched from K8s instead of being marshaled from the resource artifact. If set to true, the resource artifact must contain the information required to uniquely identify the resource in the cluster, that is, you must specify \"apiVersion\", \"kind\" as well as \"name\" and \"namespace\" meta data. Only valid for operation type `update`",
                    "type": "boolean"
                },
                "operation": {
                    "description": "Operation refers to the type of operation performed on the k8s resource. Default value is Create.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved K8s trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "patchStrategy": {
                    "description": "PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch. possible values: \"application/json-patch+json\" \"application/merge-patch+json\" \"application/strategic-merge-patch+json\" \"application/apply-patch+yaml\". Defaults to \"application/merge-patch+json\"",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the K8s resource file(s)",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StandardK8STrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.StatusPolicy": {
            "description": "StatusPolicy refers to the policy used to check the state of the trigger using response status",
            "type": "object",
            "required": [
                "allow"
            ],
            "properties": {
                "allow": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StatusPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Template": {
            "description": "Template holds the information of a sensor deployment template",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "container": {
                    "description": "Container is the main container image to run in the sensor pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run sensor pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TimeFilter": {
            "description": "TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
            "type": "object",
            "required": [
                "start",
                "stop"
            ],
            "properties": {
                "start": {
                    "description": "Start is the beginning of a time window in UTC. Before this time, events for this dependency are ignored. Format is hh:mm:ss.",
                    "type": "string",
                    "default": ""
                },
                "stop": {
                    "description": "Stop is the end of a time window in UTC. After or equal to this time, events for this dependency are ignored and Format is hh:mm:ss. If it is smaller than Start, it is treated as next day of Start (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TimeFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Trigger": {
            "description": "Trigger is an action taken, output produced, an event created, a message sent",
            "type": "object",
            "properties": {
                "atLeastOnce": {
                    "description": "AtLeastOnce determines the trigger execution semantics. Defaults to false. Trigger execution will use at-most-once semantics. If set to true, Trigger execution will switch to at-least-once semantics.",
                    "type": "boolean"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters applied to the trigger template definition",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "policy": {
                    "description": "Policy to configure backoff and execution criteria for the trigger",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerPolicy"
                },
                "rateLimit": {
                    "description": "Rate limit, default unit is Second",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.RateLimit"
                },
                "retryStrategy": {
                    "description": "Retry strategy, defaults to no retry",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "template": {
                    "description": "Template describes the trigger specification.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Trigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerParameter": {
            "description": "TriggerParameter indicates a passed parameter to a service template",
            "type": "object",
            "required": [
                "dest"
            ],
            "properties": {
                "dest": {
                    "description": "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
                    "type": "string",
                    "default": ""
                },
                "operation": {
                    "description": "Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.",
                    "type": "string"
                },
                "src": {
                    "description": "Src contains a source reference to the value of the parameter from a dependency",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameterSource"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerParameterSource": {
            "description": "TriggerParameterSource defines the source for a parameter from a event event",
            "type": "object",
            "required": [
                "dependencyName"
            ],
            "properties": {
                "contextKey": {
                    "description": "ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string"
                },
                "contextTemplate": {
                    "description": "ContextTemplate is a go-template for extracting a string from the event's context. If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "dataKey": {
                    "description": "DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string"
                },
                "dataTemplate": {
                    "description": "DataTemplate is a go-template for extracting a string from the event's data. If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "dependencyName": {
                    "description": "DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.",
                    "type": "string",
                    "default": ""
                },
                "useRawData": {
                    "description": "UseRawData indicates if the value in an event at data key should be used without converting to string. When true, a number, boolean, json or string parameter may be extracted. When the field is unspecified, or explicitly false, the behavior is to turn the extracted field into a string. (e.g. when set to true, the parameter 123 will resolve to the numerical type, but when false, or not provided, the string \"123\" will be resolved)",
                    "type": "boolean"
                },
                "value": {
                    "description": "Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerParameterSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerPolicy": {
            "description": "TriggerPolicy dictates the policy for the trigger retries",
            "type": "object",
            "properties": {
                "k8s": {
                    "description": "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.K8SResourcePolicy"
                },
                "status": {
                    "description": "Status refers to the policy used to check the state of the trigger using response status",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StatusPolicy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerTemplate": {
            "description": "TriggerTemplate is the template that describes trigger specification.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "argoWorkflow": {
                    "description": "ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
                },
                "awsLambda": {
                    "description": "AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
                },
                "azureEventHubs": {
                    "description": "AzureEventHubs refers to the trigger send an event to an Azure Event Hub.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger"
                },
                "azureServiceBus": {
                    "description": "AzureServiceBus refers to the trigger designed to place messages on Azure Service Bus",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger"
                },
                "conditions": {
                    "description": "Conditions is the conditions to execute the trigger. For example: \"(dep01 || dep02) \u0026\u0026 dep04\"",
                    "type": "string"
                },
                "conditionsReset": {
                    "description": "Criteria to reset the conditons",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConditionsResetCriteria"
                    }
                },
                "custom": {
                    "description": "CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.CustomTrigger"
                },
                "email": {
                    "description": "Email refers to the trigger designed to send an email notification",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EmailTrigger"
                },
                "http": {
                    "description": "HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.HTTPTrigger"
                },
                "k8s": {
                    "description": "StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StandardK8STrigger"
                },
                "kafka": {
                    "description": "Kafka refers to the trigger designed to place messages on Kafka topic.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.KafkaTrigger"
                },
                "log": {
                    "description": "Log refers to the trigger designed to invoke log the event.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.LogTrigger"
                },
                "name": {
                    "description": "Name is a unique name of the action to take.",
                    "type": "string",
                    "default": ""
                },
                "nats": {
                    "description": "NATS refers to the trigger designed to place message on NATS subject.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NATSTrigger"
                },
                "openWhisk": {
                    "description": "OpenWhisk refers to the trigger designed to invoke OpenWhisk action.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
                },
                "pulsar": {
                    "description": "Pulsar refers to the trigger designed to place messages on Pulsar topic.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.PulsarTrigger"
                },
                "slack": {
                    "description": "Slack refers to the trigger designed to send slack notification message.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SlackTrigger"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.URLArtifact": {
            "description": "URLArtifact contains information about an artifact at an http endpoint.",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "description": "Path is the complete URL",
                    "type": "string",
                    "default": ""
                },
                "verifyCert": {
                    "description": "VerifyCert decides whether the connection is secure or not",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "URLArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Amount": {
            "description": "Amount represent a numeric amount.",
            "type": "number",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Amount",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArchiveStrategy": {
            "description": "ArchiveStrategy describes how to archive files/directory when saving artifacts",
            "type": "object",
            "properties": {
                "none": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NoneStrategy"
                },
                "tar": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TarStrategy"
                },
                "zip": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ZipStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArchiveStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Arguments": {
            "description": "Arguments to a template",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifacts is the list of artifacts to pass to the template or workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters to pass to the template or workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Arguments",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtGCStatus": {
            "description": "ArtGCStatus maintains state related to ArtifactGC",
            "type": "object",
            "properties": {
                "notSpecified": {
                    "description": "if this is true, we already checked to see if we need to do it and we don't",
                    "type": "boolean"
                },
                "podsRecouped": {
                    "description": "have completed Pods been processed? (mapped by Pod name) used to prevent re-processing the Status of a Pod more than once",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "strategiesProcessed": {
                    "description": "have Pods been started to perform this strategy? (enables us not to re-process what we've already done)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtGCStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Artifact": {
            "description": "Artifact indicates an artifact to place at a specified path",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "archive": {
                    "description": "Archive controls how the artifact will be saved to the artifact repository.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArchiveStrategy"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when to deleting an artifact from completed or deleted workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGC"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "deleted": {
                    "description": "Has this been deleted?",
                    "type": "boolean"
                },
                "from": {
                    "description": "From allows an artifact to reference an artifact from a previous step",
                    "type": "string"
                },
                "fromExpression": {
                    "description": "FromExpression, if defined, is evaluated to specify the value for the artifact",
                    "type": "string"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "globalName": {
                    "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts",
                    "type": "string"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "mode": {
                    "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "name of the artifact. must be unique within a template's inputs/outputs.",
                    "type": "string",
                    "default": ""
                },
                "optional": {
                    "description": "Make Artifacts optional, if Artifacts doesn't generate or exist",
                    "type": "boolean"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "path": {
                    "description": "Path is the container path to the artifact",
                    "type": "string"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "recurseMode": {
                    "description": "If mode is set, apply the permission recursively into the artifact if it is a folder",
                    "type": "boolean"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                },
                "subPath": {
                    "description": "SubPath allows an artifact to be sourced from a subpath within the specified source",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Artifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGC": {
            "description": "ArtifactGC describes how to delete artifacts from completed Workflows - this is embedded into the WorkflowLevelArtifactGC, and also used for individual Artifacts to override that as needed",
            "type": "object",
            "properties": {
                "podMetadata": {
                    "description": "PodMetadata is an optional field for specifying the Labels and Annotations that should be assigned to the Pod doing the deletion",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion",
                    "type": "string"
                },
                "strategy": {
                    "description": "Strategy is the strategy to use.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGCSpec": {
            "description": "ArtifactGCSpec specifies the Artifacts that need to be deleted",
            "type": "object",
            "properties": {
                "artifactsByNode": {
                    "description": "ArtifactsByNode maps Node name to information pertaining to Artifacts on that Node",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactNodeSpec"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGCSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGCStatus": {
            "description": "ArtifactGCStatus describes the result of the deletion",
            "type": "object",
            "properties": {
                "artifactResultsByNode": {
                    "description": "ArtifactResultsByNode maps Node name to result",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactResultNodeStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGCStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactLocation": {
            "description": "ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.",
            "type": "object",
            "properties": {
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactLocation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactNodeSpec": {
            "description": "ArtifactNodeSpec specifies the Artifacts that need to be deleted for a given Node",
            "type": "object",
            "properties": {
                "archiveLocation": {
                    "description": "ArchiveLocation is the template-level Artifact location specification",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactLocation"
                },
                "artifacts": {
                    "description": "Artifacts maps artifact name to Artifact description",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactNodeSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactPaths": {
            "description": "ArtifactPaths expands a step from a collection of artifacts",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "archive": {
                    "description": "Archive controls how the artifact will be saved to the artifact repository.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArchiveStrategy"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when to deleting an artifact from completed or deleted workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGC"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "deleted": {
                    "description": "Has this been deleted?",
                    "type": "boolean"
                },
                "from": {
                    "description": "From allows an artifact to reference an artifact from a previous step",
                    "type": "string"
                },
                "fromExpression": {
                    "description": "FromExpression, if defined, is evaluated to specify the value for the artifact",
                    "type": "string"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "globalName": {
                    "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts",
                    "type": "string"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "mode": {
                    "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "name of the artifact. must be unique within a template's inputs/outputs.",
                    "type": "string",
                    "default": ""
                },
                "optional": {
                    "description": "Make Artifacts optional, if Artifacts doesn't generate or exist",
                    "type": "boolean"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "path": {
                    "description": "Path is the container path to the artifact",
                    "type": "string"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "recurseMode": {
                    "description": "If mode is set, apply the permission recursively into the artifact if it is a folder",
                    "type": "boolean"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                },
                "subPath": {
                    "description": "SubPath allows an artifact to be sourced from a subpath within the specified source",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactPaths",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepository": {
            "description": "ArtifactRepository represents an artifact repository in which a controller will store its artifacts",
            "type": "object",
            "properties": {
                "archiveLogs": {
                    "description": "ArchiveLogs enables log archiving",
                    "type": "boolean"
                },
                "artifactory": {
                    "description": "Artifactory stores artifacts to JFrog Artifactory",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifactRepository"
                },
                "azure": {
                    "description": "Azure stores artifact in an Azure Storage account",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifactRepository"
                },
                "gcs": {
                    "description": "GCS stores artifact in a GCS object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifactRepository"
                },
                "hdfs": {
                    "description": "HDFS stores artifacts in HDFS",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifactRepository"
                },
                "oss": {
                    "description": "OSS stores artifact in a OSS-compliant object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifactRepository"
                },
                "s3": {
                    "description": "S3 stores artifact in a S3-compliant object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3ArtifactRepository"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepositoryRef": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "The name of the config map. Defaults to \"artifact-repositories\".",
                    "type": "string"
                },
                "key": {
                    "description": "The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepositoryRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepositoryRefStatus": {
            "type": "object",
            "properties": {
                "artifactRepository": {
                    "description": "The repository the workflow will use. This maybe empty before v3.1.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepository"
                },
                "configMap": {
                    "description": "The name of the config map. Defaults to \"artifact-repositories\".",
                    "type": "string"
                },
                "default": {
                    "description": "If this ref represents the default artifact repository, rather than a config map.",
                    "type": "boolean"
                },
                "key": {
                    "description": "The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.",
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found).",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepositoryRefStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactResult": {
            "description": "ArtifactResult describes the result of attempting to delete a given Artifact",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "error": {
                    "description": "Error is an optional error message which should be set if Success==false",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the Artifact",
                    "type": "string",
                    "default": ""
                },
                "success": {
                    "description": "Success describes whether the deletion succeeded",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactResultNodeStatus": {
            "description": "ArtifactResultNodeStatus describes the result of the deletion on a given node",
            "type": "object",
            "properties": {
                "artifactResults": {
                    "description": "ArtifactResults maps Artifact name to result of the deletion",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactResult"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactResultNodeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactSearchQuery": {
            "type": "object",
            "properties": {
                "artifactGCStrategies": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "artifactName": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "nodeId": {
                    "type": "string"
                },
                "nodeTypes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "templateName": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactSearchQuery",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactSearchResult": {
            "type": "object",
            "required": [
                "Artifact",
                "NodeID"
            ],
            "properties": {
                "Artifact": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                },
                "NodeID": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactSearchResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryArtifact": {
            "description": "ArtifactoryArtifact is the location of an artifactory artifact",
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL of the artifact",
                    "type": "string",
                    "default": ""
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryArtifactRepository": {
            "description": "ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository",
            "type": "object",
            "properties": {
                "keyFormat": {
                    "description": "KeyFormat defines the format of how to store keys and can reference workflow variables.",
                    "type": "string"
                },
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "repoURL": {
                    "description": "RepoURL is the url for artifactory repo.",
                    "type": "string"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryAuth": {
            "description": "ArtifactoryAuth describes the secret selectors required for authenticating to artifactory",
            "type": "object",
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureArtifact": {
            "description": "AzureArtifact is the location of a an Azure Storage artifact",
            "type": "object",
            "required": [
                "endpoint",
                "container",
                "blob"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "blob": {
                    "description": "Blob is the blob name (i.e., path) in the container where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureArtifactRepository": {
            "description": "AzureArtifactRepository defines the controller configuration for an Azure Blob Storage artifact repository",
            "type": "object",
            "required": [
                "endpoint",
                "container"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "blobNameFormat": {
                    "description": "BlobNameFormat is defines the format of how to store blob names. Can reference workflow variables",
                    "type": "string"
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureBlobContainer": {
            "description": "AzureBlobContainer contains the access information for interfacing with an Azure Blob Storage container",
            "type": "object",
            "required": [
                "endpoint",
                "container"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureBlobContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Backoff": {
            "description": "Backoff is a backoff strategy to use within retryStrategy",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                    "type": "string"
                },
                "factor": {
                    "description": "Factor is a factor to multiply the base duration after each failed retry",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxDuration": {
                    "description": "MaxDuration is the maximum amount of time allowed for a workflow in the backoff strategy",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Backoff",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.BasicAuth": {
            "description": "BasicAuth describes the secret selectors required for basic authentication",
            "type": "object",
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BasicAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Cache": {
            "description": "Cache is the configuration for the type of cache to be used",
            "type": "object",
            "required": [
                "configMap"
            ],
            "properties": {
                "configMap": {
                    "description": "ConfigMap sets a ConfigMap-based cache",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Cache",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClientCertAuth": {
            "description": "ClientCertAuth holds necessary information for client authentication via certificates",
            "type": "object",
            "properties": {
                "clientCertSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "clientKeySecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClientCertAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplate": {
            "description": "ClusterWorkflowTemplate is the definition of a workflow template resource in cluster scope",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterWorkflowTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplateList": {
            "description": "ClusterWorkflowTemplateList is list of ClusterWorkflowTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterWorkflowTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Column": {
            "description": "Column is a custom column that will be exposed in the Workflow List View.",
            "type": "object",
            "required": [
                "name",
                "type",
                "key"
            ],
            "properties": {
                "key": {
                    "description": "The key of the label or annotation, e.g., \"workflows.argoproj.io/completed\".",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "The name of this column, e.g., \"Workflow Completed\".",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "The type of this column, \"label\" or \"annotation\".",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Column",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Condition": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is the condition message",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the condition",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the type of condition",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Condition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerNode": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerNode",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerSetRetryStrategy": {
            "type": "object",
            "required": [
                "retries"
            ],
            "properties": {
                "duration": {
                    "description": "Duration is the time between each retry, examples values are \"300ms\", \"1s\" or \"5m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
                    "type": "string"
                },
                "retries": {
                    "description": "Nbr of retries",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerSetRetryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerSetTemplate": {
            "type": "object",
            "required": [
                "containers"
            ],
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerNode"
                    }
                },
                "retryStrategy": {
                    "description": "RetryStrategy describes how to retry a container nodes in the container set if it fails. Nbr of retries(default 0) and sleep duration between retries(default 0s, instant retry) can be set.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerSetRetryStrategy"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerSetTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContinueOn": {
            "description": "ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.",
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "failed": {
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContinueOn",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Counter": {
            "description": "Counter is a Counter prometheus metric",
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "description": "Value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Counter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CreateS3BucketOptions": {
            "description": "CreateS3BucketOptions options used to determine automatic automatic bucket-creation process",
            "type": "object",
            "properties": {
                "objectLocking": {
                    "description": "ObjectLocking Enable object locking",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CreateS3BucketOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflow": {
            "description": "CronWorkflow is the definition of a scheduled workflow resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflowSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflowStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflow",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowList": {
            "description": "CronWorkflowList is list of CronWorkflow resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowSpec": {
            "description": "CronWorkflowSpec is the specification of a CronWorkflow",
            "type": "object",
            "required": [
                "workflowSpec",
                "schedule"
            ],
            "properties": {
                "concurrencyPolicy": {
                    "description": "ConcurrencyPolicy is the K8s-style concurrency policy that will be used",
                    "type": "string"
                },
                "failedJobsHistoryLimit": {
                    "description": "FailedJobsHistoryLimit is the number of failed jobs to be kept at a time",
                    "type": "integer",
                    "format": "int32"
                },
                "schedule": {
                    "description": "Schedule is a schedule to run the Workflow in Cron format",
                    "type": "string",
                    "default": ""
                },
                "startingDeadlineSeconds": {
                    "description": "StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.",
                    "type": "integer",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "description": "SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time",
                    "type": "integer",
                    "format": "int32"
                },
                "suspend": {
                    "description": "Suspend is a flag that will stop new CronWorkflows from running if set to true",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.",
                    "type": "string"
                },
                "workflowMetadata": {
                    "description": "WorkflowMetadata contains some metadata of the workflow to be run",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "workflowSpec": {
                    "description": "WorkflowSpec is the spec of the workflow to be run",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowStatus": {
            "description": "CronWorkflowStatus is the status of a CronWorkflow",
            "type": "object",
            "required": [
                "active",
                "lastScheduledTime",
                "conditions"
            ],
            "properties": {
                "active": {
                    "description": "Active is a list of active workflows stemming from this CronWorkflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    }
                },
                "conditions": {
                    "description": "Conditions is a list of conditions the CronWorkflow may have",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Condition"
                    }
                },
                "lastScheduledTime": {
                    "description": "LastScheduleTime is the last time the CronWorkflow was scheduled",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DAGTask": {
            "description": "DAGTask represents a node in the graph during DAG execution",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "arguments": {
                    "description": "Arguments are the parameter and artifact arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "continueOn": {
                    "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContinueOn"
                },
                "dependencies": {
                    "description": "Dependencies are name of other targets which this depends on",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "depends": {
                    "description": "Depends are name of other targets which this depends on",
                    "type": "string"
                },
                "hooks": {
                    "description": "Hooks hold the lifecycle hook which is invoked at lifecycle of task, irrespective of the success, failure, or error status of the primary task",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "inline": {
                    "description": "Inline is the template. Template must be empty if this is declared (and vice-versa).",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "name": {
                    "description": "Name is the name of the target",
                    "type": "string",
                    "default": ""
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.",
                    "type": "string"
                },
                "template": {
                    "description": "Name of template to execute",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "when": {
                    "description": "When is an expression in which the task should conditionally execute",
                    "type": "string"
                },
                "withItems": {
                    "description": "WithItems expands a task into multiple parallel tasks from the items in the list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Item"
                    }
                },
                "withParam": {
                    "description": "WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list.",
                    "type": "string"
                },
                "withSequence": {
                    "description": "WithSequence expands a task into a numeric sequence",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Sequence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DAGTask",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DAGTemplate": {
            "description": "DAGTemplate is a template subtype for directed acyclic graph templates",
            "type": "object",
            "required": [
                "tasks"
            ],
            "properties": {
                "failFast": {
                    "description": "This flag is for DAG logic. The DAG logic has a built-in \"fail fast\" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442",
                    "type": "boolean"
                },
                "target": {
                    "description": "Target are one or more names of targets to execute in a DAG",
                    "type": "string"
                },
                "tasks": {
                    "description": "Tasks are a list of DAG tasks",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DAGTask"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DAGTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Data": {
            "description": "Data is a data template",
            "type": "object",
            "required": [
                "source",
                "transformation"
            ],
            "properties": {
                "source": {
                    "description": "Source sources external data into a data template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DataSource"
                },
                "transformation": {
                    "description": "Transformation applies a set of transformations",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TransformationStep"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Data",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DataSource": {
            "description": "DataSource sources external data into a data template",
            "type": "object",
            "properties": {
                "artifactPaths": {
                    "description": "ArtifactPaths is a data transformation that collects a list of artifact paths",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactPaths"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DataSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Event": {
            "type": "object",
            "required": [
                "selector"
            ],
            "properties": {
                "selector": {
                    "description": "Selector (https://github.com/antonmedv/expr) that we must must match the event. E.g. `payload.message == \"test\"`",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Event",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ExecutorConfig": {
            "description": "ExecutorConfig holds configurations of an executor container.",
            "type": "object",
            "properties": {
                "serviceAccountName": {
                    "description": "ServiceAccountName specifies the service account name of the executor container.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExecutorConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSArtifact": {
            "description": "GCSArtifact is the location of a GCS artifact",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "key": {
                    "description": "Key is the path in the bucket where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSArtifactRepository": {
            "description": "GCSArtifactRepository defines the controller configuration for a GCS artifact repository",
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "keyFormat": {
                    "description": "KeyFormat defines the format of how to store keys and can reference workflow variables.",
                    "type": "string"
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSBucket": {
            "description": "GCSBucket contains the access information for interfacring with a GCS bucket",
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSBucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Gauge": {
            "description": "Gauge is a Gauge prometheus metric",
            "type": "object",
            "required": [
                "value",
                "realtime"
            ],
            "properties": {
                "operation": {
                    "description": "Operation defines the operation to apply with value and the metrics' current value",
                    "type": "string"
                },
                "realtime": {
                    "description": "Realtime emits this metric in real time if applicable",
                    "type": "boolean"
                },
                "value": {
                    "description": "Value is the value to be used in the operation with the metric's current value. If no operation is set, value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Gauge",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GitArtifact": {
            "description": "GitArtifact is the location of an git artifact",
            "type": "object",
            "required": [
                "repo"
            ],
            "properties": {
                "branch": {
                    "description": "Branch is the branch to fetch when `SingleBranch` is enabled",
                    "type": "string"
                },
                "depth": {
                    "description": "Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip",
                    "type": "integer",
                    "format": "int64"
                },
                "disableSubmodules": {
                    "description": "DisableSubmodules disables submodules during git clone",
                    "type": "boolean"
                },
                "fetch": {
                    "description": "Fetch specifies a number of refs that should be fetched before checkout",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "insecureIgnoreHostKey": {
                    "description": "InsecureIgnoreHostKey disables SSH strict host key checking during git clone",
                    "type": "boolean"
                },
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "repo": {
                    "description": "Repo is the git repository",
                    "type": "string",
                    "default": ""
                },
                "revision": {
                    "description": "Revision is the git commit, tag, branch to checkout",
                    "type": "string"
                },
                "singleBranch": {
                    "description": "SingleBranch enables single branch clone, using the `branch` parameter",
                    "type": "boolean"
                },
                "sshPrivateKeySecret": {
                    "description": "SSHPrivateKeySecret is the secret selector to the repository ssh private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSArtifact": {
            "description": "HDFSArtifact is the location of an HDFS artifact",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "force": {
                    "description": "Force copies a file forcibly even if it exists",
                    "type": "boolean"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "path": {
                    "description": "Path is a file path in HDFS",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSArtifactRepository": {
            "description": "HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "force": {
                    "description": "Force copies a file forcibly even if it exists",
                    "type": "boolean"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "pathFormat": {
                    "description": "PathFormat is defines the format of path to store a file. Can reference workflow variables",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSConfig": {
            "description": "HDFSConfig is configurations for HDFS",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSKrbConfig": {
            "description": "HDFSKrbConfig is auth configurations for Kerberos",
            "type": "object",
            "properties": {
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSKrbConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTP": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "body": {
                    "description": "Body is content of the HTTP Request",
                    "type": "string"
                },
                "bodyFrom": {
                    "description": "BodyFrom is  content of the HTTP Request as Bytes",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPBodySource"
                },
                "headers": {
                    "description": "Headers are an optional list of headers to send with HTTP requests",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPHeader"
                    }
                },
                "insecureSkipVerify": {
                    "description": "InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client",
                    "type": "boolean"
                },
                "method": {
                    "description": "Method is HTTP methods for HTTP Request",
                    "type": "string"
                },
                "successCondition": {
                    "description": "SuccessCondition is an expression if evaluated to true is considered successful",
                    "type": "string"
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds",
                    "type": "integer",
                    "format": "int64"
                },
                "url": {
                    "description": "URL of the HTTP Request",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTP",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPArtifact": {
            "description": "HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container",
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "auth": {
                    "description": "Auth contains information for client authentication",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPAuth"
                },
                "headers": {
                    "description": "Headers are an optional list of headers to send with HTTP requests for artifacts",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Header"
                    }
                },
                "url": {
                    "description": "URL of the artifact",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPAuth": {
            "type": "object",
            "properties": {
                "basicAuth": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.BasicAuth"
                },
                "clientCert": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ClientCertAuth"
                },
                "oauth2": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OAuth2Auth"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPBodySource": {
            "description": "HTTPBodySource contains the source of the HTTP body.",
            "type": "object",
            "properties": {
                "bytes": {
                    "type": "string",
                    "format": "byte"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPBodySource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPHeader": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string"
                },
                "valueFrom": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPHeaderSource"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPHeader",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPHeaderSource": {
            "type": "object",
            "properties": {
                "secretKeyRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPHeaderSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Header": {
            "description": "Header indicate a key-value request header to be used when fetching artifacts over HTTP",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "description": "Name is the header name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the header",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Header",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Histogram": {
            "description": "Histogram is a Histogram prometheus metric",
            "type": "object",
            "required": [
                "value",
                "buckets"
            ],
            "properties": {
                "buckets": {
                    "description": "Buckets is a list of bucket divisors for the histogram",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Amount"
                    }
                },
                "value": {
                    "description": "Value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Histogram",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Inputs": {
            "description": "Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifact are a list of artifacts passed as inputs",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "parameters": {
                    "description": "Parameters are a list of parameters passed as inputs",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Inputs",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Item": {
            "description": "Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Item",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelKeys": {
            "description": "LabelKeys is list of keys",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelKeys",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelValueFrom": {
            "type": "object",
            "required": [
                "expression"
            ],
            "properties": {
                "expression": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelValues": {
            "description": "Labels is list of workflow labels",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelValues",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LifecycleHook": {
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments hold arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "expression": {
                    "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of the template to execute by the hook",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute by the hook",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LifecycleHook",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Link": {
            "description": "A link to another app.",
            "type": "object",
            "required": [
                "name",
                "scope",
                "url"
            ],
            "properties": {
                "name": {
                    "description": "The name of the link, E.g. \"Workflow Logs\" or \"Pod Logs\"",
                    "type": "string",
                    "default": ""
                },
                "scope": {
                    "description": "\"workflow\", \"pod\", \"pod-logs\", \"event-source-logs\", \"sensor-logs\", \"workflow-list\" or \"chat\"",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "The URL. Can contain \"${metadata.namespace}\", \"${metadata.name}\", \"${status.startedAt}\", \"${status.finishedAt}\" or any other element in workflow yaml, e.g. \"${workflow.metadata.annotations.userDefinedKey}\"",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Link",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ManifestFrom": {
            "type": "object",
            "required": [
                "artifact"
            ],
            "properties": {
                "artifact": {
                    "description": "Artifact contains the artifact to use",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ManifestFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MemoizationStatus": {
            "description": "MemoizationStatus is the status of this memoized node",
            "type": "object",
            "required": [
                "hit",
                "key",
                "cacheName"
            ],
            "properties": {
                "cacheName": {
                    "description": "Cache is the name of the cache that was used",
                    "type": "string",
                    "default": ""
                },
                "hit": {
                    "description": "Hit indicates whether this node was created from a cache entry",
                    "type": "boolean",
                    "default": false
                },
                "key": {
                    "description": "Key is the name of the key used for this node's cache",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MemoizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Memoize": {
            "description": "Memoization enables caching for the Outputs of the template",
            "type": "object",
            "required": [
                "key",
                "cache",
                "maxAge"
            ],
            "properties": {
                "cache": {
                    "description": "Cache sets and configures the kind of cache",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Cache"
                },
                "key": {
                    "description": "Key is the key to use as the caching key",
                    "type": "string",
                    "default": ""
                },
                "maxAge": {
                    "description": "MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Memoize",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Metadata": {
            "description": "Pod metdata",
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Metadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MetricLabel": {
            "description": "MetricLabel is a single label for a prometheus metric",
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MetricLabel",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Metrics": {
            "description": "Metrics are a list of metrics emitted from a Workflow/Template",
            "type": "object",
            "required": [
                "prometheus"
            ],
            "properties": {
                "prometheus": {
                    "description": "Prometheus is a list of prometheus metrics to be emitted",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Prometheus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Metrics",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Mutex": {
            "description": "Mutex holds Mutex configuration",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name of the mutex",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the namespace of the mutex, default: [namespace of workflow]",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Mutex",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MutexHolding": {
            "description": "MutexHolding describes the mutex and the object which is holding it.",
            "type": "object",
            "properties": {
                "holder": {
                    "description": "Holder is a reference to the object which holds the Mutex. Holding Scenario:\n  1. Current workflow's NodeID which is holding the lock.\n     e.g: ${NodeID}\nWaiting Scenario:\n  1. Current workflow or other workflow NodeID which is holding the lock.\n     e.g: ${WorkflowName}/${NodeID}",
                    "type": "string"
                },
                "mutex": {
                    "description": "Reference for the mutex e.g: ${namespace}/mutex/${mutexName}",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MutexHolding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MutexStatus": {
            "description": "MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.",
            "type": "object",
            "properties": {
                "holding": {
                    "description": "Holding is a list of mutexes and their respective objects that are held by mutex lock for this workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexHolding"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "waiting": {
                    "description": "Waiting is a list of mutexes and their respective objects this workflow is waiting for.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexHolding"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MutexStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeFlag": {
            "type": "object",
            "properties": {
                "hooked": {
                    "description": "Hooked tracks whether or not this node was triggered by hook or onExit",
                    "type": "boolean"
                },
                "retried": {
                    "description": "Retried tracks whether or not this node was retried by retryStrategy",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeFlag",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "outputs": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "type": "string"
                },
                "progress": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeStatus": {
            "description": "NodeStatus contains status information about an individual node in the workflow",
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ],
            "properties": {
                "boundaryID": {
                    "description": "BoundaryID indicates the node ID of the associated template root node in which this node belongs to",
                    "type": "string"
                },
                "children": {
                    "description": "Children is a list of child node IDs",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "daemoned": {
                    "description": "Daemoned tracks whether or not this node was daemoned and need to be terminated",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "DisplayName is a human readable representation of the node. Unique within a template boundary",
                    "type": "string"
                },
                "estimatedDuration": {
                    "description": "EstimatedDuration in seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "finishedAt": {
                    "description": "Time at which this node completed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "hostNodeName": {
                    "description": "HostNodeName name of the Kubernetes node on which the Pod is running, if applicable",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic",
                    "type": "string",
                    "default": ""
                },
                "inputs": {
                    "description": "Inputs captures input parameter values and artifact locations supplied to this template invocation",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Inputs"
                },
                "memoizationStatus": {
                    "description": "MemoizationStatus holds information about cached nodes",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MemoizationStatus"
                },
                "message": {
                    "description": "A human readable message indicating details about why the node is in this condition.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is unique name in the node tree used to generate the node ID",
                    "type": "string",
                    "default": ""
                },
                "nodeFlag": {
                    "description": "NodeFlag tracks some history of node. e.g.) hooked, retried, etc.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeFlag"
                },
                "outboundNodes": {
                    "description": "OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.\n\nIn the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "outputs": {
                    "description": "Outputs captures output parameter values and artifact locations produced by this template invocation",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "description": "Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \"Pending\", \"Running\" before the node is completed, or \"Succeeded\", \"Skipped\", \"Failed\", \"Error\", or \"Omitted\" as a final state.",
                    "type": "string"
                },
                "podIP": {
                    "description": "PodIP captures the IP of the pod for daemoned steps",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress to completion",
                    "type": "string"
                },
                "resourcesDuration": {
                    "description": "ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64",
                        "default": 0
                    }
                },
                "startedAt": {
                    "description": "Time at which this node started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "synchronizationStatus": {
                    "description": "SynchronizationStatus is the synchronization status of the node",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeSynchronizationStatus"
                },
                "templateName": {
                    "description": "TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "templateScope": {
                    "description": "TemplateScope is the template scope in which the template of this node was retrieved.",
                    "type": "string"
                },
                "type": {
                    "description": "Type indicates type of node",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeSynchronizationStatus": {
            "description": "NodeSynchronizationStatus stores the status of a node",
            "type": "object",
            "properties": {
                "waiting": {
                    "description": "Waiting is the name of the lock that this node is waiting for",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeSynchronizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NoneStrategy": {
            "description": "NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NoneStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OAuth2Auth": {
            "description": "OAuth2Auth holds all information for client authentication via OAuth2 tokens",
            "type": "object",
            "properties": {
                "clientIDSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "clientSecretSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpointParams": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OAuth2EndpointParam"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tokenURLSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OAuth2Auth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OAuth2EndpointParam": {
            "description": "EndpointParam is for requesting optional fields that should be sent in the oauth request",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "description": "Name is the header name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the header",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OAuth2EndpointParam",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSArtifact": {
            "description": "OSSArtifact is the location of an Alibaba Cloud OSS artifact",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "key": {
                    "description": "Key is the path in the bucket where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSArtifactRepository": {
            "description": "OSSArtifactRepository defines the controller configuration for an OSS artifact repository",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "keyFormat": {
                    "description": "KeyFormat defines the format of how to store keys and can reference workflow variables.",
                    "type": "string"
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSBucket": {
            "description": "OSSBucket contains the access information required for interfacing with an Alibaba Cloud OSS bucket",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSBucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSLifecycleRule": {
            "description": "OSSLifecycleRule specifies how to manage bucket's lifecycle",
            "type": "object",
            "properties": {
                "markDeletionAfterDays": {
                    "description": "MarkDeletionAfterDays is the number of days before we delete objects in the bucket",
                    "type": "integer",
                    "format": "int32"
                },
                "markInfrequentAccessAfterDays": {
                    "description": "MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSLifecycleRule",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Object": {
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Object",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Outputs": {
            "description": "Outputs hold parameters, artifacts, and results from a step",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifacts holds the list of output artifacts produced by a step",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "exitCode": {
                    "description": "ExitCode holds the exit code of a script template",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters holds the list of output parameters produced by a step",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "result": {
                    "description": "Result holds the result (stdout) of a script template",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Outputs",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ParallelSteps": {
            "type": "array",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ParallelSteps",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Parameter": {
            "description": "Parameter indicate a passed string parameter to a service template with an optional default value",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "default": {
                    "description": "Default is the default value to use for an input parameter if a value was not supplied",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the parameter description",
                    "type": "string"
                },
                "enum": {
                    "description": "Enum holds a list of string values to choose from, for the actual value of the parameter",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "globalName": {
                    "description": "GlobalName exports an output parameter to the global scope, making it available as '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the parameter name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "ValueFrom is the source for the output parameter's value",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Parameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Plugin": {
            "description": "Plugin is an Object with exactly one key",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Plugin",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.PodGC": {
            "description": "PodGC describes how to delete completed pods as they complete",
            "type": "object",
            "properties": {
                "deleteDelayDuration": {
                    "description": "DeleteDelayDuration specifies the duration before pods in the GC queue get deleted.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
                },
                "labelSelector": {
                    "description": "LabelSelector is the label selector to check if the pods match the labels before being added to the pod GC queue.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". If unset, does not delete Pods",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PodGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Prometheus": {
            "description": "Prometheus is a prometheus metric to be emitted",
            "type": "object",
            "required": [
                "name",
                "help"
            ],
            "properties": {
                "counter": {
                    "description": "Counter is a counter metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Counter"
                },
                "gauge": {
                    "description": "Gauge is a gauge metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Gauge"
                },
                "help": {
                    "description": "Help is a string that describes the metric",
                    "type": "string",
                    "default": ""
                },
                "histogram": {
                    "description": "Histogram is a histogram metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Histogram"
                },
                "labels": {
                    "description": "Labels is a list of metric labels",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MetricLabel"
                    }
                },
                "name": {
                    "description": "Name is the name of the metric",
                    "type": "string",
                    "default": ""
                },
                "when": {
                    "description": "When is a conditional statement that decides when to emit the metric",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Prometheus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RawArtifact": {
            "description": "RawArtifact allows raw string content to be placed as an artifact in a container",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "Data is the string contents of the artifact",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RawArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ResourceTemplate": {
            "description": "ResourceTemplate is a template subtype to manipulate kubernetes resources",
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "description": "Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch",
                    "type": "string",
                    "default": ""
                },
                "failureCondition": {
                    "description": "FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t\"--validate=false\"  # disable resource validation\n]",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "manifest": {
                    "description": "Manifest contains the kubernetes manifest",
                    "type": "string"
                },
                "manifestFrom": {
                    "description": "ManifestFrom is the source for a single kubernetes manifest",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ManifestFrom"
                },
                "mergeStrategy": {
                    "description": "MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json",
                    "type": "string"
                },
                "setOwnerReference": {
                    "description": "SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.",
                    "type": "boolean"
                },
                "successCondition": {
                    "description": "SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryAffinity": {
            "description": "RetryAffinity prevents running steps on the same host.",
            "type": "object",
            "properties": {
                "nodeAntiAffinity": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryNodeAntiAffinity"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryAffinity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryNodeAntiAffinity": {
            "description": "RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed. In order to prevent running steps on the same host, it uses \"kubernetes.io/hostname\".",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryNodeAntiAffinity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryStrategy": {
            "description": "RetryStrategy provides controls on how to retry a workflow step",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Affinity prevents running workflow's step on the same host",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryAffinity"
                },
                "backoff": {
                    "description": "Backoff is a backoff strategy",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Backoff"
                },
                "expression": {
                    "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit is the maximum number of retry attempts when retrying a container. It does not include the original container; the maximum number of total attempts will be `limit + 1`.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "retryPolicy": {
                    "description": "RetryPolicy is a policy of NodePhase statuses that will be retried",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3Artifact": {
            "description": "S3Artifact is the location of an S3 artifact",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "caSecret": {
                    "description": "CASecret specifies the secret that contains the CA, used to verify the TLS connection",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "key": {
                    "description": "Key is the key in the bucket where the artifact resides",
                    "type": "string"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3Artifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3ArtifactRepository": {
            "description": "S3ArtifactRepository defines the controller configuration for an S3 artifact repository",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "caSecret": {
                    "description": "CASecret specifies the secret that contains the CA, used to verify the TLS connection",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "keyFormat": {
                    "description": "KeyFormat defines the format of how to store keys and can reference workflow variables.",
                    "type": "string"
                },
                "keyPrefix": {
                    "description": "KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead",
                    "type": "string"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3ArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3Bucket": {
            "description": "S3Bucket contains the access information required for interfacing with an S3 bucket",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "caSecret": {
                    "description": "CASecret specifies the secret that contains the CA, used to verify the TLS connection",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3Bucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3EncryptionOptions": {
            "description": "S3EncryptionOptions used to determine encryption options during s3 operations",
            "type": "object",
            "properties": {
                "enableEncryption": {
                    "description": "EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used",
                    "type": "boolean"
                },
                "kmsEncryptionContext": {
                    "description": "KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information",
                    "type": "string"
                },
                "kmsKeyId": {
                    "description": "KMSKeyId tells the driver to encrypt the object using the specified KMS Key.",
                    "type": "string"
                },
                "serverSideCustomerKeySecret": {
                    "description": "ServerSideCustomerKeySecret tells the driver to encrypt the output artifacts using SSE-C with the specified secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3EncryptionOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ScriptTemplate": {
            "description": "ScriptTemplate is a template subtype to enable scripting through code steps",
            "type": "object",
            "required": [
                "name",
                "source"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "source": {
                    "description": "Source contains the source code of the script to execute",
                    "type": "string",
                    "default": ""
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ScriptTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreHolding": {
            "type": "object",
            "properties": {
                "holders": {
                    "description": "Holders stores the list of current holder names in the workflow.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "semaphore": {
                    "description": "Semaphore stores the semaphore name.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreHolding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreRef": {
            "description": "SemaphoreRef is a reference of Semaphore",
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "ConfigMapKeyRef is configmap selector for Semaphore configuration",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "namespace": {
                    "description": "Namespace is the namespace of the configmap, default: [namespace of workflow]",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreStatus": {
            "type": "object",
            "properties": {
                "holding": {
                    "description": "Holding stores the list of resource acquired synchronization lock for workflows.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreHolding"
                    }
                },
                "waiting": {
                    "description": "Waiting indicates the list of current synchronization lock holders.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreHolding"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Sequence": {
            "description": "Sequence expands a workflow step into numeric range",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count is number of elements in the sequence (default: 0). Not to be used with end",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "end": {
                    "description": "Number at which to end the sequence (default: 0). Not to be used with Count",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "format": {
                    "description": "Format is a printf format string to format the value in the sequence",
                    "type": "string"
                },
                "start": {
                    "description": "Number at which to start the sequence (default: 0)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Sequence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Submit": {
            "type": "object",
            "required": [
                "workflowTemplateRef"
            ],
            "properties": {
                "arguments": {
                    "description": "Arguments extracted from the event and then set as arguments to the workflow created.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "metadata": {
                    "description": "Metadata optional means to customize select fields of the workflow metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "workflowTemplateRef": {
                    "description": "WorkflowTemplateRef the workflow template to submit",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Submit",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SubmitOpts": {
            "description": "SubmitOpts are workflow submission options",
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations adds to metadata.labels",
                    "type": "string"
                },
                "dryRun": {
                    "description": "DryRun validates the workflow on the client-side without creating it. This option is not supported in API",
                    "type": "boolean"
                },
                "entryPoint": {
                    "description": "Entrypoint overrides spec.entrypoint",
                    "type": "string"
                },
                "generateName": {
                    "description": "GenerateName overrides metadata.generateName",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels adds to metadata.labels",
                    "type": "string"
                },
                "name": {
                    "description": "Name overrides metadata.name",
                    "type": "string"
                },
                "ownerReference": {
                    "description": "OwnerReference creates a metadata.ownerReference",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                },
                "parameters": {
                    "description": "Parameters passes input parameters to workflow",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "podPriorityClassName": {
                    "description": "Set the podPriorityClassName of the workflow",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.",
                    "type": "integer",
                    "format": "int32"
                },
                "serverDryRun": {
                    "description": "ServerDryRun validates the workflow on the server-side without creating it",
                    "type": "boolean"
                },
                "serviceAccount": {
                    "description": "ServiceAccount runs all pods in the workflow using specified ServiceAccount.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SubmitOpts",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SuppliedValueFrom": {
            "description": "SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SuppliedValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SuspendTemplate": {
            "description": "SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the seconds to wait before automatically resuming a template. Must be a string. Default unit is seconds. Could also be a Duration, e.g.: \"2m\", \"6h\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SuspendTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Synchronization": {
            "description": "Synchronization holds synchronization lock configuration",
            "type": "object",
            "properties": {
                "mutex": {
                    "description": "Mutex holds the Mutex lock details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Mutex"
                },
                "semaphore": {
                    "description": "Semaphore holds the Semaphore configuration",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Synchronization",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SynchronizationStatus": {
            "description": "SynchronizationStatus stores the status of semaphore and mutex.",
            "type": "object",
            "properties": {
                "mutex": {
                    "description": "Mutex stores this workflow's mutex holder details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexStatus"
                },
                "semaphore": {
                    "description": "Semaphore stores this workflow's Semaphore holder details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SynchronizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TTLStrategy": {
            "description": "TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed",
            "type": "object",
            "properties": {
                "secondsAfterCompletion": {
                    "description": "SecondsAfterCompletion is the number of seconds to live after completion",
                    "type": "integer",
                    "format": "int32"
                },
                "secondsAfterFailure": {
                    "description": "SecondsAfterFailure is the number of seconds to live after failure",
                    "type": "integer",
                    "format": "int32"
                },
                "secondsAfterSuccess": {
                    "description": "SecondsAfterSuccess is the number of seconds to live after success",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TTLStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TarStrategy": {
            "description": "TarStrategy will tar and gzip the file or directory when saving",
            "type": "object",
            "properties": {
                "compressionLevel": {
                    "description": "CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TarStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Template": {
            "description": "Template is a reusable and composable unit of execution in a workflow",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds relative to the StartTime that the pod may be active on a node before the system actively tries to terminate the pod; value must be positive integer This field is only applicable to container and script templates.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "affinity": {
                    "description": "Affinity sets the pod's scheduling constraints Overrides the affinity set at the workflow level (if any)",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "archiveLocation": {
                    "description": "Location in which all files related to the step will be stored (logs, artifacts, etc...). Can be overridden by individual items in Outputs. If omitted, will use the default artifact repository location configured in the controller, appended with the \u003cworkflowname\u003e/\u003cnodename\u003e in the key.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactLocation"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
                    "type": "boolean"
                },
                "container": {
                    "description": "Container is the main container image to run in the pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "containerSet": {
                    "description": "ContainerSet groups multiple containers within a single pod.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerSetTemplate"
                },
                "daemon": {
                    "description": "Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness",
                    "type": "boolean"
                },
                "dag": {
                    "description": "DAG template subtype which runs a DAG",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DAGTemplate"
                },
                "data": {
                    "description": "Data is a data template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Data"
                },
                "executor": {
                    "description": "Executor holds configurations of the executor container.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ExecutorConfig"
                },
                "failFast": {
                    "description": "FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with `withItems`, etc.",
                    "type": "boolean"
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod spec",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "http": {
                    "description": "HTTP makes a HTTP request",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTP"
                },
                "initContainers": {
                    "description": "InitContainers is a list of containers which run before the main container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.UserContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "inputs": {
                    "description": "Inputs describe what inputs parameters and artifacts are supplied to this template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Inputs"
                },
                "memoize": {
                    "description": "Memoize allows templates to use outputs generated from already executed templates",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Memoize"
                },
                "metadata": {
                    "description": "Metdata sets the pods's metadata, i.e. annotations and labels",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "metrics": {
                    "description": "Metrics are a list of metrics emitted from this template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metrics"
                },
                "name": {
                    "description": "Name is the name of the template",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "outputs": {
                    "description": "Outputs describe the parameters and artifacts that this template produces",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "parallelism": {
                    "description": "Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.",
                    "type": "integer",
                    "format": "int64"
                },
                "plugin": {
                    "description": "Plugin is a plugin template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Plugin"
                },
                "podSpecPatch": {
                    "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority to apply to workflow pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "PriorityClassName to apply to workflow pods.",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource template subtype which can run k8s resources",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ResourceTemplate"
                },
                "retryStrategy": {
                    "description": "RetryStrategy describes how to retry a template when it fails",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryStrategy"
                },
                "schedulerName": {
                    "description": "If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.",
                    "type": "string"
                },
                "script": {
                    "description": "Script runs a portion of code against an interpreter",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ScriptTemplate"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to workflow pods",
                    "type": "string"
                },
                "sidecars": {
                    "description": "Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.UserContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "steps": {
                    "description": "Steps define a series of sequential/parallel workflow steps",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ParallelSteps"
                    }
                },
                "suspend": {
                    "description": "Suspend template subtype which can suspend a workflow when reaching the step",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SuspendTemplate"
                },
                "synchronization": {
                    "description": "Synchronization holds synchronization lock configuration for this template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Synchronization"
                },
                "timeout": {
                    "description": "Timeout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Tolerations to apply to workflow pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a template.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TemplateRef": {
            "description": "TemplateRef is a reference of template resource.",
            "type": "object",
            "properties": {
                "clusterScope": {
                    "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the resource name of the template.",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of referred template in the resource.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TransformationStep": {
            "type": "object",
            "required": [
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression defines an expr expression to apply",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TransformationStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.UserContainer": {
            "description": "UserContainer is a container specified by a user.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "mirrorVolumeMounts": {
                    "description": "MirrorVolumeMounts will mount the same volumes specified in the main container to the container (including artifacts), at the same mountPaths. This enables dind daemon to partially see the same filesystem as the main container in order to use features such as docker volume binding",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "UserContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ValueFrom": {
            "description": "ValueFrom describes a location in which to obtain the value to a parameter",
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "ConfigMapKeyRef is configmap selector for input parameter configuration",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "default": {
                    "description": "Default specifies a value to be used if retrieving the value from the specified source fails",
                    "type": "string"
                },
                "event": {
                    "description": "Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`",
                    "type": "string"
                },
                "expression": {
                    "description": "Expression, if defined, is evaluated to specify the value for the parameter",
                    "type": "string"
                },
                "jqFilter": {
                    "description": "JQFilter expression against the resource object in resource templates",
                    "type": "string"
                },
                "jsonPath": {
                    "description": "JSONPath of a resource to retrieve an output parameter value from in resource templates",
                    "type": "string"
                },
                "parameter": {
                    "description": "Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')",
                    "type": "string"
                },
                "path": {
                    "description": "Path in the container to retrieve an output parameter value from in container templates",
                    "type": "string"
                },
                "supplied": {
                    "description": "Supplied value to be filled in directly, either through the CLI, API, etc.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SuppliedValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Version": {
            "type": "object",
            "required": [
                "version",
                "buildDate",
                "gitCommit",
                "gitTag",
                "gitTreeState",
                "goVersion",
                "compiler",
                "platform"
            ],
            "properties": {
                "buildDate": {
                    "type": "string",
                    "default": ""
                },
                "compiler": {
                    "type": "string",
                    "default": ""
                },
                "gitCommit": {
                    "type": "string",
                    "default": ""
                },
                "gitTag": {
                    "type": "string",
                    "default": ""
                },
                "gitTreeState": {
                    "type": "string",
                    "default": ""
                },
                "goVersion": {
                    "type": "string",
                    "default": ""
                },
                "platform": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Version",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.VolumeClaimGC": {
            "description": "VolumeClaimGC describes how to delete volumes from completed Workflows",
            "type": "object",
            "properties": {
                "strategy": {
                    "description": "Strategy is the strategy to use. One of \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". Defaults to \"OnWorkflowSuccess\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "VolumeClaimGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Workflow": {
            "description": "Workflow is the definition of a workflow resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Workflow",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTask": {
            "description": "WorkflowArtifactGCTask specifies the Artifacts that need to be deleted as well as the status of deletion",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGCSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGCStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowArtifactGCTask",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTaskList": {
            "description": "WorkflowArtifactGCTaskList is list of WorkflowArtifactGCTask resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTask"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowArtifactGCTaskList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBinding": {
            "description": "WorkflowEventBinding is the definition of an event resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowEventBindingSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBinding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBindingList": {
            "description": "WorkflowEventBindingList is list of event resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowEventBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBindingList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBindingSpec": {
            "type": "object",
            "required": [
                "event"
            ],
            "properties": {
                "event": {
                    "description": "Event is the event to bind to",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Event"
                },
                "submit": {
                    "description": "Submit is the workflow template to submit",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Submit"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBindingSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowLevelArtifactGC": {
            "description": "WorkflowLevelArtifactGC describes how to delete artifacts from completed Workflows - this spec is used on the Workflow level",
            "type": "object",
            "properties": {
                "forceFinalizerRemoval": {
                    "description": "ForceFinalizerRemoval: if set to true, the finalizer will be removed in the case that Artifact GC fails",
                    "type": "boolean"
                },
                "podMetadata": {
                    "description": "PodMetadata is an optional field for specifying the Labels and Annotations that should be assigned to the Pod doing the deletion",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "podSpecPatch": {
                    "description": "PodSpecPatch holds strategic merge patch to apply against the artgc pod spec.",
                    "type": "string"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion",
                    "type": "string"
                },
                "strategy": {
                    "description": "Strategy is the strategy to use.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowLevelArtifactGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowList": {
            "description": "WorkflowList is list of Workflow resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labelsFrom": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LabelValueFrom"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowSpec": {
            "description": "WorkflowSpec is the specification of a Workflow.",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the workflow. A value of zero is used to terminate a Running workflow",
                    "type": "integer",
                    "format": "int64"
                },
                "affinity": {
                    "description": "Affinity sets the scheduling constraints for all pods in the workflow. Can be overridden by an affinity specified in the template",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "arguments": {
                    "description": "Arguments contain the parameters and artifacts sent to the workflow entrypoint Parameters are referencable globally using the 'workflow' variable prefix. e.g. {{workflow.parameters.myparam}}",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when deleting artifacts from completed or deleted workflows (applies to all output Artifacts unless Artifact.ArtifactGC is specified, which overrides this)",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowLevelArtifactGC"
                },
                "artifactRepositoryRef": {
                    "description": "ArtifactRepositoryRef specifies the configMap name and key containing the artifact repository config.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepositoryRef"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
                    "type": "boolean"
                },
                "dnsConfig": {
                    "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible enum values:\n - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.\n - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.",
                    "type": "string",
                    "enum": [
                        "ClusterFirst",
                        "ClusterFirstWithHostNet",
                        "Default",
                        "None"
                    ]
                },
                "entrypoint": {
                    "description": "Entrypoint is a template reference to the starting point of the workflow.",
                    "type": "string"
                },
                "executor": {
                    "description": "Executor holds configurations of executor containers of the workflow.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ExecutorConfig"
                },
                "hooks": {
                    "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "hostNetwork": {
                    "description": "Host networking requested for this workflow pod. Default to false.",
                    "type": "boolean"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metrics": {
                    "description": "Metrics are a list of metrics emitted from this Workflow",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metrics"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary workflow.",
                    "type": "string"
                },
                "parallelism": {
                    "description": "Parallelism limits the max total parallel pods that can execute at the same time in a workflow",
                    "type": "integer",
                    "format": "int64"
                },
                "podDisruptionBudget": {
                    "description": "PodDisruptionBudget holds the number of concurrent disruptions that you allow for Workflow's Pods. Controller will automatically add the selector with workflow name, if selector is empty. Optional: Defaults to empty.",
                    "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec"
                },
                "podGC": {
                    "description": "PodGC describes the strategy to use when deleting completed pods",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.PodGC"
                },
                "podMetadata": {
                    "description": "PodMetadata defines additional metadata that should be applied to workflow pods",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "podPriority": {
                    "description": "Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead.",
                    "type": "integer",
                    "format": "int32"
                },
                "podPriorityClassName": {
                    "description": "PriorityClassName to apply to workflow pods.",
                    "type": "string"
                },
                "podSpecPatch": {
                    "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.",
                    "type": "integer",
                    "format": "int32"
                },
                "retryStrategy": {
                    "description": "RetryStrategy for all templates in the workflow.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryStrategy"
                },
                "schedulerName": {
                    "description": "Set scheduler name for all pods. Will be overridden if container/script template's scheduler name is set. Default scheduler will be used if neither specified.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.",
                    "type": "string"
                },
                "shutdown": {
                    "description": "Shutdown will shutdown the workflow according to its ShutdownStrategy",
                    "type": "string"
                },
                "suspend": {
                    "description": "Suspend will suspend the workflow and prevent execution of any future steps in the workflow",
                    "type": "boolean"
                },
                "synchronization": {
                    "description": "Synchronization holds synchronization lock configuration for this Workflow",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Synchronization"
                },
                "templateDefaults": {
                    "description": "TemplateDefaults holds default template values that will apply to all templates in the Workflow, unless overridden on the template-level",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "templates": {
                    "description": "Templates is a list of workflow templates used in a workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "tolerations": {
                    "description": "Tolerations to apply to workflow pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "ttlStrategy": {
                    "description": "TTLStrategy limits the lifetime of a Workflow that has finished execution depending on if it Succeeded or Failed. If this struct is set, once the Workflow finishes, it will be deleted after the time to live expires. If this field is unset, the controller config map will hold the default values.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TTLStrategy"
                },
                "volumeClaimGC": {
                    "description": "VolumeClaimGC describes the strategy to use when deleting volumes from completed workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.VolumeClaimGC"
                },
                "volumeClaimTemplates": {
                    "description": "VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workflowMetadata": {
                    "description": "WorkflowMetadata contains some metadata of the workflow to refer to",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowMetadata"
                },
                "workflowTemplateRef": {
                    "description": "WorkflowTemplateRef holds a reference to a WorkflowTemplate for execution",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowStatus": {
            "description": "WorkflowStatus contains overall status information about a workflow",
            "type": "object",
            "properties": {
                "artifactGCStatus": {
                    "description": "ArtifactGCStatus maintains the status of Artifact Garbage Collection",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtGCStatus"
                },
                "artifactRepositoryRef": {
                    "description": "ArtifactRepositoryRef is used to cache the repository to use so we do not need to determine it everytime we reconcile.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepositoryRefStatus"
                },
                "compressedNodes": {
                    "description": "Compressed and base64 decoded Nodes map",
                    "type": "string"
                },
                "conditions": {
                    "description": "Conditions is a list of conditions the Workflow may have",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Condition"
                    }
                },
                "estimatedDuration": {
                    "description": "EstimatedDuration in seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "finishedAt": {
                    "description": "Time at which this workflow completed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about why the workflow is in this condition.",
                    "type": "string"
                },
                "nodes": {
                    "description": "Nodes is a mapping between a node ID and the node's status.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeStatus"
                    }
                },
                "offloadNodeStatusVersion": {
                    "description": "Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.",
                    "type": "string"
                },
                "outputs": {
                    "description": "Outputs captures output values and artifact locations produced by the workflow via global outputs",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "persistentVolumeClaims": {
                    "description": "PersistentVolumeClaims tracks all PVCs that were created as part of the workflow. The contents of this list are drained at the end of the workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "phase": {
                    "description": "Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \"\" (Unknown), \"Pending\", or \"Running\" before the workflow is completed, and \"Succeeded\", \"Failed\" or \"Error\" once the workflow has completed.",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress to completion",
                    "type": "string"
                },
                "resourcesDuration": {
                    "description": "ResourcesDuration is the total for the workflow",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64",
                        "default": 0
                    }
                },
                "startedAt": {
                    "description": "Time at which this workflow started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "storedTemplates": {
                    "description": "StoredTemplates is a mapping between a template ref and the node's status.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    }
                },
                "storedWorkflowTemplateSpec": {
                    "description": "StoredWorkflowSpec stores the WorkflowTemplate spec for future execution.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                },
                "synchronization": {
                    "description": "Synchronization stores the status of synchronization locks",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SynchronizationStatus"
                },
                "taskResultsCompletionStatus": {
                    "description": "TaskResultsCompletionStatus tracks task result completion status (mapped by pod name). Used to prevent premature archiving and garbage collection.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowStep": {
            "description": "WorkflowStep is a reference to a template to execute in a series of step",
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments hold arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "continueOn": {
                    "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContinueOn"
                },
                "hooks": {
                    "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "inline": {
                    "description": "Inline is the template. Template must be empty if this is declared (and vice-versa).",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "name": {
                    "description": "Name of the step",
                    "type": "string"
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of the template to execute as the step",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute as the step.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "when": {
                    "description": "When is an expression in which the step should conditionally execute",
                    "type": "string"
                },
                "withItems": {
                    "description": "WithItems expands a step into multiple parallel steps from the items in the list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Item"
                    }
                },
                "withParam": {
                    "description": "WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.",
                    "type": "string"
                },
                "withSequence": {
                    "description": "WithSequence expands a step into a numeric sequence",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Sequence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskResult": {
            "description": "WorkflowTaskResult is a used to communicate a result back to the controller. Unlike WorkflowTaskSet, it has more capacity. This is an internal type. Users should never create this resource directly, much like you would never create a ReplicaSet directly.",
            "type": "object",
            "required": [
                "metadata"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "outputs": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "type": "string"
                },
                "progress": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskResultList": {
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskResult"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskResultList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSet": {
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetList": {
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetSpec": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetStatus": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeResult"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplate": {
            "description": "WorkflowTemplate is the definition of a workflow template resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplateList": {
            "description": "WorkflowTemplateList is list of WorkflowTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplateRef": {
            "description": "WorkflowTemplateRef is a reference to a WorkflowTemplate resource.",
            "type": "object",
            "properties": {
                "clusterScope": {
                    "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the resource name of the workflow template.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ZipStrategy": {
            "description": "ZipStrategy will unzip zipped input artifacts",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ZipStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1.MatchCondition": {
            "description": "MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.",
            "type": "object",
            "required": [
                "name",
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
            "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
            "type": "object",
            "required": [
                "name",
                "clientConfig",
                "sideEffects",
                "admissionReviewVersions"
            ],
            "properties": {
                "admissionReviewVersions": {
                    "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clientConfig": {
                    "description": "ClientConfig defines how to communicate with the hook. Required",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
                },
                "failurePolicy": {
                    "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
                    "type": "string",
                    "enum": [
                        "Fail",
                        "Ignore"
                    ]
                },
                "matchConditions": {
                    "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\nThis is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "matchPolicy": {
                    "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
                    "type": "string",
                    "enum": [
                        "Equivalent",
                        "Exact"
                    ]
                },
                "name": {
                    "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
                    "type": "string",
                    "default": ""
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "objectSelector": {
                    "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "reinvocationPolicy": {
                    "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".\n\nPossible enum values:\n - `\"IfNeeded\"` indicates that the webhook may be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call.\n - `\"Never\"` indicates that the webhook must not be called more than once in a single admission evaluation.",
                    "type": "string",
                    "enum": [
                        "IfNeeded",
                        "Never"
                    ]
                },
                "rules": {
                    "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
                    }
                },
                "sideEffects": {
                    "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\nPossible enum values:\n - `\"None\"` means that calling the webhook will have no side effects.\n - `\"NoneOnDryRun\"` means that calling the webhook will possibly have side effects, but if the request being reviewed has the dry-run attribute, the side effects will be suppressed.\n - `\"Some\"` means that calling the webhook will possibly have side effects. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.\n - `\"Unknown\"` means that no information is known about the side effects of calling the webhook. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.",
                    "type": "string",
                    "enum": [
                        "None",
                        "NoneOnDryRun",
                        "Some",
                        "Unknown"
                    ]
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration": {
            "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "webhooks": {
                    "description": "Webhooks is a list of webhooks and the affected resources and operations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "MutatingWebhookConfiguration",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
            "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of MutatingWebhookConfiguration.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "MutatingWebhookConfigurationList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1.Rule": {
            "description": "Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended to make sure that all the tuple expansions are valid.",
            "type": "object",
            "properties": {
                "apiGroups": {
                    "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "apiVersions": {
                    "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "scope": {
                    "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
            "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
            "type": "object",
            "properties": {
                "apiGroups": {
                    "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "apiVersions": {
                    "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "operations": {
                    "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "scope": {
                    "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.ServiceReference": {
            "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
            "type": "object",
            "required": [
                "namespace",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "`name` is the name of the service. Required",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "`namespace` is the namespace of the service. Required",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "`path` is an optional URL path which will be sent in any request to this service.",
                    "type": "string"
                },
                "port": {
                    "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
            "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
            "type": "object",
            "required": [
                "name",
                "clientConfig",
                "sideEffects",
                "admissionReviewVersions"
            ],
            "properties": {
                "admissionReviewVersions": {
                    "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clientConfig": {
                    "description": "ClientConfig defines how to communicate with the hook. Required",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
                },
                "failurePolicy": {
                    "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n\nPossible enum values:\n - `\"Fail\"` means that an error calling the webhook causes the admission to fail.\n - `\"Ignore\"` means that an error calling the webhook is ignored.",
                    "type": "string",
                    "enum": [
                        "Fail",
                        "Ignore"
                    ]
                },
                "matchConditions": {
                    "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\nThis is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "matchPolicy": {
                    "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"\n\nPossible enum values:\n - `\"Equivalent\"` means requests should be sent to the webhook if they modify a resource listed in rules via another API group or version.\n - `\"Exact\"` means requests should only be sent to the webhook if they exactly match a given rule.",
                    "type": "string",
                    "enum": [
                        "Equivalent",
                        "Exact"
                    ]
                },
                "name": {
                    "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
                    "type": "string",
                    "default": ""
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "objectSelector": {
                    "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "rules": {
                    "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
                    }
                },
                "sideEffects": {
                    "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.\n\nPossible enum values:\n - `\"None\"` means that calling the webhook will have no side effects.\n - `\"NoneOnDryRun\"` means that calling the webhook will possibly have side effects, but if the request being reviewed has the dry-run attribute, the side effects will be suppressed.\n - `\"Some\"` means that calling the webhook will possibly have side effects. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.\n - `\"Unknown\"` means that no information is known about the side effects of calling the webhook. If a request with the dry-run attribute would trigger a call to this webhook, the request will instead fail.",
                    "type": "string",
                    "enum": [
                        "None",
                        "NoneOnDryRun",
                        "Some",
                        "Unknown"
                    ]
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration": {
            "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "webhooks": {
                    "description": "Webhooks is a list of webhooks and the affected resources and operations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingWebhookConfiguration",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
            "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ValidatingWebhookConfiguration.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingWebhookConfigurationList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
            "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
            "type": "object",
            "properties": {
                "caBundle": {
                    "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
                    "type": "string",
                    "format": "byte"
                },
                "service": {
                    "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference"
                },
                "url": {
                    "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.AuditAnnotation": {
            "description": "AuditAnnotation describes how to produce an audit annotation for an API request.",
            "type": "object",
            "required": [
                "key",
                "valueExpression"
            ],
            "properties": {
                "key": {
                    "description": "key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.\n\nThe key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \"{ValidatingAdmissionPolicy name}/{key}\".\n\nIf an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.\n\nRequired.",
                    "type": "string",
                    "default": ""
                },
                "valueExpression": {
                    "description": "valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.\n\nIf multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.\n\nRequired.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ExpressionWarning": {
            "description": "ExpressionWarning is a warning information that targets a specific expression.",
            "type": "object",
            "required": [
                "fieldRef",
                "warning"
            ],
            "properties": {
                "fieldRef": {
                    "description": "The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is \"spec.validations[0].expression\"",
                    "type": "string",
                    "default": ""
                },
                "warning": {
                    "description": "The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.MatchCondition": {
            "description": "MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.",
            "type": "object",
            "required": [
                "name",
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.MatchResources": {
            "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
            "type": "object",
            "properties": {
                "excludeResourceRules": {
                    "description": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "matchPolicy": {
                    "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\"",
                    "type": "string"
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "objectSelector": {
                    "description": "ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "resourceRules": {
                    "description": "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook": {
            "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
            "type": "object",
            "required": [
                "name",
                "clientConfig"
            ],
            "properties": {
                "admissionReviewVersions": {
                    "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clientConfig": {
                    "description": "ClientConfig defines how to communicate with the hook. Required",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
                },
                "failurePolicy": {
                    "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
                    "type": "string"
                },
                "matchConditions": {
                    "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\nThis is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "matchPolicy": {
                    "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Exact\"",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
                    "type": "string",
                    "default": ""
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "objectSelector": {
                    "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "reinvocationPolicy": {
                    "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".",
                    "type": "string"
                },
                "rules": {
                    "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
                    }
                },
                "sideEffects": {
                    "description": "SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.",
                    "type": "string"
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration": {
            "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "webhooks": {
                    "description": "Webhooks is a list of webhooks and the affected resources and operations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "MutatingWebhookConfiguration",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
            "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of MutatingWebhookConfiguration.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "MutatingWebhookConfigurationList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations": {
            "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.",
            "type": "object",
            "properties": {
                "apiGroups": {
                    "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "apiVersions": {
                    "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "operations": {
                    "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resourceNames": {
                    "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "scope": {
                    "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ParamKind": {
            "description": "ParamKind is a tuple of Group Kind and Version.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the API kind the resources belong to. Required.",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ParamRef": {
            "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the name of the resource being referenced.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\nA single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.",
                    "type": "string"
                },
                "namespace": {
                    "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.",
                    "type": "string"
                },
                "parameterNotFoundAction": {
                    "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny`\n\nRequired",
                    "type": "string"
                },
                "selector": {
                    "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ServiceReference": {
            "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
            "type": "object",
            "required": [
                "namespace",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "`name` is the name of the service. Required",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "`namespace` is the namespace of the service. Required",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "`path` is an optional URL path which will be sent in any request to this service.",
                    "type": "string"
                },
                "port": {
                    "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.TypeChecking": {
            "description": "TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy",
            "type": "object",
            "properties": {
                "expressionWarnings": {
                    "description": "The type checking warnings for each expression.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ExpressionWarning"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy": {
            "description": "ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the ValidatingAdmissionPolicy.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec"
                },
                "status": {
                    "description": "The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingAdmissionPolicy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding": {
            "description": "ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.\n\nThe CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingAdmissionPolicyBinding",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingList": {
            "description": "ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of PolicyBinding.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingAdmissionPolicyBindingList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec": {
            "description": "ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.",
            "type": "object",
            "properties": {
                "matchResources": {
                    "description": "MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources"
                },
                "paramRef": {
                    "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamRef"
                },
                "policyName": {
                    "description": "PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.",
                    "type": "string"
                },
                "validationActions": {
                    "description": "validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\nFailures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\nvalidationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\nThe supported actions values are:\n\n\"Deny\" specifies that a validation failure results in a denied request.\n\n\"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n\"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\nClients should expect to handle additional values by ignoring any values not recognized.\n\n\"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\nRequired.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "set"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyList": {
            "description": "ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ValidatingAdmissionPolicy.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingAdmissionPolicyList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec": {
            "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
            "type": "object",
            "properties": {
                "auditAnnotations": {
                    "description": "auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.AuditAnnotation"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "failurePolicy": {
                    "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nWhen failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.\n\nAllowed values are Ignore or Fail. Defaults to Fail.",
                    "type": "string"
                },
                "matchConditions": {
                    "description": "MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "matchConstraints": {
                    "description": "MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources"
                },
                "paramKind": {
                    "description": "ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamKind"
                },
                "validations": {
                    "description": "Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Validation"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "variables": {
                    "description": "Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Variable"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus": {
            "description": "ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "The conditions represent the latest available observations of a policy's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "observedGeneration": {
                    "description": "The generation observed by the controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "typeChecking": {
                    "description": "The results of type checking for each expression. Presence of this field indicates the completion of the type checking.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.TypeChecking"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook": {
            "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
            "type": "object",
            "required": [
                "name",
                "clientConfig"
            ],
            "properties": {
                "admissionReviewVersions": {
                    "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "clientConfig": {
                    "description": "ClientConfig defines how to communicate with the hook. Required",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
                },
                "failurePolicy": {
                    "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
                    "type": "string"
                },
                "matchConditions": {
                    "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped\n\nThis is a beta feature and managed by the AdmissionWebhookMatchConditions feature gate.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "matchPolicy": {
                    "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Exact\"",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
                    "type": "string",
                    "default": ""
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "objectSelector": {
                    "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "rules": {
                    "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
                    }
                },
                "sideEffects": {
                    "description": "SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.",
                    "type": "string"
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration": {
            "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "webhooks": {
                    "description": "Webhooks is a list of webhooks and the affected resources and operations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingWebhookConfiguration",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
            "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ValidatingWebhookConfiguration.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "ValidatingWebhookConfigurationList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.admissionregistration.v1beta1.Validation": {
            "description": "Validation specifies the CEL expression which is used to apply the validation.",
            "type": "object",
            "required": [
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Expression accessing a property named \"namespace\": {\"Expression\": \"object.__namespace__ \u003e 0\"}\n  - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x__dash__prop \u003e 0\"}\n  - Expression accessing a property named \"redact__d\": {\"Expression\": \"object.redact__underscores__d \u003e 0\"}\n\nEquality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired.",
                    "type": "string",
                    "default": ""
                },
                "message": {
                    "description": "Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\".",
                    "type": "string"
                },
                "messageExpression": {
                    "description": "messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: \"object.x must be less than max (\"+string(params.max)+\")\"",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, StatusReasonInvalid is used in the response to the client.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.Variable": {
            "description": "Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.",
            "type": "object",
            "required": [
                "name",
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig": {
            "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
            "type": "object",
            "properties": {
                "caBundle": {
                    "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
                    "type": "string",
                    "format": "byte"
                },
                "service": {
                    "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
                    "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ServiceReference"
                },
                "url": {
                    "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.ControllerRevision": {
            "description": "ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
            "type": "object",
            "required": [
                "revision"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "data": {
                    "description": "Data is the serialized representation of the state.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "revision": {
                    "description": "Revision indicates the revision of the state represented by Data.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "ControllerRevision",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.ControllerRevisionList": {
            "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of ControllerRevisions",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "ControllerRevisionList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.DaemonSet": {
            "description": "DaemonSet represents the configuration of a daemon set.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec"
                },
                "status": {
                    "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "DaemonSet",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.DaemonSetCondition": {
            "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of DaemonSet condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DaemonSetList": {
            "description": "DaemonSetList is a collection of daemon sets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "A list of daemon sets.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "DaemonSetList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.DaemonSetSpec": {
            "description": "DaemonSetSpec is the specification of a daemon set.",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "An update strategy to replace existing DaemonSet pods with new pods.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DaemonSetStatus": {
            "description": "DaemonSetStatus represents the current status of a daemon set.",
            "type": "object",
            "required": [
                "currentNumberScheduled",
                "numberMisscheduled",
                "desiredNumberScheduled",
                "numberReady"
            ],
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a DaemonSet's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentNumberScheduled": {
                    "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredNumberScheduled": {
                    "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberAvailable": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "numberMisscheduled": {
                    "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberReady": {
                    "description": "numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberUnavailable": {
                    "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "The most recent generation observed by the daemon set controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "updatedNumberScheduled": {
                    "description": "The total number of nodes that are running updated daemon pod",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
            "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
                    "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet"
                },
                "type": {
                    "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` Replace the old daemons only when it's killed\n - `\"RollingUpdate\"` Replace the old daemons by new ones using rolling update i.e replace them on each node one after the other.",
                    "type": "string",
                    "enum": [
                        "OnDelete",
                        "RollingUpdate"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.Deployment": {
            "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "Deployment",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.DeploymentCondition": {
            "description": "DeploymentCondition describes the state of a deployment at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DeploymentList": {
            "description": "DeploymentList is a list of Deployments.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Deployments.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "DeploymentList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.DeploymentSpec": {
            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused.",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
                    "x-kubernetes-patch-strategy": "retainKeys"
                },
                "template": {
                    "description": "Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DeploymentStatus": {
            "description": "DeploymentStatus is the most recently observed status of the Deployment.",
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.DeploymentStrategy": {
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment"
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"Recreate\"` Kill all existing pods before creating new ones.\n - `\"RollingUpdate\"` Replace the old ReplicaSets by new one using rolling update i.e gradually scale down the old ReplicaSets and scale up the new one.",
                    "type": "string",
                    "enum": [
                        "Recreate",
                        "RollingUpdate"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.ReplicaSet": {
            "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec"
                },
                "status": {
                    "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "ReplicaSet",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.ReplicaSetCondition": {
            "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "The last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of replica set condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.ReplicaSetList": {
            "description": "ReplicaSetList is a collection of ReplicaSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "ReplicaSetList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.ReplicaSetSpec": {
            "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
            "type": "object",
            "required": [
                "selector"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.ReplicaSetStatus": {
            "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a replica set's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "fullyLabeledReplicas": {
                    "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
            "description": "Spec to control the desired behavior of daemon set rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.RollingUpdateDeployment": {
            "description": "Spec to control the desired behavior of rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSet": {
            "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n  - Network: A single stable DNS and hostname.\n  - Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the desired identities of pods in this set.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
                },
                "status": {
                    "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "StatefulSet",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.StatefulSetCondition": {
            "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of statefulset condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSetList": {
            "description": "StatefulSetList is a collection of StatefulSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of stateful sets.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps",
                    "kind": "StatefulSetList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.apps.v1.StatefulSetOrdinals": {
            "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
            "type": "object",
            "properties": {
                "start": {
                    "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
            "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.",
            "type": "object",
            "properties": {
                "whenDeleted": {
                    "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
                    "type": "string"
                },
                "whenScaled": {
                    "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSetSpec": {
            "description": "A StatefulSetSpec is the specification of a StatefulSet.",
            "type": "object",
            "required": [
                "selector",
                "template",
                "serviceName"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "ordinals": {
                    "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals"
                },
                "persistentVolumeClaimRetentionPolicy": {
                    "description": "persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.  +optional",
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy"
                },
                "podManagementPolicy": {
                    "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n\nPossible enum values:\n - `\"OrderedReady\"` will create pods in strictly increasing order on scale up and strictly decreasing order on scale down, progressing only when the previous pod is ready or terminated. At most one pod will be changed at any time.\n - `\"Parallel\"` will create and delete pods as soon as the stateful set replica count is changed, and will not wait for pods to be ready or complete termination.",
                    "type": "string",
                    "enum": [
                        "OrderedReady",
                        "Parallel"
                    ]
                },
                "replicas": {
                    "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "serviceName": {
                    "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format \u003cstatefulsetname\u003e-\u003cpodindex\u003e. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\". The only allowed template.spec.restartPolicy value is \"Always\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSetStatus": {
            "description": "StatefulSetStatus represents the current state of a StatefulSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a statefulset's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` triggers the legacy behavior. Version tracking and ordered rolling restarts are disabled. Pods are recreated from the StatefulSetSpec when they are manually deleted. When a scale operation is performed with this strategy,specification version indicated by the StatefulSet's currentRevision.\n - `\"RollingUpdate\"` indicates that update will be applied to all Pods in the StatefulSet with respect to the StatefulSet ordering constraints. When a scale operation is performed with this strategy, new Pods will be created from the specification version indicated by the StatefulSet's updateRevision.",
                    "type": "string",
                    "enum": [
                        "OnDelete",
                        "RollingUpdate"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.ControllerRevision": {
            "description": "DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1beta2/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
            "type": "object",
            "required": [
                "revision"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "data": {
                    "description": "data is the serialized representation of the state.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "revision": {
                    "description": "revision indicates the revision of the state represented by Data.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.ControllerRevisionList": {
            "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of ControllerRevisions",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.Deployment": {
            "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentSpec"
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentCondition": {
            "description": "DeploymentCondition describes the state of a deployment at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentList": {
            "description": "DeploymentList is a list of Deployments.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Deployments.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentRollback": {
            "description": "DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.",
            "type": "object",
            "required": [
                "name",
                "rollbackTo"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Required: This must match the Name of a deployment.",
                    "type": "string",
                    "default": ""
                },
                "rollbackTo": {
                    "description": "The config of this deployment rollback.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollbackConfig"
                },
                "updatedAnnotations": {
                    "description": "The annotations to be updated to a deployment",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentSpec": {
            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "minReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "paused indicates that the deployment is paused.",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "progressDeadlineSeconds is the maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "replicas is the number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.",
                    "type": "integer",
                    "format": "int32"
                },
                "rollbackTo": {
                    "description": "DEPRECATED. rollbackTo is the config this deployment is rolling back to. Will be cleared after rollback is done.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollbackConfig"
                },
                "selector": {
                    "description": "selector is the label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentStrategy",
                    "x-kubernetes-patch-strategy": "retainKeys"
                },
                "template": {
                    "description": "Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentStatus": {
            "description": "DeploymentStatus is the most recently observed status of the Deployment.",
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Conditions represent the latest available observations of a deployment's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment controller with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "replicas is the total number of non-terminated pods targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                },
                "unavailableReplicas": {
                    "description": "unavailableReplicas is the total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the total number of non-terminated pods targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.DeploymentStrategy": {
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollingUpdateDeployment"
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.RollbackConfig": {
            "description": "DEPRECATED.",
            "type": "object",
            "properties": {
                "revision": {
                    "description": "The revision to rollback to. If set to 0, rollback to the last revision.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.RollingUpdateDeployment": {
            "description": "Spec to control the desired behavior of rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.RollingUpdateStatefulSetStrategy": {
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "maxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.Scale": {
            "description": "Scale represents a scaling request for a resource.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ScaleSpec"
                },
                "status": {
                    "description": "status defines current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ScaleStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.ScaleSpec": {
            "description": "ScaleSpec describes the attributes of a scale subresource",
            "type": "object",
            "properties": {
                "replicas": {
                    "description": "replicas is the number of observed instances of the scaled object.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.ScaleStatus": {
            "description": "ScaleStatus represents the current status of a scale subresource.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "replicas": {
                    "description": "replias is the actual number of observed instances of the scaled object.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replicas count. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "targetSelector": {
                    "description": "targetSelector is the label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSet": {
            "description": "DEPRECATED - This group version of StatefulSet is deprecated by apps/v1beta2/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n  - Network: A single stable DNS and hostname.\n  - Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the desired identities of pods in this set.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetSpec"
                },
                "status": {
                    "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetCondition": {
            "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of statefulset condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetList": {
            "description": "StatefulSetList is a collection of StatefulSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetOrdinals": {
            "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
            "type": "object",
            "properties": {
                "start": {
                    "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
            "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.",
            "type": "object",
            "properties": {
                "whenDeleted": {
                    "description": "whenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
                    "type": "string"
                },
                "whenScaled": {
                    "description": "whenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetSpec": {
            "description": "A StatefulSetSpec is the specification of a StatefulSet.",
            "type": "object",
            "required": [
                "template",
                "serviceName"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "minReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "ordinals": {
                    "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetOrdinals"
                },
                "persistentVolumeClaimRetentionPolicy": {
                    "description": "PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetPersistentVolumeClaimRetentionPolicy"
                },
                "podManagementPolicy": {
                    "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
                    "type": "string"
                },
                "replicas": {
                    "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "serviceName": {
                    "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format \u003cstatefulsetname\u003e-\u003cpodindex\u003e. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetStatus": {
            "description": "StatefulSetStatus represents the current state of a StatefulSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "availableReplicas is the total number of available pods (ready for at least minReadySeconds) targeted by this StatefulSet.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "conditions represent the latest available observations of a statefulset's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods created by this StatefulSet controller with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta1.StatefulSetUpdateStrategy": {
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the StatefulSetUpdateStrategy.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ControllerRevision": {
            "description": "DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
            "type": "object",
            "required": [
                "revision"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "data": {
                    "description": "Data is the serialized representation of the state.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "revision": {
                    "description": "Revision indicates the revision of the state represented by Data.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ControllerRevisionList": {
            "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of ControllerRevisions",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSet": {
            "description": "DEPRECATED - This group version of DaemonSet is deprecated by apps/v1/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetSpec"
                },
                "status": {
                    "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSetCondition": {
            "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of DaemonSet condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSetList": {
            "description": "DaemonSetList is a collection of daemon sets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "A list of daemon sets.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSetSpec": {
            "description": "DaemonSetSpec is the specification of a daemon set.",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "An update strategy to replace existing DaemonSet pods with new pods.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSetStatus": {
            "description": "DaemonSetStatus represents the current status of a daemon set.",
            "type": "object",
            "required": [
                "currentNumberScheduled",
                "numberMisscheduled",
                "desiredNumberScheduled",
                "numberReady"
            ],
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a DaemonSet's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentNumberScheduled": {
                    "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredNumberScheduled": {
                    "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberAvailable": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "numberMisscheduled": {
                    "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberReady": {
                    "description": "Total number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition by passing the readinessProbe.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberUnavailable": {
                    "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "The most recent generation observed by the daemon set controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "updatedNumberScheduled": {
                    "description": "The total number of nodes that are running updated daemon pod",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DaemonSetUpdateStrategy": {
            "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateDaemonSet"
                },
                "type": {
                    "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.Deployment": {
            "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentSpec"
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DeploymentCondition": {
            "description": "DeploymentCondition describes the state of a deployment at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DeploymentList": {
            "description": "DeploymentList is a list of Deployments.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Deployments.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DeploymentSpec": {
            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused.",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentStrategy",
                    "x-kubernetes-patch-strategy": "retainKeys"
                },
                "template": {
                    "description": "Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DeploymentStatus": {
            "description": "DeploymentStatus is the most recently observed status of the Deployment.",
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment controller with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.DeploymentStrategy": {
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateDeployment"
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ReplicaSet": {
            "description": "DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetSpec"
                },
                "status": {
                    "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ReplicaSetCondition": {
            "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "The last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of replica set condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ReplicaSetList": {
            "description": "ReplicaSetList is a collection of ReplicaSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ReplicaSetSpec": {
            "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
            "type": "object",
            "required": [
                "selector"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ReplicaSetStatus": {
            "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a replica set's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "fullyLabeledReplicas": {
                    "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this ReplicaSet controller with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.RollingUpdateDaemonSet": {
            "description": "Spec to control the desired behavior of daemon set rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.RollingUpdateDeployment": {
            "description": "Spec to control the desired behavior of rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.RollingUpdateStatefulSetStrategy": {
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.Scale": {
            "description": "Scale represents a scaling request for a resource.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleSpec"
                },
                "status": {
                    "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ScaleSpec": {
            "description": "ScaleSpec describes the attributes of a scale subresource",
            "type": "object",
            "properties": {
                "replicas": {
                    "description": "desired number of instances for the scaled object.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.ScaleStatus": {
            "description": "ScaleStatus represents the current status of a scale subresource.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "replicas": {
                    "description": "actual number of observed instances of the scaled object.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replicas count. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "atomic"
                },
                "targetSelector": {
                    "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSet": {
            "description": "DEPRECATED - This group version of StatefulSet is deprecated by apps/v1/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n  - Network: A single stable DNS and hostname.\n  - Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the desired identities of pods in this set.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetSpec"
                },
                "status": {
                    "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetCondition": {
            "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of statefulset condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetList": {
            "description": "StatefulSetList is a collection of StatefulSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetOrdinals": {
            "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
            "type": "object",
            "properties": {
                "start": {
                    "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetPersistentVolumeClaimRetentionPolicy": {
            "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.",
            "type": "object",
            "properties": {
                "whenDeleted": {
                    "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
                    "type": "string"
                },
                "whenScaled": {
                    "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetSpec": {
            "description": "A StatefulSetSpec is the specification of a StatefulSet.",
            "type": "object",
            "required": [
                "selector",
                "template",
                "serviceName"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "ordinals": {
                    "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetOrdinals"
                },
                "persistentVolumeClaimRetentionPolicy": {
                    "description": "PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetPersistentVolumeClaimRetentionPolicy"
                },
                "podManagementPolicy": {
                    "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
                    "type": "string"
                },
                "replicas": {
                    "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "serviceName": {
                    "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format \u003cstatefulsetname\u003e-\u003cpodindex\u003e. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\". The only allowed template.spec.restartPolicy value is \"Always\".",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetStatus": {
            "description": "StatefulSetStatus represents the current state of a StatefulSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this StatefulSet.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a statefulset's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods created by this StatefulSet controller with a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.apps.v1beta2.StatefulSetUpdateStrategy": {
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
                    "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.BoundObjectReference": {
            "description": "BoundObjectReference is a reference to an object that a token is bound to.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent. Valid kinds are 'Pod' and 'Secret'.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.SelfSubjectReview": {
            "description": "SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "status": {
                    "description": "Status is filled in by the server with the user attributes.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.SelfSubjectReviewStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "authentication.k8s.io",
                    "kind": "SelfSubjectReview",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.authentication.v1.SelfSubjectReviewStatus": {
            "description": "SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.",
            "type": "object",
            "properties": {
                "userInfo": {
                    "description": "User attributes of the user making this request.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.TokenRequest": {
            "description": "TokenRequest requests a token for a given service account.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec holds information about the request being evaluated",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
                },
                "status": {
                    "description": "Status is filled in by the server and indicates whether the token can be authenticated.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "authentication.k8s.io",
                    "kind": "TokenRequest",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.authentication.v1.TokenRequestSpec": {
            "description": "TokenRequestSpec contains client provided parameters of a token request.",
            "type": "object",
            "required": [
                "audiences"
            ],
            "properties": {
                "audiences": {
                    "description": "Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "boundObjectRef": {
                    "description": "BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.",
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.BoundObjectReference"
                },
                "expirationSeconds": {
                    "description": "ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.TokenRequestStatus": {
            "description": "TokenRequestStatus is the result of a token request.",
            "type": "object",
            "required": [
                "token",
                "expirationTimestamp"
            ],
            "properties": {
                "expirationTimestamp": {
                    "description": "ExpirationTimestamp is the time of expiration of the returned token.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "token": {
                    "description": "Token is the opaque bearer token.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.TokenReview": {
            "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec holds information about the request being evaluated",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec"
                },
                "status": {
                    "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "authentication.k8s.io",
                    "kind": "TokenReview",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.authentication.v1.TokenReviewSpec": {
            "description": "TokenReviewSpec is a description of the token authentication request.",
            "type": "object",
            "properties": {
                "audiences": {
                    "description": "Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "token": {
                    "description": "Token is the opaque bearer token.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.TokenReviewStatus": {
            "description": "TokenReviewStatus is the result of the token authentication request.",
            "type": "object",
            "properties": {
                "audiences": {
                    "description": "Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "authenticated": {
                    "description": "Authenticated indicates that the token was associated with a known user.",
                    "type": "boolean"
                },
                "error": {
                    "description": "Error indicates that the token couldn't be checked",
                    "type": "string"
                },
                "user": {
                    "description": "User is the UserInfo associated with the provided token.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.authentication.v1.UserInfo": {
            "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
            "type": "object",
            "properties": {
                "extra": {
                    "description": "Any additional information provided by the authenticator.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": ""
                        }
                    }
                },
                "groups": {
                    "description": "The names of groups this user is a part of.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "uid": {
                    "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
                    "type": "string"
                },
                "username": {
                    "description": "The name that uniquely identifies this user among all active users.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ContainerResourceMetricSource": {
            "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in the requests and limits, describing a single container in each of the pods of the current scale target(e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set.",
            "type": "object",
            "required": [
                "name",
                "container"
            ],
            "properties": {
                "container": {
                    "description": "container is the name of the container in the pods of the scaling target.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                },
                "targetAverageUtilization": {
                    "description": "targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "targetAverageValue": {
                    "description": "targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ContainerResourceMetricStatus": {
            "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
            "type": "object",
            "required": [
                "name",
                "currentAverageValue",
                "container"
            ],
            "properties": {
                "container": {
                    "description": "container is the name of the container in the pods of the scaling taget",
                    "type": "string",
                    "default": ""
                },
                "currentAverageUtilization": {
                    "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentAverageValue": {
                    "description": "currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
            "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiVersion": {
                    "description": "apiVersion is the API version of the referent",
                    "type": "string"
                },
                "kind": {
                    "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ExternalMetricSource": {
            "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
            "type": "object",
            "required": [
                "metricName"
            ],
            "properties": {
                "metricName": {
                    "description": "metricName is the name of the metric in question.",
                    "type": "string",
                    "default": ""
                },
                "metricSelector": {
                    "description": "metricSelector is used to identify a specific time series within a given metric.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "targetAverageValue": {
                    "description": "targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "targetValue": {
                    "description": "targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ExternalMetricStatus": {
            "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
            "type": "object",
            "required": [
                "metricName",
                "currentValue"
            ],
            "properties": {
                "currentAverageValue": {
                    "description": "currentAverageValue is the current value of metric averaged over autoscaled pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "currentValue": {
                    "description": "currentValue is the current value of the metric (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metricName": {
                    "description": "metricName is the name of a metric used for autoscaling in metric system.",
                    "type": "string",
                    "default": ""
                },
                "metricSelector": {
                    "description": "metricSelector is used to identify a specific time series within a given metric.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
            "description": "configuration of a horizontal pod autoscaler.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
                },
                "status": {
                    "description": "status is the current information about the autoscaler.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "autoscaling",
                    "kind": "HorizontalPodAutoscaler",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerCondition": {
            "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message is a human-readable explanation containing details about the transition",
                    "type": "string"
                },
                "reason": {
                    "description": "reason is the reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "status is the status of the condition (True, False, Unknown)",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type describes the current condition",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
            "description": "list of horizontal pod autoscaler objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of horizontal pod autoscaler objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "autoscaling",
                    "kind": "HorizontalPodAutoscalerList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
            "description": "specification of a horizontal pod autoscaler.",
            "type": "object",
            "required": [
                "scaleTargetRef",
                "maxReplicas"
            ],
            "properties": {
                "maxReplicas": {
                    "description": "maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "minReplicas": {
                    "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleTargetRef": {
                    "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
                },
                "targetCPUUtilizationPercentage": {
                    "description": "targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
            "description": "current status of a horizontal pod autoscaler",
            "type": "object",
            "required": [
                "currentReplicas",
                "desiredReplicas"
            ],
            "properties": {
                "currentCPUUtilizationPercentage": {
                    "description": "currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the current number of replicas of pods managed by this autoscaler.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredReplicas": {
                    "description": "desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "lastScaleTime": {
                    "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed by this autoscaler.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.MetricSpec": {
            "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "containerResource": {
                    "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ContainerResourceMetricSource"
                },
                "external": {
                    "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ExternalMetricSource"
                },
                "object": {
                    "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ObjectMetricSource"
                },
                "pods": {
                    "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.PodsMetricSource"
                },
                "resource": {
                    "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ResourceMetricSource"
                },
                "type": {
                    "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled\n\nPossible enum values:\n - `\"ContainerResource\"` is a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics (the \"pods\" source).\n - `\"External\"` is a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).\n - `\"Object\"` is a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\n - `\"Pods\"` is a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n - `\"Resource\"` is a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics (the \"pods\" source).",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "ContainerResource",
                        "External",
                        "Object",
                        "Pods",
                        "Resource"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.MetricStatus": {
            "description": "MetricStatus describes the last-read state of a single metric.",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "containerResource": {
                    "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ContainerResourceMetricStatus"
                },
                "external": {
                    "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ExternalMetricStatus"
                },
                "object": {
                    "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ObjectMetricStatus"
                },
                "pods": {
                    "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.PodsMetricStatus"
                },
                "resource": {
                    "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ResourceMetricStatus"
                },
                "type": {
                    "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled\n\nPossible enum values:\n - `\"ContainerResource\"` is a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics (the \"pods\" source).\n - `\"External\"` is a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).\n - `\"Object\"` is a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\n - `\"Pods\"` is a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n - `\"Resource\"` is a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics (the \"pods\" source).",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "ContainerResource",
                        "External",
                        "Object",
                        "Pods",
                        "Resource"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ObjectMetricSource": {
            "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
            "type": "object",
            "required": [
                "target",
                "metricName",
                "targetValue"
            ],
            "properties": {
                "averageValue": {
                    "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metricName": {
                    "description": "metricName is the name of the metric in question.",
                    "type": "string",
                    "default": ""
                },
                "selector": {
                    "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "target": {
                    "description": "target is the described Kubernetes object.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
                },
                "targetValue": {
                    "description": "targetValue is the target value of the metric (as a quantity).",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ObjectMetricStatus": {
            "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
            "type": "object",
            "required": [
                "target",
                "metricName",
                "currentValue"
            ],
            "properties": {
                "averageValue": {
                    "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "currentValue": {
                    "description": "currentValue is the current value of the metric (as a quantity).",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metricName": {
                    "description": "metricName is the name of the metric in question.",
                    "type": "string",
                    "default": ""
                },
                "selector": {
                    "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "target": {
                    "description": "target is the described Kubernetes object.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.PodsMetricSource": {
            "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
            "type": "object",
            "required": [
                "metricName",
                "targetAverageValue"
            ],
            "properties": {
                "metricName": {
                    "description": "metricName is the name of the metric in question",
                    "type": "string",
                    "default": ""
                },
                "selector": {
                    "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "targetAverageValue": {
                    "description": "targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.PodsMetricStatus": {
            "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
            "type": "object",
            "required": [
                "metricName",
                "currentAverageValue"
            ],
            "properties": {
                "currentAverageValue": {
                    "description": "currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metricName": {
                    "description": "metricName is the name of the metric in question",
                    "type": "string",
                    "default": ""
                },
                "selector": {
                    "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ResourceMetricSource": {
            "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                },
                "targetAverageUtilization": {
                    "description": "targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "targetAverageValue": {
                    "description": "targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ResourceMetricStatus": {
            "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
            "type": "object",
            "required": [
                "name",
                "currentAverageValue"
            ],
            "properties": {
                "currentAverageUtilization": {
                    "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
                    "type": "integer",
                    "format": "int32"
                },
                "currentAverageValue": {
                    "description": "currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.Scale": {
            "description": "Scale represents a scaling request for a resource.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec"
                },
                "status": {
                    "description": "status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "autoscaling",
                    "kind": "Scale",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.autoscaling.v1.ScaleSpec": {
            "description": "ScaleSpec describes the attributes of a scale subresource.",
            "type": "object",
            "properties": {
                "replicas": {
                    "description": "replicas is the desired number of instances for the scaled object.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v1.ScaleStatus": {
            "description": "ScaleStatus represents the current status of a scale subresource.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "replicas": {
                    "description": "replicas is the actual number of observed instances of the scaled object.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "selector": {
                    "description": "selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ContainerResourceMetricSource": {
            "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
            "type": "object",
            "required": [
                "name",
                "target",
                "container"
            ],
            "properties": {
                "container": {
                    "description": "container is the name of the container in the pods of the scaling target",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                },
                "target": {
                    "description": "target specifies the target value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus": {
            "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
            "type": "object",
            "required": [
                "name",
                "current",
                "container"
            ],
            "properties": {
                "container": {
                    "description": "container is the name of the container in the pods of the scaling target",
                    "type": "string",
                    "default": ""
                },
                "current": {
                    "description": "current contains the current value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.CrossVersionObjectReference": {
            "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiVersion": {
                    "description": "apiVersion is the API version of the referent",
                    "type": "string"
                },
                "kind": {
                    "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ExternalMetricSource": {
            "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
            "type": "object",
            "required": [
                "metric",
                "target"
            ],
            "properties": {
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                },
                "target": {
                    "description": "target specifies the target value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ExternalMetricStatus": {
            "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
            "type": "object",
            "required": [
                "metric",
                "current"
            ],
            "properties": {
                "current": {
                    "description": "current contains the current value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
                },
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HPAScalingPolicy": {
            "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
            "type": "object",
            "required": [
                "type",
                "value",
                "periodSeconds"
            ],
            "properties": {
                "periodSeconds": {
                    "description": "periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "type": {
                    "description": "type is used to specify the scaling policy.",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "value contains the amount of change which is permitted by the policy. It must be greater than zero",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HPAScalingRules": {
            "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
            "type": "object",
            "properties": {
                "policies": {
                    "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingPolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "selectPolicy": {
                    "description": "selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.",
                    "type": "string"
                },
                "stabilizationWindowSeconds": {
                    "description": "stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler": {
            "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec"
                },
                "status": {
                    "description": "status is the current information about the autoscaler.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "autoscaling",
                    "kind": "HorizontalPodAutoscaler",
                    "version": "v2"
                }
            ]
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior": {
            "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
            "type": "object",
            "properties": {
                "scaleDown": {
                    "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
                },
                "scaleUp": {
                    "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition": {
            "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message is a human-readable explanation containing details about the transition",
                    "type": "string"
                },
                "reason": {
                    "description": "reason is the reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "status is the status of the condition (True, False, Unknown)",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type describes the current condition",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList": {
            "description": "HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of horizontal pod autoscaler objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata is the standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "autoscaling",
                    "kind": "HorizontalPodAutoscalerList",
                    "version": "v2"
                }
            ]
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec": {
            "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
            "type": "object",
            "required": [
                "scaleTargetRef",
                "maxReplicas"
            ],
            "properties": {
                "behavior": {
                    "description": "behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior"
                },
                "maxReplicas": {
                    "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "metrics": {
                    "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricSpec"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "minReplicas": {
                    "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleTargetRef": {
                    "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus": {
            "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
            "type": "object",
            "required": [
                "desiredReplicas"
            ],
            "properties": {
                "conditions": {
                    "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentMetrics": {
                    "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricStatus"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "currentReplicas": {
                    "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
                    "type": "integer",
                    "format": "int32"
                },
                "desiredReplicas": {
                    "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "lastScaleTime": {
                    "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed by this autoscaler.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.MetricIdentifier": {
            "description": "MetricIdentifier defines the name and optionally selector for a metric",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "name is the name of the given metric",
                    "type": "string",
                    "default": ""
                },
                "selector": {
                    "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.MetricSpec": {
            "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "containerResource": {
                    "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricSource"
                },
                "external": {
                    "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricSource"
                },
                "object": {
                    "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricSource"
                },
                "pods": {
                    "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricSource"
                },
                "resource": {
                    "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricSource"
                },
                "type": {
                    "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.MetricStatus": {
            "description": "MetricStatus describes the last-read state of a single metric.",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "containerResource": {
                    "description": "container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus"
                },
                "external": {
                    "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricStatus"
                },
                "object": {
                    "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricStatus"
                },
                "pods": {
                    "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricStatus"
                },
                "resource": {
                    "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricStatus"
                },
                "type": {
                    "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.MetricTarget": {
            "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "averageUtilization": {
                    "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                    "type": "integer",
                    "format": "int32"
                },
                "averageValue": {
                    "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "type": {
                    "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "value is the target value of the metric (as a quantity).",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.MetricValueStatus": {
            "description": "MetricValueStatus holds the current value for a metric",
            "type": "object",
            "properties": {
                "averageUtilization": {
                    "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "averageValue": {
                    "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "value": {
                    "description": "value is the current value of the metric (as a quantity).",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ObjectMetricSource": {
            "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
            "type": "object",
            "required": [
                "describedObject",
                "target",
                "metric"
            ],
            "properties": {
                "describedObject": {
                    "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
                },
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                },
                "target": {
                    "description": "target specifies the target value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ObjectMetricStatus": {
            "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
            "type": "object",
            "required": [
                "metric",
                "current",
                "describedObject"
            ],
            "properties": {
                "current": {
                    "description": "current contains the current value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
                },
                "describedObject": {
                    "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
                },
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.PodsMetricSource": {
            "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
            "type": "object",
            "required": [
                "metric",
                "target"
            ],
            "properties": {
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                },
                "target": {
                    "description": "target specifies the target value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.PodsMetricStatus": {
            "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
            "type": "object",
            "required": [
                "metric",
                "current"
            ],
            "properties": {
                "current": {
                    "description": "current contains the current value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
                },
                "metric": {
                    "description": "metric identifies the target metric by name and selector",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ResourceMetricSource": {
            "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
            "type": "object",
            "required": [
                "name",
                "target"
            ],
            "properties": {
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                },
                "target": {
                    "description": "target specifies the target value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.autoscaling.v2.ResourceMetricStatus": {
            "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
            "type": "object",
            "required": [
                "name",
                "current"
            ],
            "properties": {
                "current": {
                    "description": "current contains the current value for the given metric",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
                },
                "name": {
                    "description": "name is the name of the resource in question.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.CronJob": {
            "description": "CronJob represents the configuration of a single cron job.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobSpec"
                },
                "status": {
                    "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "CronJob",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.batch.v1.CronJobList": {
            "description": "CronJobList is a collection of cron jobs.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CronJobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1.CronJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "CronJobList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.batch.v1.CronJobSpec": {
            "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
            "type": "object",
            "required": [
                "schedule",
                "jobTemplate"
            ],
            "properties": {
                "concurrencyPolicy": {
                    "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one\n\nPossible enum values:\n - `\"Allow\"` allows CronJobs to run concurrently.\n - `\"Forbid\"` forbids concurrent runs, skipping next run if previous hasn't finished yet.\n - `\"Replace\"` cancels currently running job and replaces it with a new one.",
                    "type": "string",
                    "enum": [
                        "Allow",
                        "Forbid",
                        "Replace"
                    ]
                },
                "failedJobsHistoryLimit": {
                    "description": "The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "jobTemplate": {
                    "description": "Specifies the job that will be created when executing a CronJob.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobTemplateSpec"
                },
                "schedule": {
                    "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
                    "type": "string",
                    "default": ""
                },
                "startingDeadlineSeconds": {
                    "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
                    "type": "integer",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "description": "The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.",
                    "type": "integer",
                    "format": "int32"
                },
                "suspend": {
                    "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
                    "type": "boolean"
                },
                "timeZone": {
                    "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.CronJobStatus": {
            "description": "CronJobStatus represents the current state of a cron job.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "A list of pointers to currently running jobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "lastScheduleTime": {
                    "description": "Information when was the last time the job was successfully scheduled.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastSuccessfulTime": {
                    "description": "Information when was the last time the job successfully completed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.Job": {
            "description": "Job represents the configuration of a single job.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
                },
                "status": {
                    "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "Job",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.batch.v1.JobCondition": {
            "description": "JobCondition describes current state of a job.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "Last time the condition was checked.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of job condition, Complete or Failed.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.JobList": {
            "description": "JobList is a collection of jobs.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of Jobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "JobList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.batch.v1.JobSpec": {
            "description": "JobSpec describes how the job execution will look like.",
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.",
                    "type": "integer",
                    "format": "int64"
                },
                "backoffLimit": {
                    "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
                    "type": "integer",
                    "format": "int32"
                },
                "backoffLimitPerIndex": {
                    "description": "Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
                    "type": "integer",
                    "format": "int32"
                },
                "completionMode": {
                    "description": "completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n`NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n`Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\nMore completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.\n\nPossible enum values:\n - `\"Indexed\"` is a Job completion mode. In this mode, the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1). The Job is considered complete when a Pod completes for each completion index.\n - `\"NonIndexed\"` is a Job completion mode. In this mode, the Job is considered complete when there have been .spec.completions successfully completed Pods. Pod completions are homologous to each other.",
                    "type": "string",
                    "enum": [
                        "Indexed",
                        "NonIndexed"
                    ]
                },
                "completions": {
                    "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
                    "type": "integer",
                    "format": "int32"
                },
                "manualSelector": {
                    "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
                    "type": "boolean"
                },
                "maxFailedIndexes": {
                    "description": "Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
                    "type": "integer",
                    "format": "int32"
                },
                "parallelism": {
                    "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
                    "type": "integer",
                    "format": "int32"
                },
                "podFailurePolicy": {
                    "description": "Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.\n\nThis field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default).",
                    "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicy"
                },
                "podReplacementPolicy": {
                    "description": "podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods\n  when they are terminating (has a metadata.deletionTimestamp) or failed.\n- Failed means to wait until a previously created Pod is fully terminated (has phase\n  Failed or Succeeded) before creating a replacement Pod.\n\nWhen using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.\n\nPossible enum values:\n - `\"Failed\"` means to wait until a previously created Pod is fully terminated (has phase Failed or Succeeded) before creating a replacement Pod.\n - `\"TerminatingOrFailed\"` means that we recreate pods when they are terminating (has a metadata.deletionTimestamp) or failed.",
                    "type": "string",
                    "enum": [
                        "Failed",
                        "TerminatingOrFailed"
                    ]
                },
                "selector": {
                    "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "suspend": {
                    "description": "suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are \"Never\" or \"OnFailure\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "ttlSecondsAfterFinished": {
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.JobStatus": {
            "description": "JobStatus represents the current state of a Job.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "The number of pending and running pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "completedIndexes": {
                    "description": "completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".",
                    "type": "string"
                },
                "completionTime": {
                    "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "conditions": {
                    "description": "The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "failed": {
                    "description": "The number of pods which reached phase Failed.",
                    "type": "integer",
                    "format": "int32"
                },
                "failedIndexes": {
                    "description": "FailedIndexes holds the failed indexes when backoffLimitPerIndex=true. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
                    "type": "string"
                },
                "ready": {
                    "description": "The number of pods which have a Ready condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "startTime": {
                    "description": "Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "succeeded": {
                    "description": "The number of pods which reached phase Succeeded.",
                    "type": "integer",
                    "format": "int32"
                },
                "terminating": {
                    "description": "The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\nThis field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).",
                    "type": "integer",
                    "format": "int32"
                },
                "uncountedTerminatedPods": {
                    "description": "uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nOld jobs might not be tracked using this field, in which case the field remains null.",
                    "$ref": "#/definitions/io.k8s.api.batch.v1.UncountedTerminatedPods"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.JobTemplateSpec": {
            "description": "JobTemplateSpec describes the data a Job should have when created from a template",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.PodFailurePolicy": {
            "description": "PodFailurePolicy describes how failed pods influence the backoffLimit.",
            "type": "object",
            "required": [
                "rules"
            ],
            "properties": {
                "rules": {
                    "description": "A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyRule"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement": {
            "description": "PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.",
            "type": "object",
            "required": [
                "operator",
                "values"
            ],
            "properties": {
                "containerName": {
                    "description": "Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n- In: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is in the set of specified values.\n- NotIn: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is not in the set of specified values.\nAdditional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.\n\nPossible enum values:\n - `\"In\"`\n - `\"NotIn\"`",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "In",
                        "NotIn"
                    ]
                },
                "values": {
                    "description": "Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    "x-kubernetes-list-type": "set"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern": {
            "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "status": {
                    "description": "Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.PodFailurePolicyRule": {
            "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.",
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "description": "Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n- FailJob: indicates that the pod's job is marked as Failed and all\n  running pods are terminated.\n- FailIndex: indicates that the pod's index is marked as Failed and will\n  not be restarted.\n  This value is beta-level. It can be used when the\n  `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).\n- Ignore: indicates that the counter towards the .backoffLimit is not\n  incremented and a replacement pod is created.\n- Count: indicates that the pod is handled in the default way - the\n  counter towards the .backoffLimit is incremented.\nAdditional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.\n\nPossible enum values:\n - `\"Count\"` This is an action which might be taken on a pod failure - the pod failure is handled in the default way - the counter towards .backoffLimit, represented by the job's .status.failed field, is incremented.\n - `\"FailIndex\"` This is an action which might be taken on a pod failure - mark the Job's index as failed to avoid restarts within this index. This action can only be used when backoffLimitPerIndex is set. This value is beta-level.\n - `\"FailJob\"` This is an action which might be taken on a pod failure - mark the pod's job as Failed and terminate all running pods.\n - `\"Ignore\"` This is an action which might be taken on a pod failure - the counter towards .backoffLimit, represented by the job's .status.failed field, is not incremented and a replacement pod is created.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "Count",
                        "FailIndex",
                        "FailJob",
                        "Ignore"
                    ]
                },
                "onExitCodes": {
                    "description": "Represents the requirement on the container exit codes.",
                    "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement"
                },
                "onPodConditions": {
                    "description": "Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1.UncountedTerminatedPods": {
            "description": "UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.",
            "type": "object",
            "properties": {
                "failed": {
                    "description": "failed holds UIDs of failed Pods.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "set"
                },
                "succeeded": {
                    "description": "succeeded holds UIDs of succeeded Pods.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "set"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1beta1.CronJob": {
            "description": "CronJob represents the configuration of a single cron job.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec"
                },
                "status": {
                    "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "CronJob",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.batch.v1beta1.CronJobList": {
            "description": "CronJobList is a collection of cron jobs.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CronJobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "batch",
                    "kind": "CronJobList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.batch.v1beta1.CronJobSpec": {
            "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
            "type": "object",
            "required": [
                "schedule",
                "jobTemplate"
            ],
            "properties": {
                "concurrencyPolicy": {
                    "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
                    "type": "string"
                },
                "failedJobsHistoryLimit": {
                    "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "jobTemplate": {
                    "description": "Specifies the job that will be created when executing a CronJob.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1beta1.JobTemplateSpec"
                },
                "schedule": {
                    "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
                    "type": "string",
                    "default": ""
                },
                "startingDeadlineSeconds": {
                    "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
                    "type": "integer",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "description": "The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.",
                    "type": "integer",
                    "format": "int32"
                },
                "suspend": {
                    "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
                    "type": "boolean"
                },
                "timeZone": {
                    "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1beta1.CronJobStatus": {
            "description": "CronJobStatus represents the current state of a cron job.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "A list of pointers to currently running jobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "lastScheduleTime": {
                    "description": "Information when was the last time the job was successfully scheduled.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastSuccessfulTime": {
                    "description": "Information when was the last time the job successfully completed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.batch.v1beta1.JobTemplateSpec": {
            "description": "JobTemplateSpec describes the data a Job should have when created from a template",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1.CertificateSigningRequest": {
            "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n 1. client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
                },
                "status": {
                    "description": "status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "certificates.k8s.io",
                    "kind": "CertificateSigningRequest",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.certificates.v1.CertificateSigningRequestCondition": {
            "description": "CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "lastUpdateTime is the time of the last update to this condition",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message contains a human readable message with details about the request state",
                    "type": "string"
                },
                "reason": {
                    "description": "reason indicates a brief reason for the request state",
                    "type": "string"
                },
                "status": {
                    "description": "status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1.CertificateSigningRequestList": {
            "description": "CertificateSigningRequestList is a collection of CertificateSigningRequest objects",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is a collection of CertificateSigningRequest objects",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "certificates.k8s.io",
                    "kind": "CertificateSigningRequestList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
            "description": "CertificateSigningRequestSpec contains the certificate request.",
            "type": "object",
            "required": [
                "request",
                "signerName"
            ],
            "properties": {
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\nThe v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\nCertificate signers may not honor this field for various reasons:\n\n  1. Old signer that is unaware of the field (such as the in-tree\n     implementations prior to v1.22)\n  2. Signer whose configured maximum is shorter than the requested duration\n  3. Signer whose configured minimum is longer than the requested duration\n\nThe minimum valid value for expirationSeconds is 600, i.e. 10 minutes.",
                    "type": "integer",
                    "format": "int32"
                },
                "extra": {
                    "description": "extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": ""
                        }
                    }
                },
                "groups": {
                    "description": "groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "request": {
                    "description": "request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
                    "type": "string",
                    "format": "byte",
                    "x-kubernetes-list-type": "atomic"
                },
                "signerName": {
                    "description": "signerName indicates the requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\nWell-known Kubernetes signers are:\n 1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.\n  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.\n  Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.\n  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom signerNames can also be specified. The signer defines:\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed.",
                    "type": "string",
                    "default": ""
                },
                "uid": {
                    "description": "uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
                    "type": "string"
                },
                "usages": {
                    "description": "usages specifies a set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\nRequests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\nValid values are:\n \"signing\", \"digital signature\", \"content commitment\",\n \"key encipherment\", \"key agreement\", \"data encipherment\",\n \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",\n \"server auth\", \"client auth\",\n \"code signing\", \"email protection\", \"s/mime\",\n \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",\n \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "username": {
                    "description": "username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1.CertificateSigningRequestStatus": {
            "description": "CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.",
            "type": "object",
            "properties": {
                "certificate": {
                    "description": "certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificate must contain one or more PEM blocks.\n 2. All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data\n  must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n 3. Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated,\n  to allow for explanatory text as described in section 5.2 of RFC7468.\n\nIf more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\nThe certificate is encoded in PEM format.\n\nWhen serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n    base64(\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n    )",
                    "type": "string",
                    "format": "byte",
                    "x-kubernetes-list-type": "atomic"
                },
                "conditions": {
                    "description": "conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1beta1.CertificateSigningRequest": {
            "description": "Describes a certificate signing request",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
                },
                "status": {
                    "description": "Derived information about the request.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "certificates.k8s.io",
                    "kind": "CertificateSigningRequest",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "timestamp for the last update to this condition",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "human readable message with details about the request state",
                    "type": "string"
                },
                "reason": {
                    "description": "brief reason for the request state",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\". Defaults to \"True\". If unset, should be treated as \"True\".",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type of the condition. Known conditions include \"Approved\", \"Denied\", and \"Failed\".",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "certificates.k8s.io",
                    "kind": "CertificateSigningRequestList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec": {
            "description": "CertificateSigningRequestSpec contains the certificate request.",
            "type": "object",
            "required": [
                "request"
            ],
            "properties": {
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\nThe v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\nCertificate signers may not honor this field for various reasons:\n\n  1. Old signer that is unaware of the field (such as the in-tree\n     implementations prior to v1.22)\n  2. Signer whose configured maximum is shorter than the requested duration\n  3. Signer whose configured minimum is longer than the requested duration\n\nThe minimum valid value for expirationSeconds is 600, i.e. 10 minutes.",
                    "type": "integer",
                    "format": "int32"
                },
                "extra": {
                    "description": "Extra information about the requesting user. See user.Info interface for details.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": ""
                        }
                    }
                },
                "groups": {
                    "description": "Group information about the requesting user. See user.Info interface for details.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "request": {
                    "description": "Base64-encoded PKCS#10 CSR data",
                    "type": "string",
                    "format": "byte",
                    "x-kubernetes-list-type": "atomic"
                },
                "signerName": {
                    "description": "Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:\n 1. If it's a kubelet client certificate, it is assigned\n    \"kubernetes.io/kube-apiserver-client-kubelet\".\n 2. If it's a kubelet serving certificate, it is assigned\n    \"kubernetes.io/kubelet-serving\".\n 3. Otherwise, it is assigned \"kubernetes.io/legacy-unknown\".\nDistribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID information about the requesting user. See user.Info interface for details.",
                    "type": "string"
                },
                "usages": {
                    "description": "allowedUsages specifies a set of usage contexts the key will be valid for. See:\n\thttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\n\thttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\n\nValid values are:\n \"signing\",\n \"digital signature\",\n \"content commitment\",\n \"key encipherment\",\n \"key agreement\",\n \"data encipherment\",\n \"cert sign\",\n \"crl sign\",\n \"encipher only\",\n \"decipher only\",\n \"any\",\n \"server auth\",\n \"client auth\",\n \"code signing\",\n \"email protection\",\n \"s/mime\",\n \"ipsec end system\",\n \"ipsec tunnel\",\n \"ipsec user\",\n \"timestamping\",\n \"ocsp signing\",\n \"microsoft sgc\",\n \"netscape sgc\"",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "username": {
                    "description": "Information about the requesting user. See user.Info interface for details.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus": {
            "type": "object",
            "properties": {
                "certificate": {
                    "description": "If request was approved, the controller will place the issued certificate here.",
                    "type": "string",
                    "format": "byte",
                    "x-kubernetes-list-type": "atomic"
                },
                "conditions": {
                    "description": "Conditions applied to the request, such as approval or denial.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
            "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "volumeID"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                    "type": "integer",
                    "format": "int32"
                },
                "readOnly": {
                    "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Affinity": {
            "description": "Affinity is a group of affinity scheduling rules.",
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity"
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity"
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AttachedVolume": {
            "description": "AttachedVolume describes a volume attached to a node",
            "type": "object",
            "required": [
                "name",
                "devicePath"
            ],
            "properties": {
                "devicePath": {
                    "description": "DevicePath represents the device path where the volume should be available",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the attached volume",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AvoidPods": {
            "description": "AvoidPods describes pods that should avoid this node. This is the value for a Node annotation with key scheduler.alpha.kubernetes.io/preferAvoidPods and will eventually become a field of NodeStatus.",
            "type": "object",
            "properties": {
                "preferAvoidPods": {
                    "description": "Bounded-sized list of signatures of pods that should avoid this node, sorted in timestamp order from oldest to newest. Size of the slice is unspecified.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PreferAvoidPodsEntry"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AzureDiskVolumeSource": {
            "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
            "type": "object",
            "required": [
                "diskName",
                "diskURI"
            ],
            "properties": {
                "cachingMode": {
                    "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n\nPossible enum values:\n - `\"None\"`\n - `\"ReadOnly\"`\n - `\"ReadWrite\"`",
                    "type": "string",
                    "enum": [
                        "None",
                        "ReadOnly",
                        "ReadWrite"
                    ]
                },
                "diskName": {
                    "description": "diskName is the Name of the data disk in the blob storage",
                    "type": "string",
                    "default": ""
                },
                "diskURI": {
                    "description": "diskURI is the URI of data disk in the blob storage",
                    "type": "string",
                    "default": ""
                },
                "fsType": {
                    "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "kind": {
                    "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\n\nPossible enum values:\n - `\"Dedicated\"`\n - `\"Managed\"`\n - `\"Shared\"`",
                    "type": "string",
                    "enum": [
                        "Dedicated",
                        "Managed",
                        "Shared"
                    ]
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ],
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of secret that contains Azure Storage Account Name and Key",
                    "type": "string",
                    "default": ""
                },
                "secretNamespace": {
                    "description": "secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
                    "type": "string"
                },
                "shareName": {
                    "description": "shareName is the azure Share Name",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.AzureFileVolumeSource": {
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "type": "object",
            "required": [
                "secretName",
                "shareName"
            ],
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                    "type": "string",
                    "default": ""
                },
                "shareName": {
                    "description": "shareName is the azure share Name",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Binding": {
            "description": "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
            "type": "object",
            "required": [
                "target"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "target": {
                    "description": "The target object that you want to bind to the standard object.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Binding",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
            "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
            "type": "object",
            "required": [
                "driver",
                "volumeHandle"
            ],
            "properties": {
                "controllerExpandSecretRef": {
                    "description": "controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "controllerPublishSecretRef": {
                    "description": "controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "driver": {
                    "description": "driver is the name of the driver to use for this volume. Required.",
                    "type": "string",
                    "default": ""
                },
                "fsType": {
                    "description": "fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
                    "type": "string"
                },
                "nodeExpandSecretRef": {
                    "description": "nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "nodeStageSecretRef": {
                    "description": "nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "readOnly": {
                    "description": "readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes of the volume to publish.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "volumeHandle": {
                    "description": "volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.CSIVolumeSource": {
            "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
            "type": "object",
            "required": [
                "driver"
            ],
            "properties": {
                "driver": {
                    "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                    "type": "string",
                    "default": ""
                },
                "fsType": {
                    "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "readOnly": {
                    "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Capabilities": {
            "description": "Adds and removes POSIX capabilities from running containers.",
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "drop": {
                    "description": "Removed capabilities",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "monitors"
            ],
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "user": {
                    "description": "user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.CephFSVolumeSource": {
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "monitors"
            ],
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "user": {
                    "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
            "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "volumeID"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.CinderVolumeSource": {
            "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "volumeID"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ClaimSource": {
            "description": "ClaimSource describes a reference to a ResourceClaim.\n\nExactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.",
            "type": "object",
            "properties": {
                "resourceClaimName": {
                    "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.",
                    "type": "string"
                },
                "resourceClaimTemplateName": {
                    "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ClientIPConfig": {
            "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
            "type": "object",
            "properties": {
                "timeoutSeconds": {
                    "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ClusterTrustBundleProjection": {
            "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "labelSelector": {
                    "description": "Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as \"match nothing\".  If set but empty, interpreted as \"match everything\".",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "name": {
                    "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.",
                    "type": "string"
                },
                "optional": {
                    "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.",
                    "type": "boolean"
                },
                "path": {
                    "description": "Relative path from the volume root to write the bundle.",
                    "type": "string",
                    "default": ""
                },
                "signerName": {
                    "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ComponentCondition": {
            "description": "Information about the condition of a component.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "error": {
                    "description": "Condition error code for a component. For example, a health check error code.",
                    "type": "string"
                },
                "message": {
                    "description": "Message about the condition for a component. For example, information about a health check.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of condition for a component. Valid value: \"Healthy\"",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ComponentStatus": {
            "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "conditions": {
                    "description": "List of component conditions observed",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ComponentStatus",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ComponentStatusList": {
            "description": "Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ComponentStatus objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ComponentStatusList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ConfigMap": {
            "description": "ConfigMap holds configuration data for pods to consume.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "binaryData": {
                    "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "data": {
                    "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "immutable": {
                    "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ConfigMap",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ConfigMapEnvSource": {
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ConfigMapKeySelector": {
            "description": "Selects a key from a ConfigMap.",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ConfigMapList": {
            "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of ConfigMaps.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ConfigMapList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
            "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration",
            "type": "object",
            "required": [
                "namespace",
                "name",
                "kubeletConfigKey"
            ],
            "properties": {
                "kubeletConfigKey": {
                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
                    "type": "string",
                    "default": ""
                },
                "resourceVersion": {
                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ConfigMapProjection": {
            "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ConfigMapVolumeSource": {
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Container": {
            "description": "A single application container that you want to run within a pod.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerImage": {
            "description": "Describe a container image",
            "type": "object",
            "properties": {
                "names": {
                    "description": "Names by which this image is known. e.g. [\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"]",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sizeBytes": {
                    "description": "The size of the image in bytes.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerPort": {
            "description": "ContainerPort represents a network port in a single container.",
            "type": "object",
            "required": [
                "containerPort"
            ],
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "TCP",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerResizePolicy": {
            "description": "ContainerResizePolicy represents resource resize policy for the container.",
            "type": "object",
            "required": [
                "resourceName",
                "restartPolicy"
            ],
            "properties": {
                "resourceName": {
                    "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
                    "type": "string",
                    "default": ""
                },
                "restartPolicy": {
                    "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerState": {
            "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
            "type": "object",
            "properties": {
                "running": {
                    "description": "Details about a running container",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning"
                },
                "terminated": {
                    "description": "Details about a terminated container",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated"
                },
                "waiting": {
                    "description": "Details about a waiting container",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerStateRunning": {
            "description": "ContainerStateRunning is a running state of a container.",
            "type": "object",
            "properties": {
                "startedAt": {
                    "description": "Time at which the container was last (re-)started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerStateTerminated": {
            "description": "ContainerStateTerminated is a terminated state of a container.",
            "type": "object",
            "required": [
                "exitCode"
            ],
            "properties": {
                "containerID": {
                    "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'",
                    "type": "string"
                },
                "exitCode": {
                    "description": "Exit status from the last termination of the container",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "finishedAt": {
                    "description": "Time at which the container last terminated",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Message regarding the last termination of the container",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason from the last termination of the container",
                    "type": "string"
                },
                "signal": {
                    "description": "Signal from the last termination of the container",
                    "type": "integer",
                    "format": "int32"
                },
                "startedAt": {
                    "description": "Time at which previous execution of the container started",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerStateWaiting": {
            "description": "ContainerStateWaiting is a waiting state of a container.",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message regarding why the container is not yet running.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason the container is not yet running.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ContainerStatus": {
            "description": "ContainerStatus contains details for the current status of this container.",
            "type": "object",
            "required": [
                "name",
                "ready",
                "restartCount",
                "image",
                "imageID"
            ],
            "properties": {
                "allocatedResources": {
                    "description": "AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "containerID": {
                    "description": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").",
                    "type": "string"
                },
                "image": {
                    "description": "Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.",
                    "type": "string",
                    "default": ""
                },
                "imageID": {
                    "description": "ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.",
                    "type": "string",
                    "default": ""
                },
                "lastState": {
                    "description": "LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
                },
                "name": {
                    "description": "Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ready": {
                    "description": "Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic.",
                    "type": "boolean",
                    "default": false
                },
                "resources": {
                    "description": "Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartCount": {
                    "description": "RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "started": {
                    "description": "Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.",
                    "type": "boolean"
                },
                "state": {
                    "description": "State holds details about the container's current condition.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.DaemonEndpoint": {
            "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
            "type": "object",
            "required": [
                "Port"
            ],
            "properties": {
                "Port": {
                    "description": "Port number of the given endpoint.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.DownwardAPIProjection": {
            "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "fieldRef": {
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string",
                    "default": ""
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
            "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "items": {
                    "description": "Items is a list of downward API volume file",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EmptyDirVolumeSource": {
            "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "properties": {
                "medium": {
                    "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "string"
                },
                "sizeLimit": {
                    "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EndpointAddress": {
            "description": "EndpointAddress is a tuple that describes single IP address.",
            "type": "object",
            "required": [
                "ip"
            ],
            "properties": {
                "hostname": {
                    "description": "The Hostname of this endpoint",
                    "type": "string"
                },
                "ip": {
                    "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).",
                    "type": "string",
                    "default": ""
                },
                "nodeName": {
                    "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
                    "type": "string"
                },
                "targetRef": {
                    "description": "Reference to object providing the endpoint.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EndpointPort": {
            "description": "EndpointPort is a tuple that describes a single port.",
            "type": "object",
            "required": [
                "port"
            ],
            "properties": {
                "appProtocol": {
                    "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.",
                    "type": "string"
                },
                "port": {
                    "description": "The port number of the endpoint.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EndpointSubset": {
            "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n\n\t{\n\t  Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t  Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n\t}\n\nThe resulting set of endpoints can be viewed as:\n\n\ta: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n\tb: [ 10.10.1.1:309, 10.10.2.2:309 ]",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
                    }
                },
                "notReadyAddresses": {
                    "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
                    }
                },
                "ports": {
                    "description": "Port numbers available on the related IP addresses.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Endpoints": {
            "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n\n\t Name: \"mysvc\",\n\t Subsets: [\n\t   {\n\t     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t     Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n\t   },\n\t   {\n\t     Addresses: [{\"ip\": \"10.10.3.3\"}],\n\t     Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n\t   },\n\t]",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "subsets": {
                    "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Endpoints",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.EndpointsList": {
            "description": "EndpointsList is a list of endpoints.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of endpoints.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "EndpointsList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.EnvFromSource": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource"
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EnvVar": {
            "description": "EnvVar represents an environment variable present in a Container.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EnvVarSource": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EphemeralContainer": {
            "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Lifecycle is not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "Ports are not allowed for ephemeral containers.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "targetContainerName": {
                    "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
                    "type": "string"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EphemeralContainerCommon": {
            "description": "EphemeralContainerCommon is a copy of all fields in Container to be inlined in EphemeralContainer. This separate type allows easy conversion from EphemeralContainer to Container and allows separate documentation for the fields of EphemeralContainer. When a new field is added to Container it must be added here as well.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ]
                },
                "lifecycle": {
                    "description": "Lifecycle is not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "Ports are not allowed for ephemeral containers.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "Probes are not allowed for ephemeral containers.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
                    "type": "string",
                    "enum": [
                        "FallbackToLogsOnError",
                        "File"
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EphemeralVolumeSource": {
            "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
            "type": "object",
            "properties": {
                "volumeClaimTemplate": {
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where `\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Event": {
            "description": "Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.",
            "type": "object",
            "required": [
                "metadata",
                "involvedObject"
            ],
            "properties": {
                "action": {
                    "description": "What action was taken/failed regarding to the Regarding object.",
                    "type": "string"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "count": {
                    "description": "The number of times this event has occurred.",
                    "type": "integer",
                    "format": "int32"
                },
                "eventTime": {
                    "description": "Time when this Event was first observed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                },
                "firstTimestamp": {
                    "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "involvedObject": {
                    "description": "The object that this event is about.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "lastTimestamp": {
                    "description": "The time at which the most recent occurrence of this event was recorded.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human-readable description of the status of this operation.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "reason": {
                    "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
                    "type": "string"
                },
                "related": {
                    "description": "Optional secondary object for more complex actions.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                },
                "reportingComponent": {
                    "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
                    "type": "string",
                    "default": ""
                },
                "reportingInstance": {
                    "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
                    "type": "string",
                    "default": ""
                },
                "series": {
                    "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries"
                },
                "source": {
                    "description": "The component reporting this event. Should be a short machine understandable string.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
                },
                "type": {
                    "description": "Type of this event (Normal, Warning), new types could be added in the future",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Event",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.EventList": {
            "description": "EventList is a list of events.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of events",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Event"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "EventList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.EventSeries": {
            "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of occurrences in this series up to the last heartbeat time",
                    "type": "integer",
                    "format": "int32"
                },
                "lastObservedTime": {
                    "description": "Time of the last occurrence observed",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.EventSource": {
            "description": "EventSource contains information for an event.",
            "type": "object",
            "properties": {
                "component": {
                    "description": "Component from which the event is generated.",
                    "type": "string"
                },
                "host": {
                    "description": "Node name on which the event is generated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ExecAction": {
            "description": "ExecAction describes a \"run in container\" action.",
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.FCVolumeSource": {
            "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is Optional: FC target lun number",
                    "type": "integer",
                    "format": "int32"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "wwids": {
                    "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
            "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
            "type": "object",
            "required": [
                "driver"
            ],
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string",
                    "default": ""
                },
                "fsType": {
                    "description": "fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.FlexVolumeSource": {
            "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
            "type": "object",
            "required": [
                "driver"
            ],
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string",
                    "default": ""
                },
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.FlockerVolumeSource": {
            "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "properties": {
                "datasetName": {
                    "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
            "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "pdName"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "integer",
                    "format": "int32"
                },
                "pdName": {
                    "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.GRPCAction": {
            "type": "object",
            "required": [
                "port"
            ],
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.GitRepoVolumeSource": {
            "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
            "type": "object",
            "required": [
                "repository"
            ],
            "properties": {
                "directory": {
                    "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                    "type": "string"
                },
                "repository": {
                    "description": "repository is the URL",
                    "type": "string",
                    "default": ""
                },
                "revision": {
                    "description": "revision is the commit hash for the specified revision.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "endpoints",
                "path"
            ],
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string",
                    "default": ""
                },
                "endpointsNamespace": {
                    "description": "endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.GlusterfsVolumeSource": {
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "endpoints",
                "path"
            ],
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.HTTPGetAction": {
            "description": "HTTPGetAction describes an action based on HTTP Get requests.",
            "type": "object",
            "required": [
                "port"
            ],
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
                    "type": "string",
                    "enum": [
                        "HTTP",
                        "HTTPS"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.HTTPHeader": {
            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "The header field value",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.HostAlias": {
            "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
            "type": "object",
            "properties": {
                "hostnames": {
                    "description": "Hostnames for the above IP address.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "ip": {
                    "description": "IP address of the host file entry.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.HostIP": {
            "description": "HostIP represents a single IP address allocated to the host.",
            "type": "object",
            "properties": {
                "ip": {
                    "description": "IP is the IP address assigned to the host",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.HostPathVolumeSource": {
            "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\nPossible enum values:\n - `\"\"` For backwards compatible, leave it empty if unset\n - `\"BlockDevice\"` A block device must exist at the given path\n - `\"CharDevice\"` A character device must exist at the given path\n - `\"Directory\"` A directory must exist at the given path\n - `\"DirectoryOrCreate\"` If nothing exists at the given path, an empty directory will be created there as needed with file mode 0755, having the same group and ownership with Kubelet.\n - `\"File\"` A file must exist at the given path\n - `\"FileOrCreate\"` If nothing exists at the given path, an empty file will be created there as needed with file mode 0644, having the same group and ownership with Kubelet.\n - `\"Socket\"` A UNIX socket must exist at the given path",
                    "type": "string",
                    "enum": [
                        "",
                        "BlockDevice",
                        "CharDevice",
                        "Directory",
                        "DirectoryOrCreate",
                        "File",
                        "FileOrCreate",
                        "Socket"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
            "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "targetPortal",
                "iqn",
                "lun"
            ],
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is Target iSCSI Qualified Name.",
                    "type": "string",
                    "default": ""
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is iSCSI Target Lun number.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ISCSIVolumeSource": {
            "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "targetPortal",
                "iqn",
                "lun"
            ],
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is the target iSCSI Qualified Name.",
                    "type": "string",
                    "default": ""
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                    "type": "string"
                },
                "lun": {
                    "description": "lun represents iSCSI Target Lun number.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.KeyToPath": {
            "description": "Maps a string key to a path within a volume.",
            "type": "object",
            "required": [
                "key",
                "path"
            ],
            "properties": {
                "key": {
                    "description": "key is the key to project.",
                    "type": "string",
                    "default": ""
                },
                "mode": {
                    "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "path": {
                    "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Lifecycle": {
            "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler"
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LifecycleHandler": {
            "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
                },
                "sleep": {
                    "description": "Sleep represents the duration that the container should sleep before being terminated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SleepAction"
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LimitRange": {
            "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "LimitRange",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.LimitRangeItem": {
            "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "default": {
                    "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "defaultRequest": {
                    "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "max": {
                    "description": "Max usage constraints on this kind by resource name.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "maxLimitRequestRatio": {
                    "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "min": {
                    "description": "Min usage constraints on this kind by resource name.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "type": {
                    "description": "Type of resource that this limit applies to.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LimitRangeList": {
            "description": "LimitRangeList is a list of LimitRange items.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "LimitRangeList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.LimitRangeSpec": {
            "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
            "type": "object",
            "required": [
                "limits"
            ],
            "properties": {
                "limits": {
                    "description": "Limits is the list of LimitRangeItem objects that are enforced.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.List": {
            "description": "List holds a list of objects, which may not be known by the server.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LoadBalancerIngress": {
            "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
                    "type": "string"
                },
                "ipMode": {
                    "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to \"VIP\" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to \"Proxy\" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PortStatus"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LoadBalancerStatus": {
            "description": "LoadBalancerStatus represents the status of a load-balancer.",
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LocalObjectReference": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.LocalVolumeSource": {
            "description": "Local represents directly-attached storage with node affinity (Beta feature)",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.",
                    "type": "string"
                },
                "path": {
                    "description": "path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ModifyVolumeStatus": {
            "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.\n\nPossible enum values:\n - `\"InProgress\"` InProgress indicates that the volume is being modified\n - `\"Infeasible\"` Infeasible indicates that the request has been rejected as invalid by the CSI driver. To resolve the error, a valid VolumeAttributesClass needs to be specified\n - `\"Pending\"` Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as the specified VolumeAttributesClass not existing",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "InProgress",
                        "Infeasible",
                        "Pending"
                    ]
                },
                "targetVolumeAttributesClassName": {
                    "description": "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NFSVolumeSource": {
            "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "server",
                "path"
            ],
            "properties": {
                "path": {
                    "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "boolean"
                },
                "server": {
                    "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Namespace": {
            "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec"
                },
                "status": {
                    "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Namespace",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.NamespaceCondition": {
            "description": "NamespaceCondition contains details about state of namespace.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of namespace controller condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NamespaceList": {
            "description": "NamespaceList is a list of Namespaces.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "NamespaceList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.NamespaceSpec": {
            "description": "NamespaceSpec describes the attributes on a Namespace.",
            "type": "object",
            "properties": {
                "finalizers": {
                    "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NamespaceStatus": {
            "description": "NamespaceStatus is information about the current status of a Namespace.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Represents the latest available observations of a namespace's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "phase": {
                    "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n\nPossible enum values:\n - `\"Active\"` means the namespace is available for use in the system\n - `\"Terminating\"` means the namespace is undergoing graceful termination",
                    "type": "string",
                    "enum": [
                        "Active",
                        "Terminating"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Node": {
            "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec"
                },
                "status": {
                    "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Node",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.NodeAddress": {
            "description": "NodeAddress contains information for the node's address.",
            "type": "object",
            "required": [
                "type",
                "address"
            ],
            "properties": {
                "address": {
                    "description": "The node address.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeAffinity": {
            "description": "Node affinity is a group of node affinity scheduling rules.",
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeCondition": {
            "description": "NodeCondition contains condition information for a node.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastHeartbeatTime": {
                    "description": "Last time we got an update on a given condition.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of node condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeConfigSource": {
            "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22",
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "ConfigMap is a reference to a Node's ConfigMap",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeConfigStatus": {
            "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
                },
                "assigned": {
                    "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
                },
                "error": {
                    "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
                    "type": "string"
                },
                "lastKnownGood": {
                    "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeDaemonEndpoints": {
            "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
            "type": "object",
            "properties": {
                "kubeletEndpoint": {
                    "description": "Endpoint on which Kubelet is listening.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeList": {
            "description": "NodeList is the whole list of all Nodes which have been registered with master.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of nodes",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Node"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "NodeList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.NodeProxyOptions": {
            "description": "NodeProxyOptions is the query options to a Node's proxy call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the URL path to use for the current proxy request to node.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeResources": {
            "description": "NodeResources is an object for conveying resource information about a node. see https://kubernetes.io/docs/concepts/architecture/nodes/#capacity for more details.",
            "type": "object",
            "required": [
                "Capacity"
            ],
            "properties": {
                "Capacity": {
                    "description": "Capacity represents the available resources of a node",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeSelector": {
            "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
            "type": "object",
            "required": [
                "nodeSelectorTerms"
            ],
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
                    }
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeSelectorRequirement": {
            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": "object",
            "required": [
                "key",
                "operator"
            ],
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string",
                    "default": ""
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"Lt\"`\n - `\"NotIn\"`",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "DoesNotExist",
                        "Exists",
                        "Gt",
                        "In",
                        "Lt",
                        "NotIn"
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeSelectorTerm": {
            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
                    }
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeSpec": {
            "description": "NodeSpec describes the attributes that a node is created with.",
            "type": "object",
            "properties": {
                "configSource": {
                    "description": "Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
                },
                "externalID": {
                    "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
                    "type": "string"
                },
                "podCIDR": {
                    "description": "PodCIDR represents the pod IP range assigned to the node.",
                    "type": "string"
                },
                "podCIDRs": {
                    "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-patch-strategy": "merge"
                },
                "providerID": {
                    "description": "ID of the node assigned by the cloud provider in the format: \u003cProviderName\u003e://\u003cProviderSpecificNodeID\u003e",
                    "type": "string"
                },
                "taints": {
                    "description": "If specified, the node's taints.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
                    }
                },
                "unschedulable": {
                    "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeStatus": {
            "description": "NodeStatus is information about the current status of a node.",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "allocatable": {
                    "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "capacity": {
                    "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "conditions": {
                    "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "config": {
                    "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus"
                },
                "daemonEndpoints": {
                    "description": "Endpoints of daemons running on the Node.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints"
                },
                "images": {
                    "description": "List of container images on this node",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
                    }
                },
                "nodeInfo": {
                    "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo"
                },
                "phase": {
                    "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\n\nPossible enum values:\n - `\"Pending\"` means the node has been created/added by the system, but not configured.\n - `\"Running\"` means the node has been configured and has Kubernetes components running.\n - `\"Terminated\"` means the node has been removed from the cluster.",
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Running",
                        "Terminated"
                    ]
                },
                "volumesAttached": {
                    "description": "List of volumes that are attached to the node.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
                    }
                },
                "volumesInUse": {
                    "description": "List of attachable volumes in use (mounted) by the node.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.NodeSystemInfo": {
            "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
            "type": "object",
            "required": [
                "machineID",
                "systemUUID",
                "bootID",
                "kernelVersion",
                "osImage",
                "containerRuntimeVersion",
                "kubeletVersion",
                "kubeProxyVersion",
                "operatingSystem",
                "architecture"
            ],
            "properties": {
                "architecture": {
                    "description": "The Architecture reported by the node",
                    "type": "string",
                    "default": ""
                },
                "bootID": {
                    "description": "Boot ID reported by the node.",
                    "type": "string",
                    "default": ""
                },
                "containerRuntimeVersion": {
                    "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).",
                    "type": "string",
                    "default": ""
                },
                "kernelVersion": {
                    "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
                    "type": "string",
                    "default": ""
                },
                "kubeProxyVersion": {
                    "description": "KubeProxy Version reported by the node.",
                    "type": "string",
                    "default": ""
                },
                "kubeletVersion": {
                    "description": "Kubelet Version reported by the node.",
                    "type": "string",
                    "default": ""
                },
                "machineID": {
                    "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
                    "type": "string",
                    "default": ""
                },
                "operatingSystem": {
                    "description": "The Operating System reported by the node",
                    "type": "string",
                    "default": ""
                },
                "osImage": {
                    "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
                    "type": "string",
                    "default": ""
                },
                "systemUUID": {
                    "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ObjectFieldSelector": {
            "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
            "type": "object",
            "required": [
                "fieldPath"
            ],
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ObjectReference": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolume": {
            "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
                },
                "status": {
                    "description": "status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PersistentVolume",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PersistentVolumeClaim": {
            "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
                },
                "status": {
                    "description": "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PersistentVolumeClaim",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
            "description": "PersistentVolumeClaimCondition contains details about state of pvc",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "lastProbeTime is the time we probed the condition.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message is the human-readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimList": {
            "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PersistentVolumeClaimList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
            "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "dataSource": {
                    "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
                },
                "dataSourceRef": {
                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedObjectReference"
                },
                "resources": {
                    "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.VolumeResourceRequirements"
                },
                "selector": {
                    "description": "selector is a label query over volumes to consider for binding.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "storageClassName": {
                    "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                    "type": "string"
                },
                "volumeAttributesClassName": {
                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n\nPossible enum values:\n - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.\n - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.",
                    "type": "string",
                    "enum": [
                        "Block",
                        "Filesystem"
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
            "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "allocatedResourceStatuses": {
                    "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "granular"
                },
                "allocatedResources": {
                    "description": "allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "capacity": {
                    "description": "capacity represents the actual resources of the underlying volume.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "conditions": {
                    "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentVolumeAttributesClassName": {
                    "description": "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is an alpha field and requires enabling VolumeAttributesClass feature.",
                    "type": "string"
                },
                "modifyVolumeStatus": {
                    "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is unset, there is no ModifyVolume operation being attempted. This is an alpha field and requires enabling VolumeAttributesClass feature.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ModifyVolumeStatus"
                },
                "phase": {
                    "description": "phase represents the current phase of PersistentVolumeClaim.\n\nPossible enum values:\n - `\"Bound\"` used for PersistentVolumeClaims that are bound\n - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.\n - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound",
                    "type": "string",
                    "enum": [
                        "Bound",
                        "Lost",
                        "Pending"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
            "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
            "type": "object",
            "required": [
                "claimName"
            ],
            "properties": {
                "claimName": {
                    "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeList": {
            "description": "PersistentVolumeList is a list of PersistentVolume items.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PersistentVolumeList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PersistentVolumeSource": {
            "description": "PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.",
            "type": "object",
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource"
                },
                "csi": {
                    "description": "csi represents storage that is handled by an external CSI driver (Beta feature).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource"
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource"
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
                },
                "hostPath": {
                    "description": "hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
                },
                "local": {
                    "description": "local represents directly-attached storage with node affinity",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource"
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource"
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeSpec": {
            "description": "PersistentVolumeSpec is the specification of a persistent volume.",
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
                },
                "capacity": {
                    "description": "capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource"
                },
                "claimRef": {
                    "description": "claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
                    "x-kubernetes-map-type": "granular"
                },
                "csi": {
                    "description": "csi represents storage that is handled by an external CSI driver (Beta feature).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource"
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource"
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
                },
                "hostPath": {
                    "description": "hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
                },
                "local": {
                    "description": "local represents directly-attached storage with node affinity",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource"
                },
                "mountOptions": {
                    "description": "mountOptions is the list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
                },
                "nodeAffinity": {
                    "description": "nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity"
                },
                "persistentVolumeReclaimPolicy": {
                    "description": "persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n\nPossible enum values:\n - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.\n - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.\n - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.",
                    "type": "string",
                    "enum": [
                        "Delete",
                        "Recycle",
                        "Retain"
                    ]
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource"
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
                },
                "storageClassName": {
                    "description": "storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
                    "type": "string"
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
                },
                "volumeAttributesClassName": {
                    "description": "Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.\n\nPossible enum values:\n - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.\n - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.",
                    "type": "string",
                    "enum": [
                        "Block",
                        "Filesystem"
                    ]
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PersistentVolumeStatus": {
            "description": "PersistentVolumeStatus is the current status of a persistent volume.",
            "type": "object",
            "properties": {
                "lastPhaseTransitionTime": {
                    "description": "lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions. This is an alpha field and requires enabling PersistentVolumeLastPhaseTransitionTime feature.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message is a human-readable message indicating details about why the volume is in this state.",
                    "type": "string"
                },
                "phase": {
                    "description": "phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n\nPossible enum values:\n - `\"Available\"` used for PersistentVolumes that are not yet bound Available volumes are held by the binder and matched to PersistentVolumeClaims\n - `\"Bound\"` used for PersistentVolumes that are bound\n - `\"Failed\"` used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim\n - `\"Pending\"` used for PersistentVolumes that are not available\n - `\"Released\"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted released volumes must be recycled before becoming available again this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource",
                    "type": "string",
                    "enum": [
                        "Available",
                        "Bound",
                        "Failed",
                        "Pending",
                        "Released"
                    ]
                },
                "reason": {
                    "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
            "description": "Represents a Photon Controller persistent disk resource.",
            "type": "object",
            "required": [
                "pdID"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "pdID is the ID that identifies Photon Controller persistent disk",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Pod": {
            "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
                },
                "status": {
                    "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Pod",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PodAffinity": {
            "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodAffinityTerm": {
            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
            "type": "object",
            "required": [
                "topologyKey"
            ],
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "mismatchLabelKeys": {
                    "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodAntiAffinity": {
            "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodAttachOptions": {
            "description": "PodAttachOptions is the query options to a Pod's remote attach call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "container": {
                    "description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "stderr": {
                    "description": "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
                    "type": "boolean"
                },
                "stdin": {
                    "description": "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
                    "type": "boolean"
                },
                "stdout": {
                    "description": "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
                    "type": "boolean"
                },
                "tty": {
                    "description": "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodCondition": {
            "description": "PodCondition contains details for the current condition of this pod.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "Last time we probed the condition.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human-readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodDNSConfig": {
            "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
            "type": "object",
            "properties": {
                "nameservers": {
                    "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "options": {
                    "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
                    }
                },
                "searches": {
                    "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodDNSConfigOption": {
            "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Required.",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodExecOptions": {
            "description": "PodExecOptions is the query options to a Pod's remote exec call.",
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "command": {
                    "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "container": {
                    "description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "stderr": {
                    "description": "Redirect the standard error stream of the pod for this call.",
                    "type": "boolean"
                },
                "stdin": {
                    "description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
                    "type": "boolean"
                },
                "stdout": {
                    "description": "Redirect the standard output stream of the pod for this call.",
                    "type": "boolean"
                },
                "tty": {
                    "description": "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodIP": {
            "description": "PodIP represents a single IP address allocated to the pod.",
            "type": "object",
            "properties": {
                "ip": {
                    "description": "IP is the IP address assigned to the pod",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodList": {
            "description": "PodList is a list of Pods.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PodList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PodLogOptions": {
            "description": "PodLogOptions is the query options for a Pod's logs REST call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "container": {
                    "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
                    "type": "string"
                },
                "follow": {
                    "description": "Follow the log stream of the pod. Defaults to false.",
                    "type": "boolean"
                },
                "insecureSkipTLSVerifyBackend": {
                    "description": "insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "limitBytes": {
                    "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
                    "type": "integer",
                    "format": "int64"
                },
                "previous": {
                    "description": "Return previous terminated container logs. Defaults to false.",
                    "type": "boolean"
                },
                "sinceSeconds": {
                    "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
                    "type": "integer",
                    "format": "int64"
                },
                "sinceTime": {
                    "description": "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "tailLines": {
                    "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
                    "type": "integer",
                    "format": "int64"
                },
                "timestamps": {
                    "description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodOS": {
            "description": "PodOS defines the OS parameters of a pod.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodPortForwardOptions": {
            "description": "PodPortForwardOptions is the query options to a Pod's port forward call when using WebSockets. The `port` query parameter must specify the port or ports (comma separated) to forward over. Port forwarding over SPDY does not use these options. It requires the port to be passed in the `port` header as part of request.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to forward Required when using WebSockets",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodProxyOptions": {
            "description": "PodProxyOptions is the query options to a Pod's proxy call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the URL path to use for the current proxy request to pod.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodReadinessGate": {
            "description": "PodReadinessGate contains the reference to a pod condition",
            "type": "object",
            "required": [
                "conditionType"
            ],
            "properties": {
                "conditionType": {
                    "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodResourceClaim": {
            "description": "PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "Source describes where to find the ResourceClaim.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ClaimSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodResourceClaimStatus": {
            "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.",
                    "type": "string",
                    "default": ""
                },
                "resourceClaimName": {
                    "description": "ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodSchedulingGate": {
            "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodSecurityContext": {
            "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
            "type": "object",
            "properties": {
                "fsGroup": {
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "integer",
                    "format": "int64"
                },
                "fsGroupChangePolicy": {
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Always\"` indicates that volume's ownership and permissions should always be changed whenever volume is mounted inside a Pod. This the default behavior.\n - `\"OnRootMismatch\"` indicates that volume's ownership and permissions will be changed only when permission and ownership of root directory does not match with expected permissions on the volume. This can help shorten the time it takes to change ownership and permissions of a volume.",
                    "type": "string",
                    "enum": [
                        "Always",
                        "OnRootMismatch"
                    ]
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "integer",
                    "format": "int64"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "integer",
                    "format": "int64"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
                },
                "supplementalGroups": {
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int64",
                        "default": 0
                    }
                },
                "sysctls": {
                    "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
                    }
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodSignature": {
            "description": "Describes the class of pods that should avoid this node. Exactly one field should be set.",
            "type": "object",
            "properties": {
                "podController": {
                    "description": "Reference to controller whose pods should avoid this node.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodSpec": {
            "description": "PodSpec is a description of a pod.",
            "type": "object",
            "required": [
                "containers"
            ],
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
                    "type": "integer",
                    "format": "int64"
                },
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
                    "type": "boolean"
                },
                "containers": {
                    "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "dnsConfig": {
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible enum values:\n - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.\n - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.",
                    "type": "string",
                    "enum": [
                        "ClusterFirst",
                        "ClusterFirstWithHostNet",
                        "Default",
                        "None"
                    ]
                },
                "enableServiceLinks": {
                    "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                    "type": "boolean"
                },
                "ephemeralContainers": {
                    "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "hostIPC": {
                    "description": "Use the host's ipc namespace. Optional: Default to false.",
                    "type": "boolean"
                },
                "hostNetwork": {
                    "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                    "type": "boolean"
                },
                "hostPID": {
                    "description": "Use the host's pid namespace. Optional: Default to false.",
                    "type": "boolean"
                },
                "hostUsers": {
                    "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
                    "type": "boolean"
                },
                "hostname": {
                    "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                    "type": "string"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "initContainers": {
                    "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "nodeName": {
                    "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "atomic"
                },
                "os": {
                    "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodOS"
                },
                "overhead": {
                    "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "preemptionPolicy": {
                    "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.\n\nPossible enum values:\n - `\"Never\"` means that pod never preempts other pods with lower priority.\n - `\"PreemptLowerPriority\"` means that pod can preempt other pods with lower priority.",
                    "type": "string",
                    "enum": [
                        "Never",
                        "PreemptLowerPriority"
                    ]
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                    "type": "string"
                },
                "readinessGates": {
                    "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
                    }
                },
                "resourceClaims": {
                    "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaim"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge,retainKeys"
                },
                "restartPolicy": {
                    "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n\nPossible enum values:\n - `\"Always\"`\n - `\"Never\"`\n - `\"OnFailure\"`",
                    "type": "string",
                    "enum": [
                        "Always",
                        "Never",
                        "OnFailure"
                    ]
                },
                "runtimeClassName": {
                    "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
                    "type": "string"
                },
                "schedulerName": {
                    "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                    "type": "string"
                },
                "schedulingGates": {
                    "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\nThis is a beta feature enabled by the PodSchedulingReadiness feature gate.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodSchedulingGate"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccount": {
                    "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
                    "type": "string"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "string"
                },
                "setHostnameAsFQDN": {
                    "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
                    "type": "boolean"
                },
                "shareProcessNamespace": {
                    "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
                    "type": "boolean"
                },
                "subdomain": {
                    "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
                    "type": "string"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
                    "type": "integer",
                    "format": "int64"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    },
                    "x-kubernetes-list-map-keys": [
                        "topologyKey",
                        "whenUnsatisfiable"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "topologyKey",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumes": {
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge,retainKeys"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodStatus": {
            "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "containerStatuses": {
                    "description": "The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
                    }
                },
                "ephemeralContainerStatuses": {
                    "description": "Status for any ephemeral containers that have run in this pod.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
                    }
                },
                "hostIP": {
                    "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod",
                    "type": "string"
                },
                "hostIPs": {
                    "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostIP"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "initContainerStatuses": {
                    "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
                    }
                },
                "message": {
                    "description": "A human readable message indicating details about why the pod is in this condition.",
                    "type": "string"
                },
                "nominatedNodeName": {
                    "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
                    "type": "string"
                },
                "phase": {
                    "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n\nPossible enum values:\n - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).\n - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.\n - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.\n - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.\n - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)",
                    "type": "string",
                    "enum": [
                        "Failed",
                        "Pending",
                        "Running",
                        "Succeeded",
                        "Unknown"
                    ]
                },
                "podIP": {
                    "description": "podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
                    "type": "string"
                },
                "podIPs": {
                    "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "qosClass": {
                    "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes\n\nPossible enum values:\n - `\"BestEffort\"` is the BestEffort qos class.\n - `\"Burstable\"` is the Burstable qos class.\n - `\"Guaranteed\"` is the Guaranteed qos class.",
                    "type": "string",
                    "enum": [
                        "BestEffort",
                        "Burstable",
                        "Guaranteed"
                    ]
                },
                "reason": {
                    "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
                    "type": "string"
                },
                "resize": {
                    "description": "Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"",
                    "type": "string"
                },
                "resourceClaimStatuses": {
                    "description": "Status of resource claims.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaimStatus"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge,retainKeys"
                },
                "startTime": {
                    "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodStatusResult": {
            "description": "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "status": {
                    "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PodTemplate": {
            "description": "PodTemplate describes a template for creating copies of a predefined pod.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "template": {
                    "description": "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PodTemplate",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PodTemplateList": {
            "description": "PodTemplateList is a list of PodTemplates.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of pod templates",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "PodTemplateList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.PodTemplateSpec": {
            "description": "PodTemplateSpec describes the data a pod should have when created from a template",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PortStatus": {
            "type": "object",
            "required": [
                "port",
                "protocol"
            ],
            "properties": {
                "error": {
                    "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port number of the service port of which status is recorded here",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PortworxVolumeSource": {
            "description": "PortworxVolumeSource represents a Portworx volume resource.",
            "type": "object",
            "required": [
                "volumeID"
            ],
            "properties": {
                "fsType": {
                    "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID uniquely identifies a Portworx volume",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PreferAvoidPodsEntry": {
            "description": "Describes a class of pods that should avoid this node.",
            "type": "object",
            "required": [
                "podSignature"
            ],
            "properties": {
                "evictionTime": {
                    "description": "Time at which this entry was added to the list.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human readable message indicating why this entry was added to the list.",
                    "type": "string"
                },
                "podSignature": {
                    "description": "The class of pods.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSignature"
                },
                "reason": {
                    "description": "(brief) reason why this entry was added to the list.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.PreferredSchedulingTerm": {
            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
            "type": "object",
            "required": [
                "weight",
                "preference"
            ],
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Probe": {
            "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "integer",
                    "format": "int32"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "type": "integer",
                    "format": "int64"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ProbeHandler": {
            "description": "ProbeHandler defines a specific action that should be taken in a probe. One and only one of the fields must be specified.",
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ProjectedVolumeSource": {
            "description": "Represents a projected volume source",
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "sources": {
                    "description": "sources is the list of volume projections",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.QuobyteVolumeSource": {
            "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
            "type": "object",
            "required": [
                "registry",
                "volume"
            ],
            "properties": {
                "group": {
                    "description": "group to map volume access to Default is no group",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                    "type": "boolean"
                },
                "registry": {
                    "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                    "type": "string",
                    "default": ""
                },
                "tenant": {
                    "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                    "type": "string"
                },
                "user": {
                    "description": "user to map volume access to Defaults to serivceaccount user",
                    "type": "string"
                },
                "volume": {
                    "description": "volume is a string that references an already created Quobyte volume by name.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "monitors",
                "image"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string",
                    "default": ""
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "user": {
                    "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.RBDVolumeSource": {
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "required": [
                "monitors",
                "image"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string",
                    "default": ""
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "user": {
                    "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.RangeAllocation": {
            "description": "RangeAllocation is not a public type.",
            "type": "object",
            "required": [
                "range",
                "data"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "data": {
                    "description": "Data is a bit array containing all allocated addresses in the previous segment.",
                    "type": "string",
                    "format": "byte"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "range": {
                    "description": "Range is string that identifies the range represented by 'data'.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ReplicationController": {
            "description": "ReplicationController represents the configuration of a replication controller.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec"
                },
                "status": {
                    "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ReplicationController",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ReplicationControllerCondition": {
            "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "The last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of replication controller condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ReplicationControllerList": {
            "description": "ReplicationControllerList is a collection of replication controllers.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ReplicationControllerList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ReplicationControllerSpec": {
            "description": "ReplicationControllerSpec is the specification of a replication controller.",
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "atomic"
                },
                "template": {
                    "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ReplicationControllerStatus": {
            "description": "ReplicationControllerStatus represents the current status of a replication controller.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a replication controller's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "fullyLabeledReplicas": {
                    "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "The number of ready replicas for this replication controller.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ResourceClaim": {
            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ResourceFieldSelector": {
            "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
            "type": "object",
            "required": [
                "resource"
            ],
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ResourceQuota": {
            "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
                },
                "status": {
                    "description": "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ResourceQuota",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ResourceQuotaList": {
            "description": "ResourceQuotaList is a list of ResourceQuota items.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ResourceQuotaList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ResourceQuotaSpec": {
            "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
            "type": "object",
            "properties": {
                "hard": {
                    "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "scopeSelector": {
                    "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector"
                },
                "scopes": {
                    "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ResourceQuotaStatus": {
            "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
            "type": "object",
            "properties": {
                "hard": {
                    "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "used": {
                    "description": "Used is the current observed total usage of the resource in the namespace.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ResourceRequirements": {
            "description": "ResourceRequirements describes the compute resource requirements.",
            "type": "object",
            "properties": {
                "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ResourceClaim"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SELinuxOptions": {
            "description": "SELinuxOptions are the labels to be applied to the container",
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
            "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
            "type": "object",
            "required": [
                "gateway",
                "system",
                "secretRef"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string",
                    "default": ""
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
                },
                "sslEnabled": {
                    "description": "sslEnabled is the flag to enable/disable SSL communication with Gateway, default false",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string",
                    "default": ""
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ScaleIOVolumeSource": {
            "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
            "type": "object",
            "required": [
                "gateway",
                "system",
                "secretRef"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string",
                    "default": ""
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "sslEnabled": {
                    "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string",
                    "default": ""
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ScopeSelector": {
            "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of scope selector requirements by scope of the resources.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
                    }
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
            "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
            "type": "object",
            "required": [
                "scopeName",
                "operator"
            ],
            "properties": {
                "operator": {
                    "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"In\"`\n - `\"NotIn\"`",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "DoesNotExist",
                        "Exists",
                        "In",
                        "NotIn"
                    ]
                },
                "scopeName": {
                    "description": "The name of the scope that the selector applies to.\n\nPossible enum values:\n - `\"BestEffort\"` Match all pod objects that have best effort quality of service\n - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.\n - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service\n - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil\n - `\"PriorityClass\"` Match all pod objects that have priority class mentioned\n - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds \u003e=0",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "BestEffort",
                        "CrossNamespacePodAffinity",
                        "NotBestEffort",
                        "NotTerminating",
                        "PriorityClass",
                        "Terminating"
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SeccompProfile": {
            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\nPossible enum values:\n - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to \u003ckubelet-root-dir\u003e/seccomp.\n - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.\n - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "Localhost",
                        "RuntimeDefault",
                        "Unconfined"
                    ]
                }
            },
            "x-kubernetes-unions": [
                {
                    "discriminator": "type",
                    "fields-to-discriminateBy": {
                        "localhostProfile": "LocalhostProfile"
                    }
                }
            ],
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Secret": {
            "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "data": {
                    "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "format": "byte"
                    }
                },
                "immutable": {
                    "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "stringData": {
                    "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "type": {
                    "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Secret",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.SecretEnvSource": {
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SecretKeySelector": {
            "description": "SecretKeySelector selects a key of a Secret.",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SecretList": {
            "description": "SecretList is a list of Secret.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "SecretList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.SecretProjection": {
            "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SecretReference": {
            "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is unique within a namespace to reference a secret resource.",
                    "type": "string"
                },
                "namespace": {
                    "description": "namespace defines the space within which the secret name must be unique.",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SecretVolumeSource": {
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer",
                    "format": "int32"
                },
                "items": {
                    "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    }
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its keys must be defined",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SecurityContext": {
            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                    "type": "boolean"
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities"
                },
                "privileged": {
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Default\"` uses the container runtime defaults for readonly and masked paths for /proc. Most container runtimes mask certain paths in /proc to avoid accidental security exposure of special devices or information.\n - `\"Unmasked\"` bypasses the default masking behavior of the container runtime and ensures the newly created /proc the container stays in tact with no modifications.",
                    "type": "string",
                    "enum": [
                        "Default",
                        "Unmasked"
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "integer",
                    "format": "int64"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                    "type": "integer",
                    "format": "int64"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod \u0026 container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SerializedReference": {
            "description": "SerializedReference is a reference to serialized object.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "reference": {
                    "description": "The reference to an object in the system.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Service": {
            "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
                },
                "status": {
                    "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Service",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ServiceAccount": {
            "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
                    "type": "boolean"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "secrets": {
                    "description": "Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ServiceAccount",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ServiceAccountList": {
            "description": "ServiceAccountList is a list of ServiceAccount objects",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ServiceAccountList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
            "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                    "type": "integer",
                    "format": "int64"
                },
                "path": {
                    "description": "path is the path relative to the mount point of the file to project the token into.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ServiceList": {
            "description": "ServiceList holds a list of services.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of services",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Service"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "ServiceList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.core.v1.ServicePort": {
            "description": "ServicePort contains information on service's port.",
            "type": "object",
            "required": [
                "port"
            ],
            "properties": {
                "appProtocol": {
                    "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
                    "type": "string"
                },
                "nodePort": {
                    "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
                    "type": "integer",
                    "format": "int32"
                },
                "port": {
                    "description": "The port that will be exposed by this service.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "TCP",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                },
                "targetPort": {
                    "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ServiceProxyOptions": {
            "description": "ServiceProxyOptions is the query options to a Service's proxy call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ServiceSpec": {
            "description": "ServiceSpec describes the attributes that a user creates on a service.",
            "type": "object",
            "properties": {
                "allocateLoadBalancerNodePorts": {
                    "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.",
                    "type": "boolean"
                },
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "string"
                },
                "clusterIPs": {
                    "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "externalIPs": {
                    "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "externalName": {
                    "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".",
                    "type": "string"
                },
                "externalTrafficPolicy": {
                    "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.\n\nPossible enum values:\n - `\"Cluster\"`\n - `\"Cluster\"` routes traffic to all endpoints.\n - `\"Local\"`\n - `\"Local\"` preserves the source IP of the traffic by routing only to endpoints on the same node as the traffic was received on (dropping the traffic if there are no local endpoints).",
                    "type": "string",
                    "enum": [
                        "Cluster",
                        "Cluster",
                        "Local",
                        "Local"
                    ]
                },
                "healthCheckNodePort": {
                    "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.",
                    "type": "integer",
                    "format": "int32"
                },
                "internalTrafficPolicy": {
                    "description": "InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).\n\nPossible enum values:\n - `\"Cluster\"` routes traffic to all endpoints.\n - `\"Local\"` routes traffic only to endpoints on the same node as the client pod (dropping the traffic if there are no local endpoints).",
                    "type": "string",
                    "enum": [
                        "Cluster",
                        "Local"
                    ]
                },
                "ipFamilies": {
                    "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "ipFamilyPolicy": {
                    "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.\n\nPossible enum values:\n - `\"PreferDualStack\"` indicates that this service prefers dual-stack when the cluster is configured for dual-stack. If the cluster is not configured for dual-stack the service will be assigned a single IPFamily. If the IPFamily is not set in service.spec.ipFamilies then the service will be assigned the default IPFamily configured on the cluster\n - `\"RequireDualStack\"` indicates that this service requires dual-stack. Using IPFamilyPolicyRequireDualStack on a single stack cluster will result in validation errors. The IPFamilies (and their order) assigned to this service is based on service.spec.ipFamilies. If service.spec.ipFamilies was not provided then it will be assigned according to how they are configured on the cluster. If service.spec.ipFamilies has only one entry then the alternative IPFamily will be added by apiserver\n - `\"SingleStack\"` indicates that this service is required to have a single IPFamily. The IPFamily assigned is based on the default IPFamily used by the cluster or as identified by service.spec.ipFamilies field",
                    "type": "string",
                    "enum": [
                        "PreferDualStack",
                        "RequireDualStack",
                        "SingleStack"
                    ]
                },
                "loadBalancerClass": {
                    "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
                    "type": "string"
                },
                "loadBalancerIP": {
                    "description": "Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.",
                    "type": "string"
                },
                "loadBalancerSourceRanges": {
                    "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "ports": {
                    "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "port",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "port",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "publishNotReadyAddresses": {
                    "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
                    "type": "boolean"
                },
                "selector": {
                    "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "atomic"
                },
                "sessionAffinity": {
                    "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n\nPossible enum values:\n - `\"ClientIP\"` is the Client IP based.\n - `\"None\"` - no session affinity.",
                    "type": "string",
                    "enum": [
                        "ClientIP",
                        "None"
                    ]
                },
                "sessionAffinityConfig": {
                    "description": "sessionAffinityConfig contains the configurations of session affinity.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig"
                },
                "type": {
                    "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n\nPossible enum values:\n - `\"ClusterIP\"` means a service will only be accessible inside the cluster, via the cluster IP.\n - `\"ExternalName\"` means a service consists of only a reference to an external name that kubedns or equivalent will return as a CNAME record, with no exposing or proxying of any pods involved.\n - `\"LoadBalancer\"` means a service will be exposed via an external load balancer (if the cloud provider supports it), in addition to 'NodePort' type.\n - `\"NodePort\"` means a service will be exposed on one port of every node, in addition to 'ClusterIP' type.",
                    "type": "string",
                    "enum": [
                        "ClusterIP",
                        "ExternalName",
                        "LoadBalancer",
                        "NodePort"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.ServiceStatus": {
            "description": "ServiceStatus represents the current status of a service.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "loadBalancer": {
                    "description": "LoadBalancer contains the current status of the load-balancer, if one is present.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SessionAffinityConfig": {
            "description": "SessionAffinityConfig represents the configurations of session affinity.",
            "type": "object",
            "properties": {
                "clientIP": {
                    "description": "clientIP contains the configurations of Client IP based session affinity.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.SleepAction": {
            "description": "SleepAction describes a \"sleep\" action.",
            "type": "object",
            "required": [
                "seconds"
            ],
            "properties": {
                "seconds": {
                    "description": "Seconds is the number of seconds to sleep.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
            "description": "Represents a StorageOS persistent volume resource.",
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.StorageOSVolumeSource": {
            "description": "Represents a StorageOS persistent volume resource.",
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Sysctl": {
            "description": "Sysctl defines a kernel parameter to be set",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "description": "Name of a property to set",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value of a property to set",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TCPSocketAction": {
            "description": "TCPSocketAction describes an action based on opening a socket",
            "type": "object",
            "required": [
                "port"
            ],
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Taint": {
            "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
            "type": "object",
            "required": [
                "key",
                "effect"
            ],
            "properties": {
                "effect": {
                    "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "NoExecute",
                        "NoSchedule",
                        "PreferNoSchedule"
                    ]
                },
                "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string",
                    "default": ""
                },
                "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "value": {
                    "description": "The taint value corresponding to the taint key.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Toleration": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
                    "type": "string",
                    "enum": [
                        "NoExecute",
                        "NoSchedule",
                        "PreferNoSchedule"
                    ]
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`",
                    "type": "string",
                    "enum": [
                        "Equal",
                        "Exists"
                    ]
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
            "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
            "type": "object",
            "required": [
                "key",
                "values"
            ],
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string",
                    "default": ""
                },
                "values": {
                    "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TopologySelectorTerm": {
            "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
            "type": "object",
            "properties": {
                "matchLabelExpressions": {
                    "description": "A list of topology selector requirements by labels.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
                    }
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TopologySpreadConstraint": {
            "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
            "type": "object",
            "required": [
                "maxSkew",
                "topologyKey",
                "whenUnsatisfiable"
            ],
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "minDomains": {
                    "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                    "type": "integer",
                    "format": "int32"
                },
                "nodeAffinityPolicy": {
                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
                    "type": "string",
                    "enum": [
                        "Honor",
                        "Ignore"
                    ]
                },
                "nodeTaintsPolicy": {
                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n\nPossible enum values:\n - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.\n - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.",
                    "type": "string",
                    "enum": [
                        "Honor",
                        "Ignore"
                    ]
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                    "type": "string",
                    "default": ""
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\nPossible enum values:\n - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.\n - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "DoNotSchedule",
                        "ScheduleAnyway"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TypedLocalObjectReference": {
            "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.TypedObjectReference": {
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.Volume": {
            "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource"
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource"
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource"
                },
                "configMap": {
                    "description": "configMap represents a configMap that should populate this volume",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource"
                },
                "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource"
                },
                "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume",
                    "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource"
                },
                "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource"
                },
                "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource"
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource"
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                },
                "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource"
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
                },
                "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource"
                },
                "name": {
                    "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
                },
                "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
                },
                "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource"
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource"
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource"
                },
                "secret": {
                    "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource"
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource"
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeDevice": {
            "description": "volumeDevice describes a mapping of a raw block device within a container.",
            "type": "object",
            "required": [
                "name",
                "devicePath"
            ],
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeMount": {
            "description": "VolumeMount describes a mounting of a Volume within a container.",
            "type": "object",
            "required": [
                "name",
                "mountPath"
            ],
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string",
                    "default": ""
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n\nPossible enum values:\n - `\"Bidirectional\"` means that the volume in a container will receive new mounts from the host or other containers, and its own mounts will be propagated from the container to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rshared\" in Linux terminology).\n - `\"HostToContainer\"` means that the volume in a container will receive new mounts from the host or other containers, but filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rslave\" in Linux terminology).\n - `\"None\"` means that the volume in a container will not receive new mounts from the host or other containers, and filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode corresponds to \"private\" in Linux terminology.",
                    "type": "string",
                    "enum": [
                        "Bidirectional",
                        "HostToContainer",
                        "None"
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string",
                    "default": ""
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeNodeAffinity": {
            "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
            "type": "object",
            "properties": {
                "required": {
                    "description": "required specifies hard node constraints that must be met.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeProjection": {
            "description": "Projection that may be projected along with other supported volume types",
            "type": "object",
            "properties": {
                "clusterTrustBundle": {
                    "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ClusterTrustBundleProjection"
                },
                "configMap": {
                    "description": "configMap information about the configMap data to project",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection"
                },
                "downwardAPI": {
                    "description": "downwardAPI information about the downwardAPI data to project",
                    "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection"
                },
                "secret": {
                    "description": "secret information about the secret data to project",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection"
                },
                "serviceAccountToken": {
                    "description": "serviceAccountToken is information about the serviceAccountToken data to project",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeResourceRequirements": {
            "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.",
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VolumeSource": {
            "description": "Represents the source of a volume to mount. Only one of its members may be specified.",
            "type": "object",
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource"
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource"
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource"
                },
                "configMap": {
                    "description": "configMap represents a configMap that should populate this volume",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource"
                },
                "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
                    "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource"
                },
                "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume",
                    "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource"
                },
                "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource"
                },
                "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource"
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource"
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                },
                "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource"
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
                },
                "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource"
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
                },
                "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
                },
                "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource"
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource"
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource"
                },
                "secret": {
                    "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource"
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource"
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
            "description": "Represents a vSphere volume resource.",
            "type": "object",
            "required": [
                "volumePath"
            ],
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
                    "type": "string"
                },
                "volumePath": {
                    "description": "volumePath is the path that identifies vSphere volume vmdk",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
            "type": "object",
            "required": [
                "weight",
                "podAffinityTerm"
            ],
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSet": {
            "description": "DEPRECATED - This group version of DaemonSet is deprecated by apps/v1beta2/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetSpec"
                },
                "status": {
                    "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSetCondition": {
            "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of DaemonSet condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSetList": {
            "description": "DaemonSetList is a collection of daemon sets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "A list of daemon sets.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSetSpec": {
            "description": "DaemonSetSpec is the specification of a daemon set.",
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "templateGeneration": {
                    "description": "DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.",
                    "type": "integer",
                    "format": "int64"
                },
                "updateStrategy": {
                    "description": "An update strategy to replace existing DaemonSet pods with new pods.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSetStatus": {
            "description": "DaemonSetStatus represents the current status of a daemon set.",
            "type": "object",
            "required": [
                "currentNumberScheduled",
                "numberMisscheduled",
                "desiredNumberScheduled",
                "numberReady"
            ],
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a DaemonSet's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentNumberScheduled": {
                    "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredNumberScheduled": {
                    "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberAvailable": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "numberMisscheduled": {
                    "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberReady": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberUnavailable": {
                    "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "The most recent generation observed by the daemon set controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "updatedNumberScheduled": {
                    "description": "The total number of nodes that are running updated daemon pod",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DaemonSetUpdateStrategy": {
            "description": "DaemonSetUpdateStrategy indicates the strategy that the DaemonSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollingUpdateDaemonSet"
                },
                "type": {
                    "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.Deployment": {
            "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentSpec"
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentCondition": {
            "description": "DeploymentCondition describes the state of a deployment at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentList": {
            "description": "DeploymentList is a list of Deployments.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Deployments.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentRollback": {
            "description": "DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.",
            "type": "object",
            "required": [
                "name",
                "rollbackTo"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Required: This must match the Name of a deployment.",
                    "type": "string",
                    "default": ""
                },
                "rollbackTo": {
                    "description": "The config of this deployment rollback.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollbackConfig"
                },
                "updatedAnnotations": {
                    "description": "The annotations to be updated to a deployment",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentSpec": {
            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused and will not be processed by the deployment controller.",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is set to the max value of int32 (i.e. 2147483647) by default, which means \"no deadline\".",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. This is set to the max value of int32 (i.e. 2147483647) by default, which means \"retaining all old ReplicaSets\".",
                    "type": "integer",
                    "format": "int32"
                },
                "rollbackTo": {
                    "description": "DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollbackConfig"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentStrategy",
                    "x-kubernetes-patch-strategy": "retainKeys"
                },
                "template": {
                    "description": "Template describes the pods that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentStatus": {
            "description": "DeploymentStatus is the most recently observed status of the Deployment.",
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "Total number of ready pods targeted by this deployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
                    "type": "integer",
                    "format": "int32"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.DeploymentStrategy": {
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollingUpdateDeployment"
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.HTTPIngressPath": {
            "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
            "type": "object",
            "required": [
                "backend"
            ],
            "properties": {
                "backend": {
                    "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
                },
                "path": {
                    "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.",
                    "type": "string"
                },
                "pathType": {
                    "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue": {
            "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
            "type": "object",
            "required": [
                "paths"
            ],
            "properties": {
                "paths": {
                    "description": "A collection of paths that map requests to backends.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressPath"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IPBlock": {
            "description": "DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
            "type": "object",
            "required": [
                "cidr"
            ],
            "properties": {
                "cidr": {
                    "description": "CIDR is a string representing the IP Block Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
                    "type": "string",
                    "default": ""
                },
                "except": {
                    "description": "Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the CIDR range",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.Ingress": {
            "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec"
                },
                "status": {
                    "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "extensions",
                    "kind": "Ingress",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.extensions.v1beta1.IngressBackend": {
            "description": "IngressBackend describes all endpoints for a given service and port.",
            "type": "object",
            "properties": {
                "resource": {
                    "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
                },
                "serviceName": {
                    "description": "Specifies the name of the referenced service.",
                    "type": "string"
                },
                "servicePort": {
                    "description": "Specifies the port of the referenced service.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressList": {
            "description": "IngressList is a collection of Ingress.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is the list of Ingress.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "extensions",
                    "kind": "IngressList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.extensions.v1beta1.IngressLoadBalancerIngress": {
            "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.",
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based.",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based.",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports provides information about the ports exposed by this LoadBalancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressPortStatus"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressLoadBalancerStatus": {
            "description": "LoadBalancerStatus represents the status of a load-balancer.",
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "Ingress is a list containing ingress points for the load-balancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressLoadBalancerIngress"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressPortStatus": {
            "description": "IngressPortStatus represents the error condition of a service port",
            "type": "object",
            "required": [
                "port",
                "protocol"
            ],
            "properties": {
                "error": {
                    "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port number of the ingress port.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "Protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressRule": {
            "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
                    "type": "string"
                },
                "http": {
                    "description": "http is a list of http selectors pointing to backends. A path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. A backend defines the referenced service endpoint to which the traffic will be forwarded to.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressRuleValue": {
            "description": "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set.",
            "type": "object",
            "properties": {
                "http": {
                    "description": "http is a list of http selectors pointing to backends. A path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. A backend defines the referenced service endpoint to which the traffic will be forwarded to.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressSpec": {
            "description": "IngressSpec describes the Ingress the user wishes to exist.",
            "type": "object",
            "properties": {
                "backend": {
                    "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
                },
                "ingressClassName": {
                    "description": "IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
                    "type": "string"
                },
                "rules": {
                    "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressRule"
                    }
                },
                "tls": {
                    "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressTLS"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressStatus": {
            "description": "IngressStatus describe the current state of the Ingress.",
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "description": "LoadBalancer contains the current status of the load-balancer.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressLoadBalancerStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.IngressTLS": {
            "description": "IngressTLS describes the transport layer security associated with an Ingress.",
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "secretName": {
                    "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicy": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior for this NetworkPolicy.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicySpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicyEgressRule": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
            "type": "object",
            "properties": {
                "ports": {
                    "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPort"
                    }
                },
                "to": {
                    "description": "List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPeer"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicyIngressRule": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.",
            "type": "object",
            "properties": {
                "from": {
                    "description": "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPeer"
                    }
                },
                "ports": {
                    "description": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPort"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicyList": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of schema objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicyPeer": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.",
            "type": "object",
            "properties": {
                "ipBlock": {
                    "description": "IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IPBlock"
                },
                "namespaceSelector": {
                    "description": "Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "podSelector": {
                    "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicyPort": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.",
            "type": "object",
            "properties": {
                "endPort": {
                    "description": "If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
                    "type": "integer",
                    "format": "int32"
                },
                "port": {
                    "description": "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "protocol": {
                    "description": "Optional.  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.NetworkPolicySpec": {
            "description": "DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.",
            "type": "object",
            "required": [
                "podSelector"
            ],
            "properties": {
                "egress": {
                    "description": "List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyEgressRule"
                    }
                },
                "ingress": {
                    "description": "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyIngressRule"
                    }
                },
                "podSelector": {
                    "description": "Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "policyTypes": {
                    "description": "List of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ReplicaSet": {
            "description": "DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1beta2/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetSpec"
                },
                "status": {
                    "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ReplicaSetCondition": {
            "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "The last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of replica set condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ReplicaSetList": {
            "description": "ReplicaSetList is a collection of ReplicaSets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ReplicaSetSpec": {
            "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ReplicaSetStatus": {
            "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a replica set's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "fullyLabeledReplicas": {
                    "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "The number of ready replicas for this replica set.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.RollbackConfig": {
            "description": "DEPRECATED.",
            "type": "object",
            "properties": {
                "revision": {
                    "description": "The revision to rollback to. If set to 0, rollback to the last revision.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.RollingUpdateDaemonSet": {
            "description": "Spec to control the desired behavior of daemon set rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is an alpha field and requires enabling DaemonSetUpdateSurge feature gate.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.RollingUpdateDeployment": {
            "description": "Spec to control the desired behavior of rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.Scale": {
            "description": "represents a scaling request for a resource.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleSpec"
                },
                "status": {
                    "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ScaleSpec": {
            "description": "describes the attributes of a scale subresource",
            "type": "object",
            "properties": {
                "replicas": {
                    "description": "desired number of instances for the scaled object.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.extensions.v1beta1.ScaleStatus": {
            "description": "represents the current status of a scale subresource.",
            "type": "object",
            "required": [
                "replicas"
            ],
            "properties": {
                "replicas": {
                    "description": "actual number of observed instances of the scaled object.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replicas count. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-map-type": "atomic"
                },
                "targetSelector": {
                    "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.HTTPIngressPath": {
            "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
            "type": "object",
            "required": [
                "pathType",
                "backend"
            ],
            "properties": {
                "backend": {
                    "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
                },
                "path": {
                    "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
                    "type": "string"
                },
                "pathType": {
                    "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.\n\nPossible enum values:\n - `\"Exact\"` matches the URL path exactly and with case sensitivity.\n - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.\n - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.",
                    "type": "string",
                    "enum": [
                        "Exact",
                        "ImplementationSpecific",
                        "Prefix"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
            "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
            "type": "object",
            "required": [
                "paths"
            ],
            "properties": {
                "paths": {
                    "description": "paths is a collection of paths that map requests to backends.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IPBlock": {
            "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
            "type": "object",
            "required": [
                "cidr"
            ],
            "properties": {
                "cidr": {
                    "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
                    "type": "string",
                    "default": ""
                },
                "except": {
                    "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.Ingress": {
            "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec"
                },
                "status": {
                    "description": "status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "Ingress",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.IngressBackend": {
            "description": "IngressBackend describes all endpoints for a given service and port.",
            "type": "object",
            "properties": {
                "resource": {
                    "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
                },
                "service": {
                    "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\".",
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressClass": {
            "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressClass",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.IngressClassList": {
            "description": "IngressClassList is a collection of IngressClasses.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of IngressClasses.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressClassList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.IngressClassParametersReference": {
            "description": "IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                    "type": "string"
                },
                "kind": {
                    "description": "kind is the type of resource being referenced.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of resource being referenced.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".",
                    "type": "string"
                },
                "scope": {
                    "description": "scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressClassSpec": {
            "description": "IngressClassSpec provides information about the class of an Ingress.",
            "type": "object",
            "properties": {
                "controller": {
                    "description": "controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
                    "type": "string"
                },
                "parameters": {
                    "description": "parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.",
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassParametersReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressList": {
            "description": "IngressList is a collection of Ingress.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of Ingress.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.IngressLoadBalancerIngress": {
            "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.",
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "hostname is set for load-balancer ingress points that are DNS based.",
                    "type": "string"
                },
                "ip": {
                    "description": "ip is set for load-balancer ingress points that are IP based.",
                    "type": "string"
                },
                "ports": {
                    "description": "ports provides information about the ports exposed by this LoadBalancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressPortStatus"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressLoadBalancerStatus": {
            "description": "IngressLoadBalancerStatus represents the status of a load-balancer.",
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "ingress is a list containing ingress points for the load-balancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerIngress"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressPortStatus": {
            "description": "IngressPortStatus represents the error condition of a service port",
            "type": "object",
            "required": [
                "port",
                "protocol"
            ],
            "properties": {
                "error": {
                    "description": "error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
                    "type": "string"
                },
                "port": {
                    "description": "port is the port number of the ingress port.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressRule": {
            "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
            "type": "object",
            "properties": {
                "host": {
                    "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
                    "type": "string"
                },
                "http": {
                    "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressRuleValue": {
            "description": "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set.",
            "type": "object",
            "properties": {
                "http": {
                    "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressServiceBackend": {
            "description": "IngressServiceBackend references a Kubernetes Service as a Backend.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object.",
                    "type": "string",
                    "default": ""
                },
                "port": {
                    "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressSpec": {
            "description": "IngressSpec describes the Ingress the user wishes to exist.",
            "type": "object",
            "properties": {
                "defaultBackend": {
                    "description": "defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.",
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
                },
                "ingressClassName": {
                    "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\u003e IngressClass -\u003e Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
                    "type": "string"
                },
                "rules": {
                    "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "tls": {
                    "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressStatus": {
            "description": "IngressStatus describe the current state of the Ingress.",
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "description": "loadBalancer contains the current status of the load-balancer.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.IngressTLS": {
            "description": "IngressTLS describes the transport layer security associated with an ingress.",
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "secretName": {
                    "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.NetworkPolicy": {
            "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents the specification of the desired behavior for this NetworkPolicy.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "NetworkPolicy",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
            "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
            "type": "object",
            "properties": {
                "ports": {
                    "description": "ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
                    }
                },
                "to": {
                    "description": "to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
            "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
            "type": "object",
            "properties": {
                "from": {
                    "description": "from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    }
                },
                "ports": {
                    "description": "ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.NetworkPolicyList": {
            "description": "NetworkPolicyList is a list of NetworkPolicy objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is a list of schema objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "NetworkPolicyList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.networking.v1.NetworkPolicyPeer": {
            "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
            "type": "object",
            "properties": {
                "ipBlock": {
                    "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock"
                },
                "namespaceSelector": {
                    "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "podSelector": {
                    "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.NetworkPolicyPort": {
            "description": "NetworkPolicyPort describes a port to allow traffic on",
            "type": "object",
            "properties": {
                "endPort": {
                    "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
                    "type": "integer",
                    "format": "int32"
                },
                "port": {
                    "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "protocol": {
                    "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.NetworkPolicySpec": {
            "description": "NetworkPolicySpec provides the specification of a NetworkPolicy",
            "type": "object",
            "required": [
                "podSelector"
            ],
            "properties": {
                "egress": {
                    "description": "egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
                    }
                },
                "ingress": {
                    "description": "ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
                    }
                },
                "podSelector": {
                    "description": "podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "policyTypes": {
                    "description": "policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1.ServiceBackendPort": {
            "description": "ServiceBackendPort is the service port being referenced.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
                    "type": "string"
                },
                "number": {
                    "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.HTTPIngressPath": {
            "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
            "type": "object",
            "required": [
                "backend"
            ],
            "properties": {
                "backend": {
                    "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend"
                },
                "path": {
                    "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
                    "type": "string"
                },
                "pathType": {
                    "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue": {
            "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
            "type": "object",
            "required": [
                "paths"
            ],
            "properties": {
                "paths": {
                    "description": "paths is a collection of paths that map requests to backends.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressPath"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.Ingress": {
            "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec"
                },
                "status": {
                    "description": "status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "Ingress",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.networking.v1beta1.IngressBackend": {
            "description": "IngressBackend describes all endpoints for a given service and port.",
            "type": "object",
            "properties": {
                "resource": {
                    "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
                },
                "serviceName": {
                    "description": "serviceName specifies the name of the referenced service.",
                    "type": "string"
                },
                "servicePort": {
                    "description": "servicePort Specifies the port of the referenced service.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressClass": {
            "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressClass",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.networking.v1beta1.IngressClassList": {
            "description": "IngressClassList is a collection of IngressClasses.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of IngressClasses.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressClassList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.networking.v1beta1.IngressClassParametersReference": {
            "description": "IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.",
            "type": "object",
            "required": [
                "kind",
                "name",
                "scope"
            ],
            "properties": {
                "apiGroup": {
                    "description": "apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                    "type": "string"
                },
                "kind": {
                    "description": "kind is the type of resource being referenced.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the name of resource being referenced.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".",
                    "type": "string"
                },
                "scope": {
                    "description": "scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressClassSpec": {
            "description": "IngressClassSpec provides information about the class of an Ingress.",
            "type": "object",
            "properties": {
                "controller": {
                    "description": "controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
                    "type": "string"
                },
                "parameters": {
                    "description": "parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.",
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassParametersReference"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressList": {
            "description": "IngressList is a collection of Ingress.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of Ingress.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "networking.k8s.io",
                    "kind": "IngressList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.networking.v1beta1.IngressLoadBalancerIngress": {
            "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.",
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "hostname is set for load-balancer ingress points that are DNS based.",
                    "type": "string"
                },
                "ip": {
                    "description": "ip is set for load-balancer ingress points that are IP based.",
                    "type": "string"
                },
                "ports": {
                    "description": "ports provides information about the ports exposed by this LoadBalancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressPortStatus"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressLoadBalancerStatus": {
            "description": "LoadBalancerStatus represents the status of a load-balancer.",
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "ingress is a list containing ingress points for the load-balancer.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressLoadBalancerIngress"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressPortStatus": {
            "description": "IngressPortStatus represents the error condition of a service port",
            "type": "object",
            "required": [
                "port",
                "protocol"
            ],
            "properties": {
                "error": {
                    "description": "error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
                    "type": "string"
                },
                "port": {
                    "description": "port is the port number of the ingress port.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "protocol": {
                    "description": "protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
                    "type": "string",
                    "default": "",
                    "enum": [
                        "SCTP",
                        "TCP",
                        "UDP"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressRule": {
            "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
            "type": "object",
            "properties": {
                "host": {
                    "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
                    "type": "string"
                },
                "http": {
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressRuleValue": {
            "description": "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set.",
            "type": "object",
            "properties": {
                "http": {
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressSpec": {
            "description": "IngressSpec describes the Ingress the user wishes to exist.",
            "type": "object",
            "properties": {
                "backend": {
                    "description": "backend is the default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend"
                },
                "ingressClassName": {
                    "description": "ingressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
                    "type": "string"
                },
                "rules": {
                    "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressRule"
                    }
                },
                "tls": {
                    "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressTLS"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressStatus": {
            "description": "IngressStatus describes the current state of the Ingress.",
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "description": "loadBalancer contains the current status of the load-balancer.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressLoadBalancerStatus"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.networking.v1beta1.IngressTLS": {
            "description": "IngressTLS describes the transport layer security associated with an Ingress.",
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "secretName": {
                    "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.policy.v1.Eviction": {
            "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/\u003cpod name\u003e/evictions.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "deleteOptions": {
                    "description": "DeleteOptions may be provided",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "ObjectMeta describes the pod that is being evicted.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "Eviction",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.policy.v1.PodDisruptionBudget": {
            "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the PodDisruptionBudget.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec"
                },
                "status": {
                    "description": "Most recently observed status of the PodDisruptionBudget.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "PodDisruptionBudget",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.policy.v1.PodDisruptionBudgetList": {
            "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of PodDisruptionBudgets",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "PodDisruptionBudgetList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.policy.v1.PodDisruptionBudgetSpec": {
            "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minAvailable": {
                    "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "selector": {
                    "description": "Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "x-kubernetes-patch-strategy": "replace"
                },
                "unhealthyPodEvictionPolicy": {
                    "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\nValid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\nAdditional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.\n\nThis field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).\n\nPossible enum values:\n - `\"AlwaysAllow\"` policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n - `\"IfHealthyBudget\"` policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.",
                    "type": "string",
                    "enum": [
                        "AlwaysAllow",
                        "IfHealthyBudget"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.policy.v1.PodDisruptionBudgetStatus": {
            "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
            "type": "object",
            "required": [
                "disruptionsAllowed",
                "currentHealthy",
                "desiredHealthy",
                "expectedPods"
            ],
            "properties": {
                "conditions": {
                    "description": "Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute\n              the number of allowed disruptions. Therefore no disruptions are\n              allowed and the status of the condition will be False.\n- InsufficientPods: The number of pods are either at or below the number\n                    required by the PodDisruptionBudget. No disruptions are\n                    allowed and the status of the condition will be False.\n- SufficientPods: There are more pods than required by the PodDisruptionBudget.\n                  The condition will be True, and the number of allowed\n                  disruptions are provided by the disruptionsAllowed property.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentHealthy": {
                    "description": "current number of healthy pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredHealthy": {
                    "description": "minimum desired number of healthy pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "disruptedPods": {
                    "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                },
                "disruptionsAllowed": {
                    "description": "Number of pod disruptions that are currently allowed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "expectedPods": {
                    "description": "total number of pods counted by this disruption budget",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "observedGeneration": {
                    "description": "Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.policy.v1beta1.Eviction": {
            "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/\u003cpod name\u003e/evictions.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "deleteOptions": {
                    "description": "DeleteOptions may be provided",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "ObjectMeta describes the pod that is being evicted.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "Eviction",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.policy.v1beta1.PodDisruptionBudget": {
            "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the PodDisruptionBudget.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
                },
                "status": {
                    "description": "Most recently observed status of the PodDisruptionBudget.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "PodDisruptionBudget",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
            "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items list individual PodDisruptionBudget objects",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy",
                    "kind": "PodDisruptionBudgetList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec": {
            "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minAvailable": {
                    "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "selector": {
                    "description": "Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "unhealthyPodEvictionPolicy": {
                    "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\nValid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\nAdditional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.\n\nThis field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).\n\nPossible enum values:\n - `\"AlwaysAllow\"` policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n - `\"IfHealthyBudget\"` policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.",
                    "type": "string",
                    "enum": [
                        "AlwaysAllow",
                        "IfHealthyBudget"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus": {
            "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
            "type": "object",
            "required": [
                "disruptionsAllowed",
                "currentHealthy",
                "desiredHealthy",
                "expectedPods"
            ],
            "properties": {
                "conditions": {
                    "description": "Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute\n              the number of allowed disruptions. Therefore no disruptions are\n              allowed and the status of the condition will be False.\n- InsufficientPods: The number of pods are either at or below the number\n                    required by the PodDisruptionBudget. No disruptions are\n                    allowed and the status of the condition will be False.\n- SufficientPods: There are more pods than required by the PodDisruptionBudget.\n                  The condition will be True, and the number of allowed\n                  disruptions are provided by the disruptionsAllowed property.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                    },
                    "x-kubernetes-list-map-keys": [
                        "type"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentHealthy": {
                    "description": "current number of healthy pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredHealthy": {
                    "description": "minimum desired number of healthy pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "disruptedPods": {
                    "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                },
                "disruptionsAllowed": {
                    "description": "Number of pod disruptions that are currently allowed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "expectedPods": {
                    "description": "total number of pods counted by this disruption budget",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "observedGeneration": {
                    "description": "Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1.AggregationRule": {
            "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
            "type": "object",
            "properties": {
                "clusterRoleSelectors": {
                    "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1.ClusterRole": {
            "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
            "type": "object",
            "properties": {
                "aggregationRule": {
                    "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
                    "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "rules": {
                    "description": "Rules holds all the PolicyRules for this ClusterRole",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRole",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.ClusterRoleBinding": {
            "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
            "type": "object",
            "required": [
                "roleRef"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "roleRef": {
                    "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
                },
                "subjects": {
                    "description": "Subjects holds references to the objects the role applies to.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleBinding",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
            "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of ClusterRoleBindings",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleBindingList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.ClusterRoleList": {
            "description": "ClusterRoleList is a collection of ClusterRoles",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of ClusterRoles",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.PolicyRule": {
            "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
            "type": "object",
            "required": [
                "verbs"
            ],
            "properties": {
                "apiGroups": {
                    "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "nonResourceURLs": {
                    "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "resourceNames": {
                    "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "resources": {
                    "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "verbs": {
                    "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1.Role": {
            "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "rules": {
                    "description": "Rules holds all the PolicyRules for this Role",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "Role",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.RoleBinding": {
            "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
            "type": "object",
            "required": [
                "roleRef"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "roleRef": {
                    "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
                },
                "subjects": {
                    "description": "Subjects holds references to the objects the role applies to.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleBinding",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.RoleBindingList": {
            "description": "RoleBindingList is a collection of RoleBindings",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of RoleBindings",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleBindingList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.RoleList": {
            "description": "RoleList is a collection of Roles",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of Roles",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.rbac.v1.RoleRef": {
            "description": "RoleRef contains information that points to the role being used",
            "type": "object",
            "required": [
                "apiGroup",
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1.Subject": {
            "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the object being referenced.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
                    "type": "string"
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1alpha1.AggregationRule": {
            "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
            "type": "object",
            "properties": {
                "clusterRoleSelectors": {
                    "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1alpha1.ClusterRole": {
            "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.",
            "type": "object",
            "properties": {
                "aggregationRule": {
                    "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
                    "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.AggregationRule"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "rules": {
                    "description": "Rules holds all the PolicyRules for this ClusterRole",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRole",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding": {
            "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "roleRef"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "roleRef": {
                    "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef"
                },
                "subjects": {
                    "description": "Subjects holds references to the objects the role applies to.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleBinding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList": {
            "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of ClusterRoleBindings",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleBindingList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.ClusterRoleList": {
            "description": "ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of ClusterRoles",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "ClusterRoleList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.PolicyRule": {
            "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
            "type": "object",
            "required": [
                "verbs"
            ],
            "properties": {
                "apiGroups": {
                    "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "nonResourceURLs": {
                    "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "resourceNames": {
                    "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "resources": {
                    "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "verbs": {
                    "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1alpha1.Role": {
            "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "rules": {
                    "description": "Rules holds all the PolicyRules for this Role",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "Role",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.RoleBinding": {
            "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "roleRef"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "roleRef": {
                    "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef"
                },
                "subjects": {
                    "description": "Subjects holds references to the objects the role applies to.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleBinding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.RoleBindingList": {
            "description": "RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of RoleBindings",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleBindingList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.RoleList": {
            "description": "RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a list of Roles",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "RoleList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.rbac.v1alpha1.RoleRef": {
            "description": "RoleRef contains information that points to the role being used",
            "type": "object",
            "required": [
                "apiGroup",
                "kind",
                "name"
            ],
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.rbac.v1alpha1.Subject": {
            "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the object being referenced.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.CSIDriver": {
            "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents the specification of the CSI Driver.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIDriver",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.CSIDriverList": {
            "description": "CSIDriverList is a collection of CSIDriver objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSIDriver",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIDriverList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.CSIDriverSpec": {
            "description": "CSIDriverSpec is the specification of a CSIDriver.",
            "type": "object",
            "properties": {
                "attachRequired": {
                    "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\nThis field is immutable.",
                    "type": "boolean"
                },
                "fsGroupPolicy": {
                    "description": "fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\nThis field is immutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.",
                    "type": "string"
                },
                "podInfoOnMount": {
                    "description": "podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\nThe CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\nThe following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\nThis field is immutable.",
                    "type": "boolean"
                },
                "requiresRepublish": {
                    "description": "requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\nNote: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.",
                    "type": "boolean"
                },
                "seLinuxMount": {
                    "description": "seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\nWhen \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\nWhen \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\nDefault is \"false\".",
                    "type": "boolean"
                },
                "storageCapacity": {
                    "description": "storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field was immutable in Kubernetes \u003c= 1.22 and now is mutable.",
                    "type": "boolean"
                },
                "tokenRequests": {
                    "description": "tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": {\n  \"\u003caudience\u003e\": {\n    \"token\": \u003ctoken\u003e,\n    \"expirationTimestamp\": \u003cexpiration timestamp in RFC3339\u003e,\n  },\n  ...\n}\n\nNote: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.TokenRequest"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "volumeLifecycleModes": {
                    "description": "volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\nThe other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\nFor more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.\n\nThis field is beta. This field is immutable.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "set"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.CSINode": {
            "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. metadata.name must be the Kubernetes node name.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the specification of CSINode",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSINode",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.CSINodeDriver": {
            "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node",
            "type": "object",
            "required": [
                "name",
                "nodeID"
            ],
            "properties": {
                "allocatable": {
                    "description": "allocatable represents the volume resources of a node that are available for scheduling. This field is beta.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeNodeResources"
                },
                "name": {
                    "description": "name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.",
                    "type": "string",
                    "default": ""
                },
                "nodeID": {
                    "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.",
                    "type": "string",
                    "default": ""
                },
                "topologyKeys": {
                    "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.CSINodeList": {
            "description": "CSINodeList is a collection of CSINode objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSINode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSINodeList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.CSINodeSpec": {
            "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node",
            "type": "object",
            "required": [
                "drivers"
            ],
            "properties": {
                "drivers": {
                    "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeDriver"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.CSIStorageCapacity": {
            "description": "CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.",
            "type": "object",
            "required": [
                "storageClassName"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "capacity": {
                    "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "maximumVolumeSize": {
                    "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metadata": {
                    "description": "Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "nodeTopology": {
                    "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "storageClassName": {
                    "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacity",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.CSIStorageCapacityList": {
            "description": "CSIStorageCapacityList is a collection of CSIStorageCapacity objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSIStorageCapacity objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacityList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.StorageClass": {
            "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
            "type": "object",
            "required": [
                "provisioner"
            ],
            "properties": {
                "allowVolumeExpansion": {
                    "description": "allowVolumeExpansion shows whether the storage class allow volume expand.",
                    "type": "boolean"
                },
                "allowedTopologies": {
                    "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "mountOptions": {
                    "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "parameters": {
                    "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "provisioner": {
                    "description": "provisioner indicates the type of the provisioner.",
                    "type": "string",
                    "default": ""
                },
                "reclaimPolicy": {
                    "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.\n\nPossible enum values:\n - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.\n - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.\n - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.",
                    "type": "string",
                    "enum": [
                        "Delete",
                        "Recycle",
                        "Retain"
                    ]
                },
                "volumeBindingMode": {
                    "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.\n\nPossible enum values:\n - `\"Immediate\"` indicates that PersistentVolumeClaims should be immediately provisioned and bound. This is the default mode.\n - `\"WaitForFirstConsumer\"` indicates that PersistentVolumeClaims should not be provisioned and bound until the first Pod is created that references the PeristentVolumeClaim. The volume provisioning and binding will occur during Pod scheduing.",
                    "type": "string",
                    "enum": [
                        "Immediate",
                        "WaitForFirstConsumer"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "StorageClass",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.StorageClassList": {
            "description": "StorageClassList is a collection of storage classes.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of StorageClasses",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "StorageClassList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.TokenRequest": {
            "description": "TokenRequest contains parameters of a service account token.",
            "type": "object",
            "required": [
                "audience"
            ],
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver.",
                    "type": "string",
                    "default": ""
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\".",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.VolumeAttachment": {
            "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec"
                },
                "status": {
                    "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachment",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.VolumeAttachmentList": {
            "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of VolumeAttachments",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachmentList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.api.storage.v1.VolumeAttachmentSource": {
            "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
            "type": "object",
            "properties": {
                "inlineVolumeSpec": {
                    "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
                },
                "persistentVolumeName": {
                    "description": "persistentVolumeName represents the name of the persistent volume to attach.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
            "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attacher",
                "source",
                "nodeName"
            ],
            "properties": {
                "attacher": {
                    "description": "attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
                    "type": "string",
                    "default": ""
                },
                "nodeName": {
                    "description": "nodeName represents the node that the volume should be attached to.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "source represents the volume that should be attached.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
            "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attached"
            ],
            "properties": {
                "attachError": {
                    "description": "attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
                },
                "attached": {
                    "description": "attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "boolean",
                    "default": false
                },
                "attachmentMetadata": {
                    "description": "attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "detachError": {
                    "description": "detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.VolumeError": {
            "description": "VolumeError captures an error encountered during a volume operation.",
            "type": "object",
            "properties": {
                "message": {
                    "description": "message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.",
                    "type": "string"
                },
                "time": {
                    "description": "time represents the time the error was encountered.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1.VolumeNodeResources": {
            "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1alpha1.CSIStorageCapacity": {
            "description": "CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.",
            "type": "object",
            "required": [
                "storageClassName"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "capacity": {
                    "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "maximumVolumeSize": {
                    "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metadata": {
                    "description": "Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "nodeTopology": {
                    "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "storageClassName": {
                    "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.CSIStorageCapacityList": {
            "description": "CSIStorageCapacityList is a collection of CSIStorageCapacity objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSIStorageCapacity objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.CSIStorageCapacity"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacityList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttachment": {
            "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec"
                },
                "status": {
                    "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachment",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttachmentList": {
            "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of VolumeAttachments",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachmentList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttachmentSource": {
            "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
            "type": "object",
            "properties": {
                "inlineVolumeSpec": {
                    "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
                },
                "persistentVolumeName": {
                    "description": "persistentVolumeName represents the name of the persistent volume to attach.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec": {
            "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attacher",
                "source",
                "nodeName"
            ],
            "properties": {
                "attacher": {
                    "description": "attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
                    "type": "string",
                    "default": ""
                },
                "nodeName": {
                    "description": "nodeName represents the node that the volume should be attached to.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "source represents the volume that should be attached.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus": {
            "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attached"
            ],
            "properties": {
                "attachError": {
                    "description": "attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeError"
                },
                "attached": {
                    "description": "attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "boolean",
                    "default": false
                },
                "attachmentMetadata": {
                    "description": "attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "detachError": {
                    "description": "detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeError"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttributesClass": {
            "description": "VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.",
            "type": "object",
            "required": [
                "driverName"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "driverName": {
                    "description": "Name of the CSI driver This field is immutable.",
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "parameters": {
                    "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttributesClass",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.VolumeAttributesClassList": {
            "description": "VolumeAttributesClassList is a collection of VolumeAttributesClass objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of VolumeAttributesClass objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttributesClassList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.k8s.api.storage.v1alpha1.VolumeError": {
            "description": "VolumeError captures an error encountered during a volume operation.",
            "type": "object",
            "properties": {
                "message": {
                    "description": "message represents the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.",
                    "type": "string"
                },
                "time": {
                    "description": "time represents the time the error was encountered.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.CSIDriver": {
            "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents the specification of the CSI Driver.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIDriver",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.CSIDriverList": {
            "description": "CSIDriverList is a collection of CSIDriver objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSIDriver",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIDriverList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.CSIDriverSpec": {
            "description": "CSIDriverSpec is the specification of a CSIDriver.",
            "type": "object",
            "properties": {
                "attachRequired": {
                    "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\nThis field is immutable.",
                    "type": "boolean"
                },
                "fsGroupPolicy": {
                    "description": "fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\nThis field is immutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.",
                    "type": "string"
                },
                "podInfoOnMount": {
                    "description": "podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\nThe CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\nThe following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\nThis field is immutable.",
                    "type": "boolean"
                },
                "requiresRepublish": {
                    "description": "requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\nNote: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.",
                    "type": "boolean"
                },
                "seLinuxMount": {
                    "description": "seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\nWhen \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\nWhen \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\nDefault is \"false\".",
                    "type": "boolean"
                },
                "storageCapacity": {
                    "description": "storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field was immutable in Kubernetes \u003c= 1.22 and now is mutable.",
                    "type": "boolean"
                },
                "tokenRequests": {
                    "description": "tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": {\n  \"\u003caudience\u003e\": {\n    \"token\": \u003ctoken\u003e,\n    \"expirationTimestamp\": \u003cexpiration timestamp in RFC3339\u003e,\n  },\n  ...\n}\n\nNote: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.TokenRequest"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "volumeLifecycleModes": {
                    "description": "volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\nThe other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\nFor more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.\n\nThis field is immutable.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.CSINode": {
            "description": "DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "metadata.name must be the Kubernetes node name.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec is the specification of CSINode",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSINode",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.CSINodeDriver": {
            "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node",
            "type": "object",
            "required": [
                "name",
                "nodeID"
            ],
            "properties": {
                "allocatable": {
                    "description": "allocatable represents the volume resources of a node that are available for scheduling.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeNodeResources"
                },
                "name": {
                    "description": "name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.",
                    "type": "string",
                    "default": ""
                },
                "nodeID": {
                    "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.",
                    "type": "string",
                    "default": ""
                },
                "topologyKeys": {
                    "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.CSINodeList": {
            "description": "CSINodeList is a collection of CSINode objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSINode",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSINodeList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.CSINodeSpec": {
            "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node",
            "type": "object",
            "required": [
                "drivers"
            ],
            "properties": {
                "drivers": {
                    "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeDriver"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.CSIStorageCapacity": {
            "description": "CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.",
            "type": "object",
            "required": [
                "storageClassName"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "capacity": {
                    "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "maximumVolumeSize": {
                    "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                },
                "metadata": {
                    "description": "Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "nodeTopology": {
                    "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "storageClassName": {
                    "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacity",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.CSIStorageCapacityList": {
            "description": "CSIStorageCapacityList is a collection of CSIStorageCapacity objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of CSIStorageCapacity objects.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIStorageCapacity"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "CSIStorageCapacityList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.StorageClass": {
            "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
            "type": "object",
            "required": [
                "provisioner"
            ],
            "properties": {
                "allowVolumeExpansion": {
                    "description": "allowVolumeExpansion shows whether the storage class allow volume expand",
                    "type": "boolean"
                },
                "allowedTopologies": {
                    "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "mountOptions": {
                    "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "parameters": {
                    "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "provisioner": {
                    "description": "provisioner indicates the type of the provisioner.",
                    "type": "string",
                    "default": ""
                },
                "reclaimPolicy": {
                    "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.\n\nPossible enum values:\n - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.\n - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.\n - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.",
                    "type": "string",
                    "enum": [
                        "Delete",
                        "Recycle",
                        "Retain"
                    ]
                },
                "volumeBindingMode": {
                    "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "StorageClass",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.StorageClassList": {
            "description": "StorageClassList is a collection of storage classes.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of StorageClasses",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "StorageClassList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.TokenRequest": {
            "description": "TokenRequest contains parameters of a service account token.",
            "type": "object",
            "required": [
                "audience"
            ],
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver.",
                    "type": "string",
                    "default": ""
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\"",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.VolumeAttachment": {
            "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
                },
                "status": {
                    "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachment",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.VolumeAttachmentList": {
            "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items is the list of VolumeAttachments",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "storage.k8s.io",
                    "kind": "VolumeAttachmentList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.api.storage.v1beta1.VolumeAttachmentSource": {
            "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
            "type": "object",
            "properties": {
                "inlineVolumeSpec": {
                    "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
                },
                "persistentVolumeName": {
                    "description": "persistentVolumeName represents the name of the persistent volume to attach.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec": {
            "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attacher",
                "source",
                "nodeName"
            ],
            "properties": {
                "attacher": {
                    "description": "attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
                    "type": "string",
                    "default": ""
                },
                "nodeName": {
                    "description": "nodeName represents the node that the volume should be attached to.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "source represents the volume that should be attached.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus": {
            "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
            "type": "object",
            "required": [
                "attached"
            ],
            "properties": {
                "attachError": {
                    "description": "attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
                },
                "attached": {
                    "description": "attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "boolean",
                    "default": false
                },
                "attachmentMetadata": {
                    "description": "attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "detachError": {
                    "description": "detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
                    "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.VolumeError": {
            "description": "VolumeError captures an error encountered during a volume operation.",
            "type": "object",
            "properties": {
                "message": {
                    "description": "message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.",
                    "type": "string"
                },
                "time": {
                    "description": "time represents the time the error was encountered.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.api.storage.v1beta1.VolumeNodeResources": {
            "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.",
            "type": "object",
            "properties": {
                "count": {
                    "description": "count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": []
        }
    }
}